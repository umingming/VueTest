(()=>{"use strict";var E={4486:(E,T,S)=>{S(3792),S(3362),S(9085),S(9391);var n=S(5130),r=S(6768),I=S(4232),R={class:"subject-group"},N=["onClick"],O={id:"question-mark"},C={class:"question-box"},A={id:"serial"},U={class:"answer-box"},e={key:0,class:"info-box"},_={key:0},t={key:1},o={key:1,class:"success"};function i(E,T,S,i,D,a){return(0,r.uX)(),(0,r.CE)(r.FK,null,[(0,r.Lk)("div",R,[((0,r.uX)(),(0,r.CE)(r.FK,null,(0,r.pI)(5,(function(E){return(0,r.Lk)("button",{key:E,class:(0,I.C4)({on:i.selectedSubject===E}),onClick:function(T){return i.selectSubject(E)}},(0,I.v_)(E),11,N)})),64))]),i.currentQuestion?((0,r.uX)(),(0,r.CE)("div",{key:0,class:(0,I.C4)({correct:i.currentQuestion.IS_CORRECT})},[(0,r.Lk)("span",O,[(0,r.eW)((0,I.v_)(i.questionMark)+" ",1),(0,r.Lk)("button",{onClick:T[0]||(T[0]=function(){return i.shuffleQuestionList&&i.shuffleQuestionList.apply(i,arguments)})},"Shuffle")]),(0,r.Lk)("div",C,(0,I.v_)(i.currentQuestion.QUESTION),1),(0,r.Lk)("span",A,(0,I.v_)(i.currentQuestion.ITERATION)+", "+(0,I.v_)(i.currentQuestion.NO),1),(0,r.Lk)("div",U,[(0,r.Lk)("input",{ref:"answerRef",onKeyup:T[1]||(T[1]=(0,n.jR)((function(){return i.checkAnswer&&i.checkAnswer.apply(i,arguments)}),["enter"]))},null,544),i.isAnswerEntered?((0,r.uX)(),(0,r.CE)("button",{key:1,onClick:T[3]||(T[3]=function(){return i.passAnswer&&i.passAnswer.apply(i,arguments)})},"Next")):((0,r.uX)(),(0,r.CE)("button",{key:0,onClick:T[2]||(T[2]=function(){return i.checkAnswer&&i.checkAnswer.apply(i,arguments)})},"Enter"))]),i.isAnswerEntered?((0,r.uX)(),(0,r.CE)("div",e,[i.currentQuestion.IS_CORRECT?((0,r.uX)(),(0,r.CE)("div",_,"맞았다! 잘했다!")):((0,r.uX)(),(0,r.CE)("div",t,"틀렸다.")),(0,r.Lk)("div",null,[(0,r.eW)(" 정답: "),(0,r.Lk)("span",null,(0,I.v_)(i.currentQuestion.ANSWER),1)])])):(0,r.Q3)("",!0)],2)):((0,r.uX)(),(0,r.CE)("div",o,(0,I.v_)(i.selectedSubject)+" 과목 완료!🎉",1))],64)}var D=S(8676),a=(S(8706),S(2008),S(113),S(8980),S(4114),S(6910),S(4554),S(6099),S(7495),S(5440),S(144)),B=[{ANSWER:2,QUESTION:"UML 모델에서 한 사물의 명세가 바뀌면 다른 사물에 영향을 주며, \r\n일반적으로 한 클래스가 다른 클래스를 오퍼레이션의 매개변수로 사용하는 경우에 나타나는 관계는?\r\n1)Association\r\n2)Dependency\r\n3)Realization\r\n4)Generalization\r\n",ITERATION:202108,NO:2,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"XOOX",QUESTION:"<익스트림 프로그래밍(XP)>\r\n- 빠른 개발을 위해 테스트를 수행하지 않음. (O/X)\r\n- 사용자의 요구사항은 언제든지 변할 수 있음. (O/X)\r\n- 고객과 직접 대면하며 요구사항을 이야기하기 위해 사용자 스토리를 활용 (O/X)\r\n- 기존의 방법론에 비해 실용성을 강조하지 않음. (O/X)\r\n",ITERATION:202108,NO:3,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:4,QUESTION:"UML 모델에서 사용하는 Structural Diagram에 속하지 않은 것은?\r\n1)Class Diagram\r\n2)Object Diagram\r\n3)Component Diagram\r\n4)Activity Diagram\r\n",ITERATION:202006,NO:12,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"원격, 객체, 트랜잭션",QUESTION:"<미들웨어>\r\n- RPC: ㅇㅇ 절차 또는 프로시저를 호출하는 미들웨어\r\n- ORB: ㅇㅇ 간 메시지 전달을 지원하는 미들웨어\r\n- TP monitor: ㅇㅇㅇㅇ이 올바르게 처리되고 있는지 데이터를 감시하고 제어하는 미들웨어\r\n",ITERATION:202006,NO:9,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"응답, 가, 사용, 정",QUESTION:"소프트웨어 설계시 구축된 플랫폼의 성능 특성 분석에 사용되는 측정 항목\r\n-> ㅇㅇ시간, ㅇ용성, ㅇㅇ률, ㅇ확성\r\n",ITERATION:202006,NO:5,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:2,QUESTION:"대표적으로 DOS 및 Unix 등의 운영체제에서 조작을 위해 사용하던 것으로, 정해진 명령 문자열을 입력하여 시스템을 조작하는 사용자 인터페이스는?\r\n1)GUI(Graphical User Interface) 2)CLI(Command Line Interface) 3)CUI(Cell User Interface) 4)MUI(Mobile User Interface)\r\n",ITERATION:202108,NO:18,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:2,QUESTION:"클래스 다이어그램의 요소로 다음 설명에 해당하는 용어는?\r\n- 클래스의 동작을 의미\r\n- 클래스에 속하는 객체에 대하여 적용될 메서드를 정의한 것\r\n- UML에서는 동작에 대한 인터페이스를 지칭\r\n1)Instance 2)Operation 3)Item 4)Hiding\r\n",ITERATION:202108,NO:8,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"응용, 지속, 공통, 흐름도",QUESTION:"<소프트웨어 공학에서 모델링>\r\n- 개발팀이 ㅇㅇ문제를 이해하는 데 도움을 줌. \r\n- 개발의 전 과정에서 ㅇㅇ적으로 사용됨.\r\n- 개발될 시스템에 대하여 여러 분야의 엔지니어들이 ㅇㅇ된 개념을 공유하는 데 도움을 줌. \r\n- 절차적인 프로그램을 위한 자료 ㅇㅇㅇ는 프로세스 위주의 모델링 방법임. \r\n",ITERATION:202108,NO:6,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:4,QUESTION:"요구 사항 정의 및 분석/설계의 결과물을 표현하기 위한 모델링 과정에서 사용되는 다이어그램이 아닌 것은?\r\n1)Data Flow Diagram 2)UML Diagram 3)E-R Diagram 4)AVL Diagram\r\n",ITERATION:202108,NO:10,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"데이터, 위치, 서비스, 사용자",QUESTION:"<분산 시스템에서의 미들웨어>\r\n- 분산 시스템에서 다양한 부분을 관리하고 통신하며 ㅇㅇㅇ를 교환하게 해주는 소프트웨어임. \r\n- ㅇㅇ 투명성을 제공함. \r\n- 분산 시스템의 여러 컴포넌트가 요구하는 재사용 가능한 ㅇㅇㅇ의 구현을 제공함.\r\n- 애플리케이션과 ㅇㅇㅇ 사이에서만 분산 서비스를 제공함.\r\n",ITERATION:202108,NO:19,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"모듈, 이식, 크기, 결합, 응집",QUESTION:"<소프트웨어 설계 지침>\r\n- ㅇㅇ의 기능을 예측할 수 있도록 정의함.\r\n- ㅇㅇ성을 고려함. \r\n- 적당한 모듈의 ㅇㅇ를 유지함.\r\n- 모듈의 ㅇㅇ도는 줄이고 ㅇㅇ도는 높여야 함.\r\n",ITERATION:202103,NO:6,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"비정형, 정형, 정형, 정형",QUESTION:"<요구 사항 명세 기법>                                  정답 기입 예시)비정형, 비정형, 비정형, 비정형       \r\n- (비정형/정형) 명세 기법은 사용자의 요구를 표현할 때 자연어를 기반으로 서술함.\r\n- (비정형/정형) 명세 기법은 사용자의 요구를 표현할 때 Z 비정형 명세 기법을 사용함.\r\n- (비정형/정형) 명세 기법은 사용자의 요구를 표현할 때 수학적인 원리와 표기법을 이용함.\r\n- (비정형/정형) 명세 기법은 다른 명세 기법에 비해 표현이 간결함.\r\n",ITERATION:202009,NO:15,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"파이프 필터",QUESTION:"서브 시스템이 입력 데이터를 받아 처리하고 결과를 다른 시스템에 보내는 작업이 반복되는 아키텍처 스타일은?\r\n-> ㅇㅇㅇ ㅇㅇ 구조\r\n",ITERATION:202105,NO:12,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"액터, 객체, 라이프, 실행, 메시지, 소멸, 프레임",QUESTION:"<시퀀스 다이어그램의 구성 요소>\r\n- ㅇㅇ: 시스템으로부터 서비스를 요청하는 외부 요소로, 사람이나 외부 시스템을 의미함.\r\n- ㅇㅇ: 메시지를 주고받는 주체\r\n- ㅇㅇㅇ 라인: 객체가 메모리에 존재하는 기간\r\n- 활성(실행) 상자: 객체가 메시지를 주고받으며 ㅇㅇ되고 있음을 표현\r\n- ㅇㅇㅇ: 객체가 상호 작용을 위해 주고 받는 것\r\n- 객체 ㅇㅇ: 라이프라인 상에서 이 표시를 만나면 해당 객체는 더 이상 메모리에 존재하지 않음을 의미\r\n- ㅇㅇㅇ: 다이어그램의 전체 또는 일부를 묶어 표현\r\n",ITERATION:202008,NO:6,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"생성, 행위, 생성, 구조",QUESTION:"<GoF의 디자인 패턴>\r\n- Builder: ㅇㅇ패턴\r\n- Visitor: ㅇㅇ 패턴\r\n- Prototype: ㅇㅇ 패턴\r\n- Bridge: ㅇㅇ 패턴\r\n",ITERATION:202006,NO:7,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:3,QUESTION:"GoF 디자인 패턴의 생성패턴에 속하지 않는 것은?\r\n1)추상 팩토리(Abstract Factory) 2)빌더(Builder) 3)어댑터(Adapter) 4)싱글턴(Singleton)\r\n",ITERATION:202103,NO:4,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"버블, 구조, 자료, 화살표",QUESTION:"<DFD(data flow diagram)>\r\n- 자료 흐름 그래프 또는 ㅇㅇ 차트라고도 함. \r\n- ㅇㅇ적 분석 기법에 이용 \r\n- ㅇㅇ 흐름을 명확하게 표현할 수 있음.\r\n- DFD의 요소는 ㅇㅇㅇ, 원, 사각형, 직선으로 표시됨.\r\n",ITERATION:202009,NO:9,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"용기, 단순, 고객, 피드백, 존중",QUESTION:"<XP의 5가지 가치>\r\n- ㅇㅇ: 고객의 요구사항 변화에 능동적인 대처\r\n- ㅇㅇ성: 부가적 기능, 사용되지 않는 구조와 알고리즘 배제\r\n- 커뮤니케이션: 개발자, 관리자, ㅇㅇ 간의 원활한 의사소통\r\n- ㅇㅇㅇ: 지속적인 테스트와 반복적 결함 수정\r\n- ㅇㅇ: 모든 프로젝트 관리자는 팀원의 기여를 존중함.\r\n",ITERATION:202006,NO:10,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"OOXX",QUESTION:"<애자일 소프트웨어 개발 기법의 가치>\r\n- 프로세스의 도구보다는 개인과 상호작용에 더 가치를 둠. (O/X)\r\n- 계약 협상보다는 고객과의 협업에 더 가치를 둠. (O/X)\r\n- 실제 작동하는 소프트웨어보다는 이해하기 좋은 문서에 더 가치를 둠. (O/X)\r\n- 변화에 대응하는 것보다는 계획을 따르는 것에 가치를 둠. (O/X)  \r\n",ITERATION:202103,NO:18,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"기능",QUESTION:"럼바우의 객체 지향 분석 기법 중 자료 흐름도(DFD)를 주료 이용하는 것은?\r\n-> ㅇㅇ모델링\r\n",ITERATION:202108,NO:15,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:1,QUESTION:"자료사전(Data Dictionary)에서 선택의 의미를 나타내는 것은?\r\n1)[] 2){} 3)+ 4)=\r\n",ITERATION:202009,NO:13,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"객체지향",QUESTION:"ㅇㅇㅇㅇ 분석: 소프트웨어를 개발하기 위한 비즈니스를 객체와 속성, 클래스와 멤버, 전체와 부분 등으로 나누어서 분석해 내는 기법\r\n",ITERATION:202103,NO:17,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"송신",QUESTION:"시스템 인터페이스를 구성하는 시스템으로, 연계할 데이터를 데이터베이스와 애플리케이션으로부터 연계 테이블 또는 파일 형태로 생성하여 송신하는 시스템이란?\r\n-> ㅇㅇ 시스템\r\n",ITERATION:202105,NO:9,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"직관, 유효, 학습, 유연",QUESTION:"<사용자 인터페이스(UI)의 기본 원칙>\r\n- ㅇㅇ성: 누구나 쉽게 이해하고 사용할 수 있어야 함.\r\n- ㅇㅇ성: 사용자의 목적을 정확하고 완벽하게 달성해야 함.\r\n- ㅇㅇ성: 누구나 쉽게 배우고 익힐 수 있어야 함.\r\n- ㅇㅇ성: 사용자의 요구사항을 최대한 수용하고 실수를 최소화해야 함.\r\n",ITERATION:202008,NO:9,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:4,QUESTION:"객체에게 어떤 행위를 하도록 지시하는 명령은?\r\n1)Class 2)Package 3)Object 4)Message\r\n",ITERATION:202105,NO:11,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"구조, 자동, 정보, 분산",QUESTION:"CASE의 원천 기술\r\n-> ㅇㅇ적 기법, 프로토타이핑 기술, ㅇㅇ프로그래밍 기술, ㅇㅇ 저장소 기술, ㅇㅇ 처리 기술\r\n",ITERATION:202105,NO:10,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"제어, 기능, 자료",QUESTION:"<소프트웨어 설계에서 사용되는 대표적인 추상화 기법>\r\n- ㅇㅇ 추상화: 제어의 정확한 메커니즘을 정의하지 않고 원하는 효과를 정하는데 이용하는 방법\r\n- ㅇㅇ 추상화: 입력 자료를 출력 자료로 변환하는 과정을 추상화하는 방법\r\n- ㅇㅇ 추상화: 자료와 자료에 적용될 수 있는 기능을 함께 정의함으로써 자료 객체를 구성하는 방법\r\n",ITERATION:202108,NO:4,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:3,QUESTION:"디자인 패턴 중에서 행위적 패턴에 속하지 않는 것은?\r\n1)커맨드 패턴 2)옵저버 패턴 3)프로토타입 패턴 4)상태 패턴\r\n",ITERATION:202008,NO:8,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:2,QUESTION:"UML 모델에서 한 객체가 다른 객체에게 오퍼레이션을 수행하도록 지정하는 의미적 관계로 옳은 것은?\r\n1)Dependency 2)Realization 3)Generalization 4)Association\r\n",ITERATION:202105,NO:15,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:2,QUESTION:"운영체제 분석을 위해 리눅스에서 버전을 확인하고자 할 때 사용되는 명령어는?\r\n1)ls 2)uname 3)pwd\r\n",ITERATION:202103,NO:1,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"소켓",QUESTION:"통신을 위한 프로그램을 생성하여 포트를 할당하고, 클라이언트의 통신 요청 시 클라이언트와 연결하는 내/외부 송/수신 연계 기술은?\r\n-> ㅇㅇ 기술\r\n",ITERATION:202103,NO:2,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"객체, 메시지, 동적, 교류",QUESTION:"<순차 다이어그램(Sequence Diagram)>\r\n- ㅇㅇ들의 상호 작용을 나타내기 위해 사용 \r\n- 시간의 흐름에 따라 객체들이 주고 받는 ㅇㅇㅇ의 전달 과정을 강조\r\n- ㅇㅇ 다이어그램에 가까움.\r\n- ㅇㅇ 다이어그램의 한 종류로 볼 수 있음. \r\n",ITERATION:202108,NO:16,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"상호, 문서, 협업, 변화",QUESTION:"<애자일 개발 4가지 핵심 가치>\r\n- 프로세스와 도구보다는 개인과 ㅇㅇ작용에 더 가치를 둠.\r\n- 방대한 ㅇㅇ보다는 실행되는 SW에 더 가치를 둠.\r\n- 계약 협상보다는 고객과 ㅇㅇ에 더 가치를 둠.\r\n- 계획을 따르기보다는 ㅇㅇ에 반응하는 것에 더 가치를 둠.\r\n",ITERATION:202008,NO:4,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"실시간, 마스터, 슬레이브, 제어",QUESTION:"<분산 시스템을 위한 마스터-슬레이브 아키텍처>\r\n- 일반적으로 ㅇㅇㅇ 시스템에서 사용 \r\n- (마스터/슬레이브) 프로세스는 일반적으로 연산, 통신, 조정을 책임짐. \r\n- (마스터/슬레이브) 프로세스는 데이터 수집 기능을 수행할 수 있음. \r\n- 마스터 프로세스는 슬레이브 프로세스들을 ㅇㅇ할 수 있음.\r\n",ITERATION:202108,NO:9,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:3,QUESTION:"객체 지향 설계 원칙 중, 서브 타입(상속 받은 하위 클래스)은 어디에서나 자신의 기반 타입(상위 클래스)으로 교체할 수 있어야 함을 의미하는 원칙은?\r\n1)ISP(Interface Segregation Principle) 2)DIP(Dependency Inversion Principle) \r\n3)LSP(Liskov Substitution Principle) 4)SRP(Single Responsibility Principle)\r\n",ITERATION:202008,NO:17,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"가, 효, 일, 보안, 확장",QUESTION:"DBMS 분석시 고려사항?\r\n-> ㅇ용성, ㅇ율성, ㅇ관성, 회복, ㅇㅇ성, 데이터베이스 ㅇㅇ\r\n",ITERATION:202006,NO:18,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:4,QUESTION:"UML 다이어그램 중 시스템 내 클래스의 정적 구조를 표현하고 클래스와 클래스, 클래스의 속성 사이의 관계를 나타내는 것은?\r\n1)Activity Diagram 2)Model Diagram 3)State Diagram 4)Class Diagram\r\n",ITERATION:202103,NO:19,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"수행, 메시지, 원격, 네트워크",QUESTION:"<미들웨어>\r\n- WAS(Web Application Server): 애플리케이션 ㅇㅇ 미들웨어\r\n- MOM(Message Oriented Middleware): ㅇㅇㅇ 지향 미들웨어\r\n- RPC(Remote Procedure Call): ㅇㅇ 프로시저 호출 미들웨어\r\n- ORB(Object Request Broker): ㅇㅇㅇㅇ 호출 미들웨어\r\n",ITERATION:202103,NO:5,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"기능, 정적, 동적",QUESTION:"<UML>\r\n- ㅇㅇ적 모델: 사용자 측면에서 본 시스템 기능이며, UML에서는 Use case Diagram을 사용함.\r\n- ㅇㅇ 모델: 객체, 속성, 연관관계, 오퍼레이션의 시스템 구조를 나타내며, UML에서는 Class Diagram을 사용함.\r\n- ㅇㅇ 모델: 시스템의 내부 동작을 말하며, UML에서는 Sequence Diagram, State Diagram, Activity Diagram을 사용함.\r\n",ITERATION:202103,NO:12,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:2,QUESTION:"UML 다이어그램이 아닌 것은?\r\n1)액티비티(Activity) 다이어그램 2)절차(Procedural) 다이어그램 3)클래스(Class) 다이어그램 4)시퀀스(Sequence) 다이어그램\r\n",ITERATION:202105,NO:14,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"목적, 행위, 행위, 인스턴스",QUESTION:"<GoF(Gang of Four) 디자인 패턴>\r\n- 디자인 패턴을 ㅇㅇ으로 분류할 때 생성, 구조, 행위로 분류할 수 있음.\r\n- Strategy 패턴: 대표적인 ㅇㅇ 패턴으로 동일한 계열의 알고리즘들을 개별적으로 캡슐화하여 상호 교환할 수 있게 정의함.\r\n- ㅇㅇ 패턴: 클래스나 객체들이 상호작용하는 방법과 책임을 분산하는 방법을 정의함. \r\n- Singleton 패턴: 특정 클래스의 ㅇㅇㅇㅇ가 오직 하나임을 보장하고, 이에 대한 접근 방법을 제공함. \r\n",ITERATION:202108,NO:13,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"정의, 연결, 생략, 선택, 반복, 설명",QUESTION:"<자료 사전 표기법>\r\n- =: 자료의 ㅇㅇ\r\n- +: 자료의 ㅇㅇ\r\n- (): 자료의 ㅇㅇ\r\n- [|]: 자료의 ㅇㅇ\r\n- {}: 자료의 ㅇㅇ\r\n- **: 자료의 ㅇㅇ\r\n",ITERATION:202008,NO:16,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:4,QUESTION:"요구사항 모델링에 활용되지 않는 것은?\r\n1)애자일(Agile) 방법 2)유스케이스(Use case) 다이어그램 3)시퀀스(Sequence) 다이어그램 4)단계(Phase) 다이어그램\r\n",ITERATION:202103,NO:14,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"정보, 독립, 은닉, 수정",QUESTION:"<객체 지향 설계의 정보 은닉>\r\n- 필요하지 않은 ㅇㅇ는 접근할 수 없도록 하여 한 모듈 또는 하부 시스템이 다른 모듈의 구현에 영향을 받지 않게 설계되는 것을 의미함.\r\n- 모듈들 사이의 ㅇㅇ성을 유지시키는 데 도움이 됨. \r\n- 설계에서 ㅇㅇ되어야 할 기본 정보로는 IP주소와 같은 물리적 코드, 상세 데이터 구조 등 \r\n- 모듈 내부의 자료 구조와 접근 동작들에만 수정을 국한하기 때문에 요구사항 등 변화에 따른 ㅇㅇ이 가능함. \r\n",ITERATION:202108,NO:5,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"재사용, 자동, 보수",QUESTION:"<CASE(Computer Aided Software Engineering)>\r\n- 소프트웨어 모듈의 ㅇㅇㅇ성이 향상됨. \r\n- ㅇㅇ화된 기법을 통해 소프트웨어 품질 향상됨. \r\n- 소프트웨어 유지ㅇㅇ를 간편하게 수행할 수 있음. \r\n",ITERATION:202103,NO:11,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:1,QUESTION:"럼바우 분석기법에서 정보 모델링이라고도 하며, 시스템에서 요구되는 객체를 찾아내어 속성과 연산 식별 및 객체들 간의 관계를 규정하여 다이어그램을 표시하는 모델링은?\r\n1)Object 2)Dynamic 3)Function 4)Static\r\n",ITERATION:202103,NO:16,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"가용, 용이, 사용",QUESTION:"소프트웨어 아키텍처 설계에서 시스템 품질 속성의 종류\r\n-> ㅇㅇ성, 변경 ㅇㅇ성, 성능, 보안성, ㅇㅇ 편의성, 시험 용의성\r\n",ITERATION:202105,NO:8,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:3,QUESTION:"시스템의 구성요소로 볼 수 없는 것은?\r\n1)Process 2)Feedback 3)Maintenance 4)Control\r\n",ITERATION:202105,NO:1,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"모델, 오류, 자료흐름도",QUESTION:"<상위 CASE 도구가 지원하는 주요 기능>\r\n- ㅇㅇ들 사이의 모순 검사 기능\r\n- 모델의 ㅇㅇ 검증 기능\r\n- ㅇㅇㅇㅇㅇ 작성 기능\r\n",ITERATION:202105,NO:16,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"ㄹㄴㄷㄱ",QUESTION:"요구사항 개발 프로세스의 순서는?              정답 기입 예시)ㄱㄴㄷㄹ\r\nㄱ)확인 ㄴ)분석 ㄷ)명세 ㄹ)도출                   \r\n",ITERATION:202105,NO:3,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"인터페이스, 인스턴스, 재사용, 추상, 중재자",QUESTION:"<GoF(Gang of Four) 디자인 패턴>\r\n- factory method pattern: 상위 클래스에서 객체를 생성하는 ㅇㅇㅇㅇㅇ를 정의하고, 하위 클래스에서 인스턴스를 생성하도록 하는 방식\r\n- prototype pattern: prototype을 먼저 생성하고 ㅇㅇㅇㅇ를 복제하여 사용하는 구조\r\n- adapter pattern: 기존에 구현되어 있는 클래스에 기능 발생시 기존 클래스를 ㅇㅇㅇ할 수 있도록 중간에서 맞춰주는 역할\r\n- bridge pattern: 구현부에서 ㅇㅇ층을 분리하여 각자 독립적으로 확장이 가능하게 함.\r\n- mediator pattern: 객체 간의 통제와 지시의 역할을 하는 ㅇㅇㅇ를 두어 객체 지향의 목표를 당설하게 해줌.\r\n",ITERATION:202105,NO:6,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"식별, 분류, 배열",QUESTION:"<코드의 주요 기능>\r\n- ㅇㅇ 기능: 데이터 간의 성격에 따라 구분이 가능함.\r\n- ㅇㅇ 기능: 특정 기준이나 동일한 유형에 해당하는 데이터를 그룹화할 수 있음.\r\n- ㅇㅇ 기능: 의미를 부여하여 나열할 수 있음.\r\n",ITERATION:202008,NO:10,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:1,QUESTION:"다음 내용이 설명하는 객체지향 설계 원칙은?\r\n- 클라이언트는 자신이 사용하지 않는 메서드와 의존 관계를 맺으면 안 됨.\r\n- 클라이언트가 사용하지 않는 인터페이스 때문에 영향을 받아서는 안 됨.\r\n1)인터페이스 분리 원칙 2)단일 책임 원칙 3)개방 폐쇄의 원칙 4)리스코프 교체의 원칙\r\n",ITERATION:202009,NO:5,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:4,QUESTION:"애자일 개발 방법론이 아닌 것은?\r\n1)스크럼(Scrum)\r\n2)익스트림 프로그래밍(eXtreme Programming)\r\n3)기능 주도 개발(FDD, Feature Driven Development)\r\n4)하둡(Hadoop)\r\n",ITERATION:202105,NO:18,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"미들",QUESTION:"ㅇㅇ웨어: 클라이언트와 서버 간의 통신을 담당하는 시스템 소프트웨어\r\n",ITERATION:202009,NO:18,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"캡슐",QUESTION:"객체 지향 설계에서 객체가 가지고 있는 속성과 오퍼레이션의 일부를 감추어서 객체의 외부에서 접근이 불가능하게 하는 개념은?\r\n-> ㅇㅇ화\r\n",ITERATION:202105,NO:5,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:2,QUESTION:"UML의 기본 구성요소가 아닌 것은?\r\n1)Things 2)Terminal 3)Relationship 4)Diagram\r\n",ITERATION:202009,NO:11,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:2,QUESTION:"소프트웨어의 상위 설계에 속하지 않는 것은?\r\n1)아키텍처 설계 2)모듈 설계 3)인터페이스 정의 4)사용자 인터페이스 설계\r\n",ITERATION:202009,NO:12,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:2,QUESTION:"미들웨어 솔루션의 유형에 포함되지 않는 것은?\r\n1)WAS 2)Web Server 3)RPC 4)ORB\r\n",ITERATION:202008,NO:5,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:3,QUESTION:"코드화 대상 항목의 증량, 면적, 용량 등의 물리적 수치를 이용하여 만든 코드는?\r\n1)순차 코드 2)10진 코드 3)표의 숫자 코드 4)블록 코드\r\n",ITERATION:202009,NO:7,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"OOOX",QUESTION:"<소프트웨어의 사용자 인터페이스 개발 시스템이 가져야 할 기능>\r\n- 사용자 입력의 검증 (O/X)\r\n- 에러 처리와 에러 메시지 처리 (O/X)\r\n- 도움과 프롬포트 제공 (O/X)\r\n- 소스 코드 분석 및 오류 복구 (O/X)\r\n",ITERATION:202009,NO:14,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"OXOO",QUESTION:"<소프트웨어 개발 단계에서 요구 분석 과정>\r\n- 분석 결과의 문서화를 통해 향후 유지보수에 유용하게 활용할 수 있음. (O/X)\r\n- 개발 비용이 가장 많이 소요되는 단계임. (O/X)\r\n- 자료흐름도, 자료 사전 등이 효과적으로 이용됨. (O/X)\r\n- 보다 구체적인 명세를 위한 소단위 명세서가 활용될 수 있음. (O/X)\r\n",ITERATION:202009,NO:16,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:4,QUESTION:"애자일 방법론에 해당하지 않는 것은?\r\n1)기능 중심 개발 2)스크럼 3)익스트림 프로그래밍 4)모듈 중심 개발\r\n",ITERATION:202009,NO:17,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"비용, 변경, 영향",QUESTION:"<요구사항 관리 도구의 필요성>\r\n- 요구사항 변경으로 인한 ㅇㅇ 편익 분석\r\n- 요구사항 ㅇㅇ의 추적\r\n- 요구사항 변경에 따른 ㅇㅇ 평가\r\n",ITERATION:202105,NO:17,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"OOXO",QUESTION:"<요구사항 분석 시 필요한 기술>\r\n- 청취와 인터뷰 질문 기술 (O/X)\r\n- 분석과 중재 기술 (O/X)\r\n- 설계 및 코딩 기술 (O/X)\r\n- 관찰 및 모델 작성 기술 (O/X)\r\n",ITERATION:202008,NO:1,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"OOOX",QUESTION:"<요구사항 분석>\r\n- 비용과 일정에 대한 제약 설정 (O/X)\r\n- 타당성 조사 (O/X)\r\n- 요구사항 정의 문서화 (O/X)\r\n- 설계 명세서 작성 (O/X)\r\n",ITERATION:202006,NO:13,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"파이프, 계층, 3",QUESTION:"<소프트웨어 아키텍처>\r\n- ㅇㅇㅇ 필터 패턴: 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복\r\n- 레이어 패턴: ㅇㅇ 모델이라고도 함.\r\n- 모델-뷰-컨트롤러 패턴: ㅇ개의 서브시스템으로 구성되어 있음.\r\n",ITERATION:202009,NO:6,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"생명, 모순, 오류, 다이어그램, 모형, 그래픽",QUESTION:"<CASE가 갖고 있는 주요 기능>\r\n- 소프트웨어 ㅇㅇ주기 전 단계의 연결\r\n- 모델들 사이의 ㅇㅇ 검사\r\n- ㅇㅇ 검증\r\n- 자료흐름도 등 ㅇㅇㅇㅇㅇ 작성\r\n- 다양한 소프트웨어의 개발 ㅇㅇ 지원\r\n- 시스템 문서화 및 명세화를 위한 ㅇㅇㅇ 지원\r\n",ITERATION:202006,NO:17,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"순차",QUESTION:"ㅇㅇ 코드: 코드 설계에서 일정한 일련 번호를 부여하는 방식의 코드\r\n",ITERATION:202006,NO:1,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"미들",QUESTION:"분산 컴퓨팅 환경에서 서로 다른 기종 간의 하드웨어나 프로토콜, 통신환경 등을 연결하여 응용프로그램과 운영 환경 간에 원만한 통신이 이루어질 수 있게 서비스를 제공하는 소프트웨어는?\r\n-> ㅇㅇ웨어",ITERATION:202103,NO:10,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"생성, 구조, 행위",QUESTION:"<GoF의 디자인 패턴>\r\n- ㅇㅇ 패턴: 추상팩토리 패턴, 빌더 패턴, 팩토리 메소드 패턴, 프로토타입 패턴, 싱글톤 패턴\r\n- ㅇㅇ 패턴: 어댑터 패턴, 브릿지 패턴, 컴포지트 패턴, 데코레이터 패턴, 퍼사트 패턴, 플라이웨잇 패턴, 프록시 패턴\r\n- ㅇㅇ 패턴: 역할 사슬 패턴, 커맨드 패턴, 인터프리터 패턴, 이터레이터 패턴, 미디에이터 패턴, 메멘토 패턴, 옵저버 패턴, 스테이트 패턴\r\n",ITERATION:202105,NO:19,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"자동, 표준, 작업, 구조",QUESTION:"<CASE(Computer-Aided Software Engineering) 도구에 대한 설명>\r\n- 소프트웨어 개발 과정의 일부 또는 전체를 ㅇㅇ화하기 위한 도구\r\n- ㅇㅇ화된 개발 환경 구축 및 문서 자동화 기능을 제공함.)\r\n- 작업 과정 및 데이터 공유를 통해 ㅇㅇ자간 커뮤니케이션을 증대함. \r\n- 2000년대 이후 소개되었으며, 객체 지향 시스템 뿐만 아니라 ㅇㅇ적 시스템 등 다양한 시스템에서 활용\r\n",ITERATION:202008,NO:19,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"분석, 추출, 도메인, 비기능",QUESTION:"<요구 분석>\r\n- 요구 ㅇㅇ은 소프트웨어 개발의 실제적인 첫 단계로 사용자의 요구에 대해 이해하는 단계임.\r\n- 요구 ㅇㅇ은 프로젝트 계획 단계에 정의한 문제의 범위 내 사용자의 요구를 찾는 단계임.\r\n- ㅇㅇㅇ 분석은 요구에 대한 정보를 수집하고 배경을 분석하여 이를 토대로 모델링을 함. \r\n- ㅇㅇㅇ적 요구에서 시스템 구축에 대한 성능, 보안, 품질, 안정 등에 대한 요구사항을 도출 \r\n",ITERATION:202108,NO:7,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"클래스",QUESTION:"ㅇㅇㅇ: 객체 지향 프로그램에서 데이터를 추상화하는 단위\r\n",ITERATION:202006,NO:3,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"행위, 객체, 미시, 거시",QUESTION:"<객체 지향 분석 방법론>\r\n- Coad-Yourdon 방법: E-R 다이어그램을 사용하여 객체의 ㅇㅇ를 데이터 모델링하는데 초점을 둔 방법\r\n- 럼바우 분석 기법: ㅇㅇ, 동적, 기능 모델로 나누어 수행하는 방법\r\n- Booch 방법: ㅇㅇ적 개발 프로세스와 ㅇㅇ적 개발 프로세스를 모두 사용하는 방법\r\n- Jacobson 방법: Use-Case를 강조하여 사용하는 방법\r\n",ITERATION:202103,NO:7,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"OOOX",QUESTION:"<CASE의 주요 기능>\r\n- S/W 라이프 사이클 전 단계의 연결 (O/X)\r\n- 그래픽 지원 (O/X)\r\n- 다양한 소프트웨어 개발 모형 지원 (O/X)\r\n- 언어 변역 (O/X)\r\n",ITERATION:202009,NO:3,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"객체, 동적, 기능",QUESTION:"<럼바우의 객체지향 분석 절차>\r\nㅇㅇ 모형 -> ㅇㅇ 모형 -> ㅇㅇ 모형\r\n",ITERATION:202006,NO:14,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"동료검토, 워크스루, 인스펙션",QUESTION:"<인터페이스 요구 사항 검토 방법>\r\n- ㅇㅇㅇㅇ: 요구 사항 명세서 작성자가 요구 사항 명세서를 설명하고 이해 관계자들이 설명을 들으면서 결함을 반결함.\r\n- ㅇㅇㅇㅇ: 검토 회의 전에 요구사항 명세서를 미리 배포하여 사전 검토한 후에 짧은 검토 회의를 통해 결함을 발견하는 형태의 검토 방법\r\n- ㅇㅇㅇㅇ: 요구사항 명세서 작성자를 제외한 다른 검토 전문가들이 요구사항 명세서를 확인하면서 결함을 발견하는 형태의 검토 방법\r\n",ITERATION:202008,NO:20,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"하향, 세부, 의존, 이해",QUESTION:"<HIPO(Hierarchy Input Process Output)>\r\n- ㅇㅇ식 소프트웨어 개발을 위한 문서화 도구\r\n- HIPO 차트 종류에는 가시적 도표, 총체적 도표, ㅇㅇ적 도표가 있음.\r\n- 기능과 자료의 ㅇㅇ 관계를 동시에 표현 가능함.\r\n- 보기 쉽고 ㅇㅇ하기 쉬움.\r\n",ITERATION:202006,NO:19,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:1,QUESTION:"XP의 기본 원리로 볼 수 없는 것은?\r\n1)Linear Sequential Method 2)Pair Programming 3)Collective Ownership 4)Continuous Integration\r\n",ITERATION:202009,NO:1,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"사용자, 액터, 사용자, 연동",QUESTION:"<유스케이스>\r\n- 유스케이스 다이어그램은 ㅇㅇㅇ의 요구를 추출하고 분석하기 위해 주로 사용 \r\n- ㅇㅇ는 대상 시스템과 상호 작용하는 사람이나 다른 시스템에 의한 역할 \r\n- ㅇㅇㅇ 액터는 시스템을 사용함으로써 이득을 얻는 대상\r\n- ㅇㅇ은 2개 이상의 시스템이 일방이 아닌 상호 간의 동작에 영향을 줄 수 있도록 연결망을 구성하는 것\r\n",ITERATION:202105,NO:2,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"동, 기능",QUESTION:"럼바우의 객체 지향 분석에서 사용하는 분석 활동은?\r\n->객체 모델링, ㅇ적 모델링, ㅇㅇ 모델링\r\n",ITERATION:202105,NO:13,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:4,QUESTION:"UML에서 활용되는 다이어그램 중, 시스템의 동작을 표현하는 행위 다이어그램에 해당하지 않는 것은?\r\n1)유스케이스 다이어그램 2)시퀀스 다이어그램 3)활동 다이어그램 4)배치 다이어그램 \r\n",ITERATION:202008,NO:12,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"단방향, 외부, 접근자, 품질",QUESTION:"<소프트웨어 아키텍처>\r\n- 파이프 필터 아키텍처에서 데이터는 파이프를 통해 ㅇㅇㅇ으로 흐르며, 필터 이동시 오버헤드가 발생함.\r\n- ㅇㅇ에서 인식할 수 있는 특성이 담긴 소프트웨어의 골격이 되는 기본 구조로 볼 수 있음.\r\n- 데이터 중심 아키텍처는 공유 데이터 저장소를 통해 접근자 간의 통신이 이루어지므로 각 ㅇㅇㅇ의 수정과 확장이 용이함.\r\n- 이해 관계자들의 품질 요구 사항을 반영하여 ㅇㅇ 속성을 결정함.\r\n",ITERATION:202108,NO:20,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:4,QUESTION:"현행 시스템 분석에서 고려하지 않아도 되는 항목은?\r\n1)DBMS 분석 2)네트워크 분석 3)운영체제 분석 4)인적 자원 분석\r\n",ITERATION:202103,NO:9,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:4,QUESTION:"자료 사전에서 자료의 생략을 의미하는 기호는?\r\n1){} 2)** 3)= 4)()\r\n",ITERATION:202006,NO:8,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"협약",QUESTION:"<ㅇㅇ에 의한 설계의 명세에 포함되어야 하는 것>\r\n- 컴포넌트의 오퍼레이션 사용 전에 참이 되어야 할 선행조건\r\n- 사용 후 만족되어야 할 결과조건\r\n- 오퍼레이션이 실행되는 동안 항상 만족되어야 할 불변조건\r\n",ITERATION:202008,NO:11,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"상태",QUESTION:"ㅇㅇ 다이어그램: 럼바우의 객체지향 분석 기법에서 동적 모델링에 활용됨.\r\n",ITERATION:202009,NO:2,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"릴리즈, 변화, 고객, 요구",QUESTION:"<애자일 개발 방법론>\r\n- 빠른 ㅇㅇㅇ를 통해 문제점을 빠르게 파악함. \r\n- 계획을 따르기 보다는 ㅇㅇ에 반응하는 것에 중점을 둠.\r\n- ㅇㅇ과의 의사소통을 중요하게 생각함. \r\n- 진화하는 ㅇㅇ사항을 수용하는데 적합함. \r\n",ITERATION:202108,NO:14,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"확장",QUESTION:"ㅇㅇ 유스케이스: 기본 유스케이스 수행 시 특별한 조건을 만족할 때 수행\r\n",ITERATION:202103,NO:13,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"인스턴스, 방문자, 옵저버, 브리지",QUESTION:"<디자인 패턴>                                  정답 기입 예시) 개발환경, 이짱구, 개발자, 메소드        \r\n- 팩토리 메소드 패턴: 객체를 생성하기 위한 인터페이스를 정의하여 어떤 클래스가 ㅇㅇㅇㅇ화 될 것인지는 서브클래스가 결정\r\n- ㅇㅇㅇ 패턴: 각 클래스들의 데이터 구조에서 처리 기능을 분리하여 별도의 클래스로 구성\r\n- ㅇㅇㅇ 패턴: 한 객체의 상태가 변화하면 객체에 상속되어 있는 다른 객체들에게 변화된 상태를 전달하는 패턴\r\n- ㅇㅇㅇ 패턴: 구현부에서 추상층을 분리하여, 서로가 독립적으로 확장할 수 있도록 구성한 패턴\r\n",ITERATION:202008,NO:2,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"연관, 집합, 포함, 일반, 의존",QUESTION:"<UML 모델에서 관계>\r\n- ㅇㅇ 관계: 2개 이상의 사물이 서로 관련되어 있음.\r\n- ㅇㅇ 관계: 하나의 사물이 다른 사물에 포함되어 있는 관계\r\n- ㅇㅇ 관계: 집합 관계의 특수한 형태로, 포함하는 사물의 변화가 포함되는 사물에게 영향을 미치는 관계\r\n- ㅇㅇ화 관계: 하나의 사물이 다른 사물에 비해 더 일반적인지 구체적인지를 표현하는 관계\r\n- ㅇㅇ 관계: 연관 관계와 같이 사물 사이에 서로 연관은 있으나 필요에 의해 서로에게 영향을 주는 짧은 시간 동안만 연관을 유지하는 관계\r\n",ITERATION:202008,NO:14,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"집단",QUESTION:"ㅇㅇ화: 객체지향 기법에서 클래스들 사이의 '부분-전체' 관계 또는 '부분'의 관계로 설명되는 연관성을 나타냄.\r\n",ITERATION:202006,NO:16,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:1,QUESTION:"UML 확장 모델에서 스테레오 타입 객체를 표현할 때 사용하는 기호로 맞는 것은?\r\n1)<<>> 2)(()) 3){{}} 4)[[]]\r\n",ITERATION:202006,NO:6,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"ㄹ, ㄱ, ㄷ, ㄴ, ㅁ",QUESTION:"<객체 지향 방법론>                                                                    정답 기입 예시) ㄱ, ㄴ, ㄷ, ㄹ, ㅁ\r\nㄱ)Coad와 Yourdon 방법 ㄴ)Booch 방법 ㄷ)Jacobson 방법 ㄹ)Wirfs-Brocks 방법 ㅁ)Rumbaouh 기법\r\n- ㅇ: 분석과 설계 간의 구분이 없고 고객 명세서를 평가해서 설계 작업까지 연속적으로 수행하는 기법\r\n- ㅇ: E-R 다이어그램을 사용하여 객체의 활동들을 데이터 모델링하는데 초점을 둔 기법\r\n- ㅇ: Use Case를 강조하여 사용하는 분석 방법\r\n- ㅇ: 미시적 개발 프로세스와 거시적 개발 프로세스를 모두 사용하는 분석 방법\r\n- ㅇ: 가장 일반적으로 사용되는 방법으로 분석 활동을 객체/동적/기능 모델로 나누어 수행하는 방법\r\n",ITERATION:202006,NO:20,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"ㄱㄴㄷㅁ",QUESTION:"자료 흐름도의 구성 요소를 모두 고르시오.                  정답 기입 예시)ㄱㄴㄷ\r\nㄱ)process ㄴ)data flow ㄷ)data store ㄹ)comment ㅁ)terminator ㅂ)data dictionary ㅅ)mini-spec\r\n",ITERATION:202008,NO:18,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"하향, 하향, 상향, 상향",QUESTION:"- (상향/하향)식 설계에서는 통합 검사 시 인터페이스가 이미 정의되어 있어 통합이 간단하다. \r\n- (상향/하향)식 설계에서 레벨이 낮은  데이터 구조의 세부 사항은 설계 초기 단계에서 필요하다 \r\n- (상향/하향)식 설계는 최하위 수준에서 각각의 모듈들을 설계하고 이러한 모듈이 완성되면 이들을 결합하여 검사한다. \r\n- (상향/하향)식 설계에서는 인터페이스가 이미 성립되어 있어야 기능 추가가 쉽다.\r\n",ITERATION:202203,NO:5,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"원, 화살표, 평행선, 사각형",QUESTION:"자료흐름도(DFD)의 각 요소별 표기 형태는? \r\n - Process: ㅇ \r\n- Data Flow: ㅇㅇㅇ \r\n- Data Stroe: ㅇㅇㅇ  \r\n- Terminator: ㅇㅇㅇ\r\n",ITERATION:202203,NO:5,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:3,QUESTION:"UML 다이어그램 중 정적 다이어그램이 아닌 것은? \r\n 1) 컴포넌트 다이어그램 \r\n2) 배치 다이어그램 \r\n3) 순차 다이어그램 \r\n4) 패키지 다이어그램\r\n",ITERATION:202203,NO:11,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"디자인",QUESTION:"ㅇㅇㅇ 패턴: 소프트웨어 설계에서 자주 발생하는 문제에 대한 일반적이고 반복적인 해결 방법",ITERATION:202203,NO:11,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:2,QUESTION:"입력되는 데이터를 컴퓨터의 프로세서가 처리하기 전에 미리 처리하여 프로세서가 처리하는 시간을 줄여주는 프로그램이나 하드웨어를 말하는 것은? \r\n 1) EAI \r\n2) FEP \r\n3) GPL \r\n4) Duplexing\r\n",ITERATION:202203,NO:19,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"시간, 동, 수직, 회귀",QUESTION:"<UML 순차 다이어그램>\r\n - 객체 간의 동적 상호작용을 ㅇㅇ 개념을 중심으로 모델링 하는 것\r\n - 주로 시스템의 ㅇ적 측면을 모델링하기 위해 사용 \r\n- 일반적으로 다이어그램의 ㅇㅇ 방향이 시간의 흐름을 나타냄.\r\n - ㅇㅇ 메시지, 제어블록 등으로 구성\r\n",ITERATION:202204,NO:1,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"안정, 시스템, 비동기",QUESTION:"<메시지 지향 미들웨어>\r\n - 즉각적인 응답보다는 느리고 ㅇㅇ적인 응답이 필요한 경우에 적합\r\n - 독립적인 애플리케이션을 하나의 통합된 ㅇㅇㅇ으로 묶기 위해 사용 \r\n- 송신측과 수신측의 연결 시 메시지 큐를 활용하는 방법 있음.\r\n - 상이한 애플리케이션 간 통신을 ㅇㅇㅇ 방식으로 지원\r\n",ITERATION:202204,NO:2,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"애자일, 소, 경험, 소스코드",QUESTION:"<익스트림 프로그래밍>\r\n - 대표적인 ㅇㅇㅇ 방법론 중 하나\r\n - ㅇ규모 개발 조직이 불확실하고 변경이 많은 요구를 접하였을 때 적절함. \r\n- 구동시키는 원리는 상식적인 원리와 ㅇㅇ을 최대한 끌어올리는 것.\r\n - 구체적인 실천 방법을 정의하고 있으며, 개발 문서보다는 ㅇㅇㅇㅇ에 중점을 둠.\r\n",ITERATION:202204,NO:3,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"3",QUESTION:"유스케이스의 구성 요소 간의 관계에 포함되지 않는 것은? \r\n 1) 연관 \r\n2) 확장 \r\n3) 구체화 \r\n4) 일반화\r\n",ITERATION:202204,NO:3,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:"3",QUESTION:"속성과 관련된 연산을 클래스 안에 묶어서 하나로 취급하는 것을 의미하는 객체지향 개념은? \r\n 1) Inheritance \r\n2) Class \r\n3) Encapsulation \r\n4) Association\r\n",ITERATION:202204,NO:3,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:1},{ANSWER:1,QUESTION:"스택을 이용한 연산과 거리가 먼 것은?\r\n1)선택 정렬 2)재귀 호출 3)후위 표현의 연산 4)깊이 우선 탐색\r\n",ITERATION:202105,NO:40,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:1,QUESTION:"하향식 통합 시험을 위해 일시적으로 필요한 조건만을 가지고 임시로 제공되는 시험용 모듈은?\r\n1)Stub 2)Driver 3)Procedure 4)Function\r\n",ITERATION:202103,NO:23,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"OXXO",QUESTION:"<이진 검색 알고리즘>\r\n- 탐색 효율이 좋고 탐색 시간이 적게 소요됨. (O/X)\r\n- 검색할 데이터가 정렬되지 않아도 됨. (O/X)\r\n- 피보나치 수열에 따라 다음에 비교할 대상을 선정하여 검색함. (O/X)\r\n- 비교 횟수를 거듭할 때마다 검색 대상이 되는 데이터의 수가 절반으로 줄어듬. (O/X)\r\n",ITERATION:202103,NO:32,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"모듈",QUESTION:"<ㅇㅇ>\r\n- 소프트웨어 구조를 이루며, 다른 것들과 구별될 수 있는 독립적인 기능을 갖는 단위\r\n- 하나 또는 몇 개의 논리적인 기능을 수행하기 위한 명령어들의 집합\r\n- 서로 모여 하나의 완전한 프로그램으로 만들어질 수 있음.\r\n",ITERATION:202108,NO:24,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"외계인, 스파게티",QUESTION:"ㅇㅇㅇ 코드: 아주 오래되거나 참고 문서 또는 개발자가 없어 유지보수 작업이 어려운 프로그램을 의미함.\r\nㅇㅇㅇㅇ 코드: 프로그램의 로직이 복잡하여 이해하기 어려운 프로그램을 의미함.\r\n",ITERATION:202006,NO:40,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"삽입, 쉘, 선택, 버블, 퀵, 힙, 합병, 기수",QUESTION:"<정렬>\r\n- ㅇㅇ 정렬: 가장 간단한 정렬 방식으로 이미 순서화된 파일에 새로운 하나의 레코드를 순서에 맞게 삽입시켜 정렬함.\r\n- ㅇ 정렬: 삽입 정렬을 확장한 개념으로 입력 파일을 어떤 매개변수의 값으로 서브파일을 구성하고, 각 서브파일을 삽입 정렬 방식으로 순서 배열하는 과정을 반복\r\n- ㅇㅇ 정렬: n개의 레코드 중에서 최소값을 찾아 첫 번째 레코드 위치에 놓고, 나머지 (n-1)개 중 다시 최소값을 찾아 두 번째 레코드 위치에 놓는 방식을 반복\r\n- ㅇㅇ 정렬: 주어진 파일에서 인접한 두 개의 레코드 키 값을 비교하여 그 크기에 따라 레코드 위치를 서로 교환하는 정렬 방식\r\n- ㅇ 정렬: 레코드의 많은 자료 이동을 없애고 하나의 파일을 부분적으로 나누어 가면서 정렬하는 방법으로 키를 기준으로 작은 값은 왼 쪽에, 큰 값은 오른 쪽 서브파일로 분해\r\n- ㅇ 정렬: 전이진 트리를 이용한 정렬 방식\r\n- 2-Way ㅇㅇ정렬: 이미 정렬되어 있는 두 개의 파일을 한 개의 파일로 합병하는 정렬 방식\r\n- ㅇㅇ 정렬: Queue를 이용하여 자릿수 별로 정렬하는 방식으로, 레코드의 키 값을 분석하여 같은 수 또는 같은 문자끼리 그 순서에 맞는 버킷에 분배하였다가 버킷의 순서대로 레코드를 꺼내어 정렬함.\r\n",ITERATION:202103,NO:37,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"가독, 단순, 의존, 중복, 추상",QUESTION:"<클린 코드 작성 원칙>\r\n- ㅇㅇ성: 누구든지 코드를 쉽게 읽을 수 있도록 작성하며, 쉬운 용어와 들여쓰기 기능 사용\r\n- ㅇㅇ성: 한 번에 한 가지를 처리하도록 코드를 간단하게 작성함. 클래스/메소드/함수 등을 최소 단위로 분리함.\r\n- ㅇㅇ성 배제: 코드가 다른 모듈에 미치는 영향을 최소화하고 코드 변경 시 다른 부분에 영향이 없도록 작성함.\r\n- ㅇㅇ성 최소화: 중복된 코드는 삭제하고 공통된 코드를 사용함.\r\n- ㅇㅇ화: 상위 클래스/메소드/함수에서는 간략하게 애플리케이션의 특성을 나타내며 상세 내용은 하위 클래스/메소드/함수에서 구현함.\r\n",ITERATION:202108,NO:35,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"OOOX",QUESTION:"<힙 정렬>\r\n- 정렬한 입력 레코드들로 힙을 구성하고 가장 큰 키 값을 갖는 루트 노드를 제거하는 과정을 반복하여 정렬하는 기법 (O/X)\r\n- 평균 수행 시간은 O(nlog2n) (O/X)\r\n- 완전 이진트리(complete binary tree)로 입력 자료의 레코드를 구성 (O/X)\r\n- 최악의 수행 시간은 O(2n^4) (O/X)\r\n",ITERATION:202105,NO:21,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"내부, 외부, 개념",QUESTION:"<스키마의 종류>\r\n- ㅇㅇ 스키마: 물리적 저장 장치의 입장에서 본 데이터베이스 구조로서 실제 데이터베이스에 저장될 레코드의 형식을 정의하고 데이터 항목의 표현 방법, 내부 레코드의 물리적 순서 등을 나타냄.\r\n- ㅇㅇ 스키마: 개인 또는 응용 개발자 입장에서 보는 데이터베이스\r\n- ㅇㅇ 스키마: 모든 응용 프로그램 또는 사용자들이 필요로 하는 조직 전체 데이터베이스로 단 하나만 존재함.\r\n",ITERATION:202009,NO:31,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"클리어링, 저작권자, 패키저, 분배, 소비, 컨트롤, 원본",QUESTION:"<디지털 저작권 관리(DRM) 용어>\r\n- ㅇㅇㅇㅇ 하우스: 저작권에 대한 사용 권한, 라이선스 발급, 사용량에 따른 결제 관리 등을 수행하는 곳\r\n- 콘텐츠 제공자: 콘텐츠를 제공하는 ㅇㅇㅇㅇ\r\n- ㅇㅇㅇ: 콘텐츠를 메타 데이터와 함께 배포 가능한 단위로 묶어 암호화하는 프로그램\r\n- 콘텐츠 ㅇㅇ자: 암호화된 콘텐츠를 유통하는 곳이나 사람\r\n- 콘텐츠 ㅇㅇ자: 콘텐츠를 구매해서 사용하는 주체\r\n- DRM ㅇㅇㅇ러: 배포된 콘텐츠의 이용 권한을 통제하는 프로그램\r\n- 보안 컨테이너: 콘텐츠 ㅇㅇ을 안전하게 유통하기 위한 전자적 보안 장치\r\n",ITERATION:202108,NO:40,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:1,QUESTION:"정렬된 N개의 데이터를 처리하는 데 O(Nlog2N)의 시간이 소요되는 정렬 알고리즘은?\r\n1)합병정렬\r\n 2)버블정렬\r\n 3)선택정렬\r\n 4)삽입정렬\r\n",ITERATION:202105,NO:32,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"분할, 동적, 탐욕, 백트래킹",QUESTION:"<알고리즘 설계 기법>\r\n- ㅇㅇ 정복(Divide and Conquer): 큰 문제를 보다 작은 문제로 분할하여 해결하는 전략\r\n- ㅇㅇ 계획법(Dynamic Programming): 아래 단계의 간단한 문제부터 해결하면서 점차 상위로 나아가는 상향식 접근 방식\r\n- ㅇㅇ 알고리즘(Greedy Algorithm): 완벽한 해결책 보다는 차선책을 목표로 하며, 상황에 맞는 해결책을 즉석에서 모색하는 방식\r\n- ㅇㅇㅇㅇ(Backtracking): 깊이 우선 탐색 알고리즘을 이용한 기법으로 문제 해결을 위한 모든 가능성을 트리로 구축\r\n",ITERATION:202008,NO:31,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:1,QUESTION:"인터페이스 구현 검증 도구가 아닌 것은?\r\n1)Foxbase \r\n2)STAF \r\n3)watir\r\n 4)xUnit\r\n",ITERATION:202105,NO:35,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"3, 5, 6, 7",QUESTION:"버블 정렬을 이용하여 [9, 6, 7, 3, 5]를 오름차순으로 정렬할 경우 PASS 3의 결과는? 정답 기입 예시) 9, 6, 7, 3\r\n-> ㅇ, ㅇ, ㅇ, ㅇ, 9\r\n",ITERATION:202108,NO:22,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"OOOX",QUESTION:"<테스트 드라이버>\r\n- 시험 대상 모듈을 호출하는 간이 소프트웨어 (O/X)\r\n- 필요에 따라 매개 변수를 전달하고 모듈을 수행한 후의 결과를 보여줄 수 있음. (O/X)\r\n- 상향식 통합 테스트에서 사용됨. (O/X)\r\n- 테스트 대상 모듈이 호출하는 하위 모듈의 역할을 함. (O/X)\r\n",ITERATION:202108,NO:25,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"경계, 없음",QUESTION:"<경계값 분석 기법> 정답 기입 예시) 짱구, 있음\r\n- ㅇㅇ가 되는 값을 테스트 케이스의 입력 값으로 사용\r\n- 범위를 초과하는 값은 넣을 수 (있음/없음).\r\n",ITERATION:202006,NO:28,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:1,QUESTION:"소프트웨어 품질 목표 중 하나 이상의 하드웨어 환경에서 운용되기 위해 쉽게 수정될 수 있는 시스템의 능력은?\r\n1)Portability \r\n2)Efficiency\r\n 3)Usability\r\n 4)Correctness\r\n",ITERATION:202108,NO:36,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"선형, 비선형",QUESTION:"<자료 구조의 분류> 정답 기입 예시) 선형, 선형\r\n- (선형/비선형) 구조: 배열, 스택, 큐, 데크\r\n- (선형/비선형) 구조: 트리, 그래프\r\n",ITERATION:202108,NO:26,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"진행, 집, 특정",QUESTION:"<반정규화 유형 중 중복 테이블을 추가하는 방법>\r\n- ㅇㅇ 테이블의 추가\r\n- ㅇ계 테이블의 추가\r\n- ㅇㅇ 부분만을 포함하는 테이블 추가\r\n",ITERATION:202006,NO:29,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"OOXO",QUESTION:"<디지털 저작권 관리(DRM) 기술>\r\n- 콘텐츠 암호화 및 키 관리 (O/X)\r\n- 콘텐츠 식별 체계 표현 (O/X)\r\n- 콘텐츠 오류 감지 및 복구 (O/X)\r\n- 라이선스 발급 및 관리 (O/X)\r\n",ITERATION:202009,NO:40,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"XOOO",QUESTION:"<White Box Testing>\r\n- Base Path Testing, Boundary Value Analysis가 대표적인 기법 (O/X)\r\n- Source Code의 모든 문장을 한 번 이상 수행함으로서 진행됨. (O/X)\r\n- 모듈 안의 작동을 직접 관찰할 수 있음. (O/X)\r\n- 산출물의 각 기능별로 적절한 프로그램의 제어구조에 따라 선택, 반복 등의 부분들을 수행함으로써 논리적 경로를 점검함. (O/X)\r\n",ITERATION:202006,NO:22,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"1, 중앙, 미들, 내, 외",QUESTION:"<EAI 구축 유형>\r\n- Point-to-Point: 가장 기본적인 애플리케이션 통합 방식으로, 애플리케이션을 1:ㅇ로 연결하며 변경 및 재사용이 어려움.\r\n- Hub&Spoke: 단일 접점인 허브 시스템을 통해 데이터를 전송하는 ㅇㅇ 집중형 방식으로, 확장 및 유지 보수가 용이하지만 허브 장애 발생시 시스템 전체에 영향을 미침.\r\n- Message Bus: 애플리케이션 사이에 ㅇㅇ웨어를 두어 처리하는 방식으로 확장성이 뛰어나며 대용량 처리가 가능함.\r\n- Hybrid: Hub&Spoke와 Message Bus의 혼합 방식으로 그룹 ㅇ부에서는 Hub&Spoke 방식을, 그룹 ㅇ부에는 Message Bus 방식을 사용함.\r\n",ITERATION:202105,NO:34,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:1,QUESTION:"최악의 경우 검색 효율이 가장 나쁜 트리 구조는?\r\n1)이진 탐색 트리 \r\n2)AVL 트리\r\n 3)2-3 트리 \r\n4)레드-블랙 트리\r\n",ITERATION:202108,NO:37,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"단말",QUESTION:"ㅇㅇ노드: 자식이 없는 노드",ITERATION:202006,NO:31,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:2,QUESTION:"인터페이스 구현 검증 도구 중 아래에서 설명하는 것은?\r\n- 서비스 호출, 컴포넌트 재사용 등 다양한 환경을 지원하는 테스트 프레임워크\r\n- 각 테스트 대상 분산 환경에 데몬을 사용하여 테스트 대상 프로그램을 통해 테스트를 수행하고, 통합하여 자동화하는 검증 도구\r\n1)xUnit \r\n2)STAF\r\n 3)FitNesse \r\n4)RubyNode\r\n",ITERATION:202006,NO:24,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"8, 4, 9, 7",QUESTION:"[8, 3, 4, 9, 7]을 삽입 정렬로 오름차순 정렬할 경우 1회전 후의 결과는? 정답 기입 예시) 8, 3, 4, 9\r\n-> 3, ㅇ, ㅇ, ㅇ, ㅇ\r\n",ITERATION:202009,NO:27,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"XOOO",QUESTION:"<소프트웨어 패키징>\r\n- 패키징은 개발자 중심으로 진행함. (O/X)\r\n- 신규 및 변경 개발소스를 식별하고, 이를 모듈화하여 상용제품으로 패키징함. (O/X)\r\n- 고객의 편의성을 위해 매뉴얼 및 버전 관리를 지속적으로 함. (O/X)\r\n- 범용 환경에서 사용이 가능하도록 일반적인 배포 형태로 패키징이 진행됨. (O/X)\r\n",ITERATION:202105,NO:37,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"지침, 설명, 내용, 검토",QUESTION:"<제품 소프트웨어의 사용자 매뉴얼 작성 절차>\r\n작성 ㅇㅇ 정의 -> 사용 ㅇㅇ서 구성 요소 정의 -> 구성 요소별 ㅇㅇ 작성 -> 사용 설명서 ㅇㅇ\r\n",ITERATION:202108,NO:28,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"테스트, 디버깅",QUESTION:"<테스트와 디버그>\r\n- (테스트/디버깅): 오류를 찾는 작업\r\n- (테스트/디버깅): 오류를 수정하는 작업\r\n",ITERATION:202105,NO:39,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:1,QUESTION:"소프트웨어 개발 활동을 수행함에 있어 시스템이 고장을 이르키게 하며, 오류가 있는 경우 발생하는 것은?\r\n1)Fault 2)Testcase 3)Mistake 4)Inspection\r\n",ITERATION:202108,NO:34,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"4, 7, 9, 8",QUESTION:"Selection Sort를 사용하여 [8, 3, 4, 9, 7]을 오름차순 정렬한 경우 PASS 3의 결과는? 정답 기입 예시) 8, 3, 4, 9\r\n-> 3, ㅇ, ㅇ, ㅇ, ㅇ\r\n",ITERATION:202103,NO:22,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"범위, 해쉬, 조합",QUESTION:"<파티션의 종류>\r\n- ㅇㅇ 분할: 지정한 열의 값을 기준으로 분할\r\n- ㅇㅇ 분할: 해시 함수를 적용한 결과 값에 따라 데이터를 분할함.\r\n- ㅇㅇ 분할: 범위 분할로 분할한 다음 해시 함수를 적용하여 다시 분할하는 방식\r\n",ITERATION:202008,NO:35,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"공유, 중앙, 분산",QUESTION:"<소프트웨어 버전 관리 도구>\r\n- ㅇㅇ 폴더 방식: 버전 관리 자료가 로컬 컴퓨터의 공유 폴더에 저장되어 관리되는 방식. SCCS, RCS, PVCS, QVCS 등이 있음.\r\n- 클라이언트-서버 방식: 버전 관리 자료가 ㅇㅇ 시스템에 저장되어 관리되는 방식. CVS, SVN, CNSNT, Clear Case, CMVC, Perforce 등\r\n- ㅇㅇ 저장소 방식: 버전 관리 자료가 하나의 원격 저장소와 분산된 개발자 PC의 로컬 저장소에서 함께 저장되어 관리되는 방식. Git, DCVS 등\r\n",ITERATION:202105,NO:29,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"Underflow",QUESTION:"스택의 자료 삭제 알고리즘에서 괄호에 들어갈 내용은? (단, TOP: 스택포인터, S: 스택의 이름)\r\n-----------------------------------\r\nIf Top = 0 Then\r\n( )\r\nElse {\r\nremove S(Top)\r\nTop = Top - 1\r\n}\r\n",ITERATION:202108,NO:27,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"통합, Gradle, Gradle",QUESTION:"<빌드 자동화 도구> 정답 기입 예시) 짱구, Gradle, Gradle\r\n- 빌드 자동화 도구는 지속적인 ㅇㅇ 개발 환경에서 유용하게 활용됨.\r\n- (Gradle/Jenkins)는 실행할 처리 명령들을 모아 태스크로 만든 후 태스크 단위로 실행함.\r\n- (Gradle/Jenkins)는 Groovy 기반으로 한 오픈소스로 안드로이드 앱 개발 환경에서 사용됨.\r\n",ITERATION:202009,NO:35,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"저장소, 복사, 소스, 갱신, 커밋, 동기",QUESTION:"<소프트웨어 버전 등록 관련 주요 용어>\r\n- ㅇㅇㅇ: 최신 버전의 파일들과 변경 내역에 대한 정보들이 저장되어 있는 곳\r\n- 가져오기: 버전 관리가 되고 있지 않은 아무것도 없는 저장소에 처음으로 파일을 ㅇㅇ함.\r\n- 체크아웃: 저장소에서 ㅇㅇ 파일과 함께 버전 관리를 위한 파일들을 받아옴.\r\n- 체크인: 체크아웃한 파일의 수정을 완료한 후 저장소의 파일을 새로운 버전으로 ㅇㅇ함.\r\n- ㅇㅇ: 체크인을 수행할 때 이전에 갱신된 내용이 있는 경우에 충돌을 알리고 diff 도구를 이용해 수정한 후 갱신을 완료함.\r\n- ㅇㅇ화: 저장소에 있는 최신 버전으로 자신의 작업 공간을 동기화함.\r\n",ITERATION:202105,NO:24,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"단위, 호출, 웹, 재사용, 언어",QUESTION:"<인터페이스 구현 검증 도구>\r\n- xUnit: 자바, C++, .Net 등 다양한 언어를 지원하는 ㅇㅇ 테스트 프레임워크\r\n- STAF: 서비스 ㅇㅇ 및 컴포넌트 재사용 등 다양한 환경을 지원하는 테스트 프레임워크\r\n- FitNesse: ㅇ 기반 테스트케이스 설계, 실행, 결과 확인 등을 지원하는 테스트 프레임 워크\r\n- NTAF: FitNesse의 장점인 협업 기능과 STAF의 장점인 ㅇㅇㅇ 및 확장성을 통합한 NHN의 테스트 자동화 프레임워크\r\n- Selenium: 다양한 브라우저 및 개발 ㅇㅇ를 지원하는 웹 애플리케이션 테스트 프레임워크\r\n- watir: Ruby를 사용하는 애플리케이션 테스트 프레임워크\r\n",ITERATION:202009,NO:29,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:3,QUESTION:"소스 코드 품질 분석 도구 중 정적 분석 도구가 아닌 것은?\r\n1)pmd \r\n2)checkstyle \r\n3)valance\r\n 4)cppcheck\r\n",ITERATION:202009,NO:23,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"OOOX",QUESTION:"<EAI 구축 유형 중 Hybrid>\r\n- Hub & Spoke와 Message Bus의 혼합 방식 (O/X)\r\n- 필요한 경우 한 가지 방식으로 EAI 구현이 가능함. (O/X)\r\n- 데이터 병목 현상을 최소화할 수 있음. (O/X)\r\n- 중간에 미들웨어를 두지 않고 각 애플리케이션을 point to point로 연결함. (O/X)\r\n",ITERATION:202009,NO:22,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"OXOO",QUESTION:"<제품 소프트웨어 패키징 도구>\r\n- 반드시 내부 콘텐츠에 대한 암호화 및 보안을 고려 (O/X)\r\n- 보안을 위하여 이기종 연동을 고려하지 않아도 됨. (O/X)\r\n- 사용자 편의성을 위한 복잡성 및 비효율성 문제를 고려함. (O/X)\r\n- 제품 소프트웨어 종류에 적합한 암호화 알고리즘을 적용함. (O/X)\r\n",ITERATION:202009,NO:21,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"블랙, 블랙, 화이트, 블랙",QUESTION:"<블랙/화이트 박스 테스트를 이용하여 발견할 수 있는 오류> 정답 기입 예시) 블랙, 블랙, 블랙, 블랙\r\n- 비정상적인 자료를 입력해도 오류 처리를 수행하지 않는 경우: (블랙/화이트) 박스 테스트\r\n- 정상적인 자료를 입력해도 요규된 기능이 제대로 수행되지 않는 경우: (블랙/화이트) 박스 테스트\r\n- 반복 조건을 만족하는데도 루프 내의 문장이 수행되지 않는 경우: (블랙/화이트) 박스 테스트\r\n- 경계값을 입력할 경우 요구된 출력 결과가 나오지 않는 경우: (블랙/화이트) 박스 테스트\r\n",ITERATION:202105,NO:30,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:3,QUESTION:"소프트 웨어 테스트에서 오류의 80%는 전체 모듈의 20% 내에서 발견된다는 법칙은?\r\n1)Brooks의 법칙 2)Boehm의 법칙 3)Parato의 법칙 4)Jackson의 법칙\r\n",ITERATION:202006,NO:33,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"제산, 제곱, 폴딩, 기수, 대수, 숫자, 무작위",QUESTION:"<해싱 함수>\r\n- ㅇㅇ법: 레코드 키를 해시표의 크기보다 큰 수 중에서 가장 작은 소수로 나눈 나머지를 홈 주소로 삼는 방식\r\n- ㅇㅇ법: 레코드 키 값을 제곱한 후 그 중간 부분의 값을 홈 주소로 삼는 방식\r\n- ㅇㅇ법: 레코드 키 값을 여러 부분으로 나눈 후 각 부분의 값을 더하거나 XOR(배타적 논리합)한 값을 홈 주소로 삼는 방식\r\n- ㅇㅇ 변환법: 키 숫자의 진수를 다른 진수로 변환시켜 주소 크기를 초과한 높은 자릿수는 절단하고 이를 다시 주소 범위에 맞게 조정하는 방법\r\n- ㅇㅇ적 코딩법: 키 값을 이루고 있는 각 자리의 비트 수를 한 다항식의 계수로 간주하고, 이 다항식을 해시표의 크기에 의해 정의된 다항식으로 나누어 얻은 나머지 다항식의 계수를 홈 주소로 삼는 방식\r\n- ㅇㅇ 분석법: 키 값을 이루는 숫자의 분포를 분석하여 비교적 고른 자리를 필요한 만큼 택해서 홈 주소로 삼는 방식\r\n- ㅇㅇㅇ법: 난수를 발생시켜 나온 값을 홈 주소로 삼는 방식\r\n",ITERATION:202103,NO:38,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:3,QUESTION:"인터페이스 보안을 위해 네트워크 영역에 적용될 수 있는 것으로 거리가 먼 것은?\r\n1)IPSec \r\n2)SSL \r\n3)SMTP\r\n 4)S-HTTP\r\n",ITERATION:202009,NO:25,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"패킷, 인증, 메시지",QUESTION:"<인터페이스 보안을 위한 네트워크 솔루션>\r\n - IPSec: 네트워크 계층에서 IP ㅇㅇ 단위의 데이터 변조 방지 및 은닉 기능을 제공하는 프로토콜\r\n- SSL: TCP/IP 계층과 애플리케이션 계층 사이에서 ㅇㅇ, 암호화, 무결성 보장하는 프로토콜\r\n- S-HTTP: 클라이언트와 서버 간에 전송되는 모든 ㅇㅇㅇ를 암호화하는 프로토콜",ITERATION:202009,NO:25,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"17, 35, 40, 37",QUESTION:"[37, 14, 17, 40, 35]를 선택 정렬로 오름차순 정렬하고자 함. 3회전 후의 결과는? 정답 기입 예시) 37, 14, 17, 40\r\n-> 14, ㅇㅇ, ㅇㅇ, ㅇㅇ, ㅇㅇ\r\n",ITERATION:202008,NO:27,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"결함, 검증, 확인, 검증, 확인, 검증",QUESTION:"<소프트웨어 테스트에서 검증과 확인> 정답 기입 예시) 짱구, 검증, 검증, 검증, 검증, 검증\r\n- 소프트웨어 테스트에서 검증과 확인을 구별하면 찾고자 하는 ㅇㅇ 유형을 명확하게 하는 데 도움이 됨.\r\n- (검증/확인)은 소프트웨어 개발 과정을 테스트하는 것이고, (검증/확인)은 소프트웨어 결과를 테스트하는 것\r\n- (검증/확인)은 작업 제품이 요구 명세의 기능, 비기능 요구사항을 얼마나 잘 준수하는지 측정하는 것\r\n- (검증/확인)은 작업 제품이 사용자의 요구에 적합한지 측정하며, (검증/확인)은 작업 제품이 개발자의 기대를 충족시키는지를 측정함.\r\n",ITERATION:202108,NO:30,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"자식, 자식",QUESTION:"깊이 우선 탐색(DFS): 정점에서 ㅇㅇ 노드 방향으로 운행하면서 형제 노드와 자식 노드가 있을 때 ㅇㅇ 노드를 우선 탐색하는 기법으로 모든 노드를 한 번씩 방문함.\r\n",ITERATION:202108,NO:23,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"동치, 경계값, 효과, 오류, 비교",QUESTION:"<블랙박스 테스트의 종류>\r\n- ㅇㅇ 분할 검사: 입력 자료에 초점을 맞춰 테스크 테이스를 만들고 검사하는 방법으로 동등 분할 기법이라고도 함.\r\n- ㅇㅇㅇ 분석: 입력 자료에만 치중한 동치 분할 기법을 보완하기 위한 기법\r\n- 원인-ㅇㅇ 그래프 검사: 입력 데이터 간의 관계와 출력에 영향을 미치는 상황을 체계적으로 분석한 다음 효용성이 높은 테스트 케이스를 선정하여 검사\r\n- ㅇㅇ 예측 검사: 과거의 경험이나 확인자의 감각으로 테스트하는 기법\r\n- ㅇㅇ 검사: 여러 버전의 프로그램에 동일한 테스트 자료를 제공하여 동일한 결과가 출력되는지 테스트하는 기법\r\n",ITERATION:202105,NO:30,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"ㄷ, ㄹ",QUESTION:"최대 간선수는? 정답 기입 예시) ㄱ, ㄱ\r\n- 정점이 n개인 무방향 그래프에서 최대 간선수;\r\n- 정점이 n개인 방향 그래프에서 최대 간선수;\r\nㄱ)n-1 ㄴ)n/2 ㄷ)n(n-1)/2 ㄹ)n(n-1)\r\n",ITERATION:202009,NO:33,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"평가, 테스트, 평가, 호환",QUESTION:"<소프트웨어 품질 표준>\r\n- ISO/IEC 9126: 소프트웨어의 품질 특성과 ㅇㅇ를 위한 표준 지침\r\n- ISO/IEC 12119: 패키지 소프트웨어의 일반적인 제품 품질 요구사항 및 ㅇㅇㅇ를 위한 국제 표준\r\n- ISO/IEC 14598: 소프트웨어 품질의 측정, 평가에 필요 절차를 규정한 표준으로 개발자, 구매자, ㅇㅇ자 별로 제품 평가 활동을 규정함.\r\n- ISO/IEC 25010: ISO/IEC 9126을 개정하여 만든 소프트웨어 제품에 대한 국제 표준으로 ㅇㅇ성과 보안성이 강화됨.\r\n",ITERATION:202008,NO:23,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"많은, X",QUESTION:"<트리의 차수> 정답 기입 예시) 적은, O\r\n- 전체 트리 중에서 가장 (적은/많은) 차수\r\n- 최상단은 차수로 포함됨. (O/X)\r\n",ITERATION:202008,NO:40,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"개요, 설치, 아이콘, 삭제, 설치",QUESTION:"<소프트웨어 설치 매뉴얼의 기본 사항>\r\n- 소프트웨어 ㅇㅇ: 소프트웨어의 주요 기능 및 UI 설명\r\n- ㅇㅇ 관련 파일: 소프트웨어 설치에 필요한 파일 설명\r\n- 설치 ㅇㅇㅇ: 설치 아이콘 설명\r\n- 프로그램 ㅇㅇ: 설치된 소프트웨어의 삭제 방법 설명\r\n- 관련 추가 정보: 소프트웨어 이외의 관련 ㅇㅇ 프로그램 정보, 소프트웨어 제작사 등의 추가 정보 기술\r\n",ITERATION:202103,NO:35,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"회복, 안전, 강도, 성능, 구조, 회귀, 병행",QUESTION:"<목적에 따른 테스트>\r\n- ㅇㅇ 테스트: 시스템에 여러 가지 결함을 주어 실패하도록 한 후 올바르게 복구되는지를 확인하는 테스트\r\n- ㅇㅇ 테스트: 시스템에 설치된 시스템 보호 도구가 불법적인 침입으로부터 시스템을 보호할 수 있는지를 확인하는 테스트\r\n- ㅇㅇ 테스트: 시스템에 과도한 정보량이나 빈도 등을 부과하여 과부화 시에도 소프트웨어가 정상적으로 실행되는지를 확인하는 테스트\r\n- ㅇㅇ 테스트: 소프트웨어의 실시간 성능이나 전체적인 효율성을 진단하는 테스트로, 소프트웨어의 응답 시간, 처리량 등을 테스트\r\n- ㅇㅇ 테스트: 소프트웨어 내부의 논리적인 경로, 소스 코드의 복잡도 등을 평가하는 테스트\r\n- ㅇㅇ 테스트: 소프트웨어의 변경 또는 수정된 코드에 새로운 결함이 없음을 확인하는 테스트\r\n- ㅇㅇ 테스트: 변경된 소프트웨어와 기존 소프트웨어에 동일한 데이터를 입력하여 결과를 비교하는 테스트\r\n",ITERATION:202108,NO:21,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"OOXO",QUESTION:"<소스코드 정적 분석>\r\n- 소스 코드를 실행시키지 않고 분석함. (O/X)\r\n- 코드에 있는 오류나 잠재적인 오류를 찾아내기 위한 활동임. (O/X)\r\n- 하드웨어적인 방법으로만 코드 분석이 가능함. (O/X)\r\n- 자료 흐름이나 논리 흐름을 분석하여 비정상적인 패턴을 찾을 수 있음. (O/X)\r\n",ITERATION:202108,NO:33,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"정, 효, 무, 유, 이, 재사용, 운용",QUESTION:"소프트웨어 품질 측정을 위해 개발자 관점에서 고려해야할 항목은?\r\n-> ㅇ확성, 신뢰성, ㅇ율성, ㅇ결성, ㅇ연성, ㅇ식성, ㅇㅇㅇ성, 상호ㅇㅇ성\r\n",ITERATION:202006,NO:23,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"OOXO",QUESTION:"<소프트웨어 테스트> \r\n- 화이트 박스 테스트는 모듈의 논리적인 구조를 체계적으로 점검 (O/X)\r\n- 블랙 박스 테스트는 프로그램의 구조를 고려하지 않음. (O/X)\r\n- 화이트 박스 테스트에서 기본 경로란 흐름 그래프의 시작 노드에서 종료 노드까지의 서로 독립된 경로로 싸이클을 허용하지 않는 경로를 말함. (O/X)\r\n- 테스트 케이스는 일반적으로 시험 조건, 테스트 데이터, 예상 결과가 포함되어야 함. (O/X)\r\n",ITERATION:202105,NO:25,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"사용자, 운영, 계약, 규정, 알파, 베타",QUESTION:"<인수 테스트>\r\n- ㅇㅇㅇ 인수 테스트: 사용자가 시스템 사용의 적절성 여부를 확인\r\n- ㅇㅇ상의 인수 테스트: 시스템 관리자가 시스템 인수 시 수행하는 테스트 기법으로, 백업/복원 시스템, 재난 복구, 사용자 관리 등을 확인\r\n- ㅇㅇ 인수 테스트: 계약상의 인수/검수 조건을 준수하는지 여부를 확인\r\n- ㅇㅇ 인수 테스트: 소프트웨어가 정부 지침, 법규, 규정 등 규정에 맞게 개발되었는지 확인\r\n- ㅇㅇ 테스트: 개발자의 장소에서 사용자가 개발자 앞에서 행하는 테스트 기법으로, 통제된 환경에서 행해지며, 오류와 사용상의 문제점을 사용자와 개발자가 함께 확인하면서 기록함.\r\n- ㅇㅇ 테스트: 필드 테스팅이라고도 불리며 개발자 없이 고객의 사용 환경에 소프트웨어를 설치하여 검사를 수행하는 인수검사 기법\r\n",ITERATION:202103,NO:39,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:1,QUESTION:"그래프의 특수한 형태로 노드와 선분으로 되어 있고, 정점 사이에 사이클이 형성되어 있지 않으며, 자료 사이의 관계성이 계층 형식으로 나타나는 비선형 구조는?\r\n1)tree\r\n 2)network \r\n3)stack\r\n 4)distributed\r\n",ITERATION:202103,NO:25,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"오라클",QUESTION:"<테스트 ㅇㅇㅇ>\r\n- 테스트의 결과가 참인지 거짓인지를 판단하기 위해서 사전에 정의된 참값을 입력하여 비교하는 기법 및 활동을 말함.\r\n- 종류에는 참, 샘플링, 휴리스틱, 일관성 검사가 존재함.\r\n",ITERATION:202009,NO:34,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"암호, 키, 파일, 식별, 저작권, 정책, 크랙, 인증",QUESTION:"<디지털 저작권 관리(DRM)의 기술 요소>\r\n- ㅇㅇ화: 콘텐츠 및 라이선스를 암호화하고 전자 서명을 할 수 있는 기술\r\n- ㅇ 관리: 콘텐츠를 암호화한 키에 대한 저장 및 분배 기술\r\n- 암호화 ㅇㅇ 생성: 콘텐츠를 암호화된 콘텐츠로 생성하기 위한 기술\r\n- ㅇㅇ 기술: 콘텐츠에 대한 식별 체계 표현 기술\r\n- ㅇㅇㅇ 표현: 라이선스의 내용 표현 기술\r\n- ㅇㅇ 관리: 라이선스 발급 및 사용에 대한 정책 표현 및 관리 기술\r\n- ㅇㅇ 방지: 크랙에 의한 콘텐츠 사용 방지 기술\r\n- ㅇㅇ: 라이선스 발급 및 사용의 기준이 되는 사용자 인증 기술\r\n",ITERATION:202103,NO:27,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"모듈, 루프, 데이터",QUESTION:"<화이트 박스 테스트의 제어 구조 검사>\r\n- 조건 검사: 프로그램 ㅇㅇ 내에 있는 논리적 조건을 테스트하는 테스트 케이스 설계 기법\r\n- ㅇㅇ 검사: 프로그램의 반복 구조에 초점을 맞춰 실시하는 테스트 케이스 설계 기법\r\n- ㅇㅇㅇ 흐름 검사: 프로그램에서 변수의 정의와 변수 사용의 위치에 초점을 맞춰 실시하는 테스트 케이스 설계 기법\r\n",ITERATION:202105,NO:30,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:4,QUESTION:"순서가 A, B, C, D로 정해진 입력 자료를 스택에 입력한 후 출력한 결과로 불가능한 것은?\r\n1)D, C, B, A\r\n 2)B, C, D, A\r\n 3)C, B, A, D \r\n4)D, B, C, A\r\n",ITERATION:202108,NO:29,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"OOXO",QUESTION:"<소프트웨어 형상 관리>\r\n- 소프트웨어에 가해지는 변경을 제어하고 관리함. (O/X)\r\n- 프로젝트 계획, 분석서, 설계서, 프로그램, 테스트 케이스 모두 관리 대상 (O/X)\r\n- 대표적인 형상 관리 도구로 Ant, Maven, Gradle 등이 있음. (O/X)\r\n- 유지 보수 단계뿐만 아니라 개발 단계에도 적용할 수 있음. (O/X)\r\n",ITERATION:202105,NO:27,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"일정, 로그, 정, 변수, 제곱, 지수, 팩토리얼",QUESTION:"<알고리즘 시간 복잡도>\r\n- O(1): 알고리즘 수행 시간이 입력 데이터 수와 관계없이 ㅇㅇ\r\n- O(log2^n): ㅇㅇ에 비례\r\n- O(n): ㅇ비례\r\n- O(nlog2^n): 로그*ㅇㅇ에 비례\r\n- O(n^2): ㅇㅇ에 비례\r\n- O(2^n): ㅇㅇ에 비례\r\n- O(n!): ㅇㅇㅇㅇ에 비례\r\n",ITERATION:202006,NO:35,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"OOXO",QUESTION:"<단위 테스트를 통해 발견할 수 있는 오류>\r\n- 알고리즘 오류에 따른 원치 않는 결과 (O/X)\r\n- 탈출구가 없는 반복문의 사용 (O/X)\r\n- 모듈 간의 비정상적 상호작용으로 인한 원치 않는 결과 (O/X)\r\n- 틀린 계산 수식에 의한 잘못된 결과 (O/X)\r\n",ITERATION:202105,NO:22,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"단위, 통합, 시스템, 인수",QUESTION:"<테스트>\r\n- ㅇㅇ 테스트: 개별 모듈을 시험하는 것으로 모듈이 정확하게 구현되었는지, 예정한 기능이 제대로 수행되는지를 점검\r\n- ㅇㅇ 테스트: 단위 테스트가 완료된 모듈들을 결합하여 하나의 시스템으로 완성시키는 과정에서의 테스트\r\n- ㅇㅇㅇ 테스트: 개발된 소프트웨어가 해당 컴퓨터 시스템에서 완벽하게 수행되는가를 점검하는 테스트\r\n- ㅇㅇ 테스트: 개발한 소프트웨어가 사용자의 요구사항을 충족하는지에 중점을 두고 테스트하는 방법\r\n",ITERATION:202108,NO:31,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"식별, 버전, 통제, 감사, 기록",QUESTION:"<형상 관리 기능의 종류>\r\n- 형상 ㅇㅇ: 형상 관리 계획을 근거로 형상 관리의 대상이 무엇인지 식별하는 과정\r\n- ㅇㅇ 제어: 소프트웨어 업그레이드나 유지 보수 과정에서 생성된 다른 버전의 형상 항목을 관리하고, 이를 위해 특정 절차와 도구를 결합\r\n- 형상 ㅇㅇ: 식별된 형상 항목에 대한 변경 요구를 검토하여 현재의 기준선이 잘 반영될 수 있도록 조정\r\n- 형상 ㅇㅇ: 기준선의 무결성을 평가하기 위해 확인, 검증, 검열 과정을 통해 공식적으로 승인하는 작업\r\n- 형상 ㅇㅇ: 형상의 식별, 통제, 감사 작업의 결과를 기록/관리하고 보고서를 작성하는 작업\r\n",ITERATION:202108,NO:32,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"흐름, 기능, 도메인, 랜덤",QUESTION:"<테스트 케이스 생성 도구>\r\n- 자료 ㅇㅇ도: 자료 원시 프로그램을 입력 받아 파싱한 후 작성함.\r\n- ㅇㅇ 테스트: 주어진 기능을 구동시키는 모든 가능한 상태를 파악하여 이에 대한 입력을 작성함.\r\n- 입력 ㅇㅇㅇ 분석: 원시 코드의 내부에 참조하지 않고 입력 변수와 도메인을 분석하여 테스트 데이터를 작성함.\r\n- ㅇㅇ 테스트: 입력 값을 무작위로 추출하여 테스트함.\r\n",ITERATION:202108,NO:39,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"드라이버, 스텁",QUESTION:"<단위 테스트> \r\n- 테스트 ㅇㅇㅇㅇ: 테스트의 대상이 되는 하위 모듈을 호출하고, 파라미터를 전달하는 가상의 모듈로 상향식 테스트에 필요\r\n- 테스트 ㅇㅇ: 제어 모듈이 호출하는 타 모듈의 기능을 단순히 수행하는 도구로, 일시적으로 필요한 조건만을 가지고 있는 테스트용 모듈로 하향식 테스트에 필요.\r\n",ITERATION:202203,NO:22,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"의제, 반박, 문제, 참가",QUESTION:"<정형 기술 검토(FTR)> \r\n- ㅇㅇ를 제한한다.\r\n- 논쟁과 ㅇㅇ을 제한한다.\r\n- ㅇㅇ 영역을 명확히 표현한다.\r\n- ㅇㅇ자의 수를 제한한다.\r\n",ITERATION:202203,NO:26,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"O, O, O, O",QUESTION:"<NS Chart> \r\n- 연속, 선택, 반복 등의 제어 논리 구조를 표현한다. (O/X)\r\n- GOTO나 화살표를 사용하지 않는다.(O/X)\r\n- 이해하기 쉽고 코드 변환이 용이하다(O/X)\r\n- 논리의 기술에 중점을 두고 도형을 이용한 표현 방법이다.(O/X)\r\n",ITERATION:202203,NO:34,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"경로, 조건, 루프, 흐름",QUESTION:"<화이트박스 테스트 종류> \r\n- 기초 ㅇㅇ 검사\r\n- 조건 검사\r\n- ㅇㅇ 검사\r\n- 데이터 ㅇㅇ 검사\r\n",ITERATION:202203,NO:37,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"정적, 품질",QUESTION:"<코드 인스펙션>  \r\n- 프로그램을 수행시켜 보는 것 대신에 읽어보고 눈으로 확인하는 방법\r\n- ㅇㅇ 테스트에 가깝다.\r\n- 결함과 함께 코딩 표준 준수 여부, 효율성 등의 다른 ㅇㅇ 이슈를 검사하기도 한다.\r\n",ITERATION:202203,NO:40,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:1,QUESTION:"동시에 소스를 수정하는 것을 방지하며 다른 방향으로 진행된 개발 결과를 합치거나 변경 내용을 추적할 수 있는 소프트웨어 버전 관리 도구는?\r\n1) RCS(Revision Control System)\r\n 2) RTS(Reliable Transfer Service)\r\n 3)RPS (Remote Procedure Call) \r\n4) RVS(Relative Version System)\r\n",ITERATION:202204,NO:29,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"OOXO",QUESTION:"<화이트박스 테스트> \r\n- 이해를 위해 논리흐름도(Logic-Flow Diagram)를 이용 (O/X)\r\n- 테스트 데이터를 이용해 실제 프로그램을 실행함으로써 오류를 찾는 동적 테스트(Dynamic Test)에 해당 (O/X)\r\n- 프로그램의 구조를 고려하지 않기 때문에 테스트 케이스는 프로그램 또는 모듈의 요구나 명세를 기초로 결정 (O/X)\r\n- 테스트 데이터를 선택하기 위하여 검증기준(Test Coverage)을 정함. (O/X)\r\n",ITERATION:202204,NO:30,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"O, 검색, 정렬, X",QUESTION:"<알고리즘> \r\n- 주어진 작업을 수행하는 컴퓨터 명령어를 순서대로 나열한 것 (O/X)\r\n- ㅇㅇ 알고리즘: 은 정렬이 되지 않은 데이터 혹은 정렬이 된 데이터 중에서 키값에 해당되는 데이터를 찾는 알고리즘 \r\n- ㅇㅇ 알고리즘: 은 흩어져있는 데이터를 키값을 이용하여 순서대로 열거하는 알고리즘 \r\n- 선형 검색은 검색을 수행하기 전에 반드시 데이터의 집합이 정렬되어 있어야 한다. (O/X)\r\n",ITERATION:202204,NO:31,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"교육, 회의, 조치",QUESTION:"<인스펙션 과정> \r\n계획 -> 사전 ㅇㅇ -> 준비 -> 인스펙션 ㅇㅇ -> 수정 -> 후속 ㅇㅇ\r\n",ITERATION:202204,NO:33,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"구조, 드라이버, 스텁",QUESTION:"<단위 테스트> \r\n- 모듈 내부의 구조를 구체적으로 볼 수 있는 ㅇㅇ적 테스트를 주로 함.\r\n- 테스트 ㅇㅇㅇㅇ: 필요 데이터를 인자를 통해 넘겨주고, 테스트 완료 후 그 결과값을 받는 역할을 하는 가상의 모듈\r\n- 테스트 ㅇㅇ: 인자를 통해 받은 값을 가지고 수행한 후 그 결과를 테스트할 모듈에 넘겨줌.\r\n",ITERATION:202204,NO:35,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:4,QUESTION:"다음 중 단위 테스트 도구로 사용될 수 없는 것은?\r\n1) CppUnit\r\n 2) JUnit\r\n 3)HttpUnit \r\n4) IgpUnit\r\n",ITERATION:202204,NO:40,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:2},{ANSWER:"OOOX",QUESTION:"<물리적 데이터 베이스 설계>\r\n- 물리적 설계의 목적은 효율적인 방법으로 데이터를 저장하는 것 (O/X)\r\n- 트랜잭션 처리량과 응답 시간, 디스크 용량 등을 고려 (O/X)\r\n- 저장 레코드의 형식, 순서, 접근 경로와 같은 정보를 사용하여 설계 (O/X)\r\n- 트랜잭션의 인터페이스를 설계하며, 데이터 타입 및 데이터 타입들 간의 관계로 표현 (O/X)\r\n",ITERATION:202108,NO:44,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"개체, 도메인, 참조, 사용자",QUESTION:"<무결성 제약 조건>\r\n- ㅇㅇ 무결성: 기본 테이블의 기본키를 구성하는 어떤 속성도 Null 값이나 중복 값을 가질 수 없음.\r\n- ㅇㅇㅇ 무결성: 주어진 속성 값이 정의된 도메인에 속한 값이어야 한다는 규정\r\n- ㅇㅇ 무결성: 외래키 값은 Null이거나 참조 릴레이션의 기본키 값과 동일해야 하고, 릴레이션은 참조할 수 없는 외래키 값을 가질 수 없다는 규정\r\n- ㅇㅇㅇ 정의 무결성: 속성 값들이 사용자가 정의한 제약 조건에 만족\r\n",ITERATION:202108,NO:45,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:4,QUESTION:"관계 데이터베이스에 있어서 관계 대수 연산이 아닌 것은?\r\n1)디비전(Division) 2)프로젝트(Project) 3)조인(Join) 4)포크(Fork)\r\n",ITERATION:202108,NO:47,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"병행, 있다, 병행, 오버헤드",QUESTION:"<로킹 단위>\r\n정답 기입 예시) 짱구, 있다, 개발, 이클립스\r\n- ㅇㅇ제어에서 한꺼번에 로킹할 수 있는 객체의 크기\r\n- 데이터베이스, 파일, 레코드, 필드 등은 로킹 단위가 될 수 (있다/없다).\r\n- 로킹 단위가 크면 로크 수가 작아 관리하기 쉽지만 ㅇㅇ성 수준이 낮아지고 데이터베이스 공유도가 저하됨.\r\n- 로킹 단위가 작으면 로크 수가 많아 관리하기 복잡해 ㅇㅇㅇㅇ가 증가함.\r\n",ITERATION:202108,NO:51,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"비절차, 릴레이션, 순서",QUESTION:"<관계 대수>\r\n정답 기입 예시) 비절차, 고구마켓, 감자\r\n- 원하는 릴레이션을 정의하는 방법을 제공하며 (비절차/절차)적 언어\r\n- 릴레이션 조작을 위한 연산의 집합으로 피연산자와 결과가 모두 ㅇㅇㅇㅇ임.\r\n- 일반 집합 연산과 순수 관계 연산으로 구분됨.\r\n- 질의에 대한 해를 구하기 위해 수행해야 할 연산의 ㅇㅇ를 명시\r\n",ITERATION:202108,NO:52,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"타임스탬프",QUESTION:"ㅇㅇㅇㅇㅇ 기법: 동시성 제어를 위한 직렬화 기법으로 트랜잭션 간의 처리 순서를 미리 정하는 방법\r\n",ITERATION:202108,NO:58,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"원자, 부분, 이행, 결정, 다치, 조인",QUESTION:"<정규화 과정>\r\n- 제1정규형: 도메인이 ㅇㅇ값\r\n- 제2정규형: ㅇㅇ적 함수 종속 제거로 기본키가 아닌 모든 속성이 기본키에 완전 함수 종속\r\n- 제3정규형: ㅇㅇ적 함수 종속 제거\r\n- 보이스/코드 정규형: ㅇㅇ자이면서 후보키가 아닌 것 제거\r\n- 제4정규형: ㅇㅇ 종속 제거\r\n- 제5정규형: 후보키를 통하지 않는 ㅇㅇ 종속 제거\r\n",ITERATION:202108,NO:59,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:2,QUESTION:"어떤 릴레이션 R에서 X와 Y를 각각 R의 애트리뷰트 집합의 부분 집합이라고 할 경우 애트리뷰트 X의 값 각각에 대해 시간에 관계 없이\r\n항상 애트리뷰트 Y의 값이 오직 하나만 연관되어 있을 때, Y는 X에 함수 종속이라고 함.\r\n이 함수 종속의 표기로 옳은 것은?\r\n1)Y → X\r\n2)X → Y\r\n3)Y ⊂ X\r\n4)X ⊂ Y\r\n",ITERATION:202108,NO:60,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"범위, 목록, 해시, 조합, 레코드",QUESTION:"<파티션(분할)의 종류>\r\n- ㅇㅇ 분할: 지정한 열 값의 기준으로 범위 지정하여 분할\r\n- ㅇㅇ 분할: 지정한 열 값에 대한 목록을 만들어 이를 기준으로 분할\r\n- ㅇㅇ 분할: 해시 함수를 적용한 결과 값에 따라 분할하는 것으로 특정 데이터가 어디에 있는지 판단 불가능\r\n- ㅇㅇ 분할: 범위 분할로 분할한 다음 해시 함수를 적용하여 다시 분할하는 방식\r\n- 라운드 로빈 분할: ㅇㅇㅇ를 균일하게 분배하는 방식임.\r\n",ITERATION:202105,NO:41,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"XOOO",QUESTION:"<시스템 카탈로그>\r\n- 사용자가 직접 시스템 카탈로그의 내용을 갱신하여 데이터베이스 무결성을 유지함. (O/X)\r\n- 시스템 자신이 필요로 하는 스키마 및 여러 가지 객체에 관한 정보를 포함하고 있는 시스템 데이터베이스 (O/X)\r\n- 시스템 카탈로그에 저장되는 내용을 메타데이터라고도 함. (O/X)\r\n- 시스템 카탈로그는 DBMS가 스스로 생성하고 유지함. (O/X)\r\n",ITERATION:202105,NO:42,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:3,QUESTION:"DDL의 명령어 중 스키마, 도메인, 인덱스 등을 정의할 때 사용하는 SQL문은?\r\n1)ALTER    2)SELECT    3)CREATE    4)INSERT\r\n",ITERATION:202105,NO:45,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"교집합",QUESTION:"insersect: 테이블을 ㅇㅇㅇ\r\n",ITERATION:202105,NO:46,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"OOOX",QUESTION:"<물리적 설계 단계>\r\n- 레코드 집중의 분석 및 설계 (O/X)\r\n- 접근 경로 설계 (O/X)\r\n- 저장 레코드의 양식 설계 (O/X)\r\n- 목표 DBMS에 맞는 스키마 설계 (O/X)\r\n",ITERATION:202105,NO:47,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"개체",QUESTION:"ㅇㅇ 무결성: 기본 키를 구성하는 속성은 Null 값이나 중복 값을 가질 수 없다는 제약 조건\r\n",ITERATION:202105,NO:48,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"10, 35",QUESTION:"릴레이션 R의 차수가 4이고 카디널리티가 5이며,\r\n릴레이션 S의 차수가 6이고 카디널리티가 7일 때,\r\n두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?\r\n정답 기입 예시) 45, 67\r\n-> 차수: ㅇㅇ, 카디널리티: ㅇㅇ\r\n",ITERATION:202105,NO:53,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"특성, 논리, 차수",QUESTION:"<속성>\r\n- 개체의 ㅇㅇ을 기술\r\n- 데이터베이스를 구성하는 가장 작은 ㅇㅇ적 단위\r\n- 파일 구조상 데이터 항목 또는 데이터 필드에 해당됨.\r\n- 속성의 수를 ㅇㅇ(Degree)라고 함.\r\n",ITERATION:202105,NO:54,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"행, 속성, 레코드, 기수",QUESTION:"<튜플>\r\n- 릴레이션을 구성하는 각각의 ㅇ을 말함.\r\n- ㅇㅇ의 모임으로 구성\r\n- 파일 구조에서 ㅇㅇㅇ와 같은 의미\r\n- 튜플의 수를 카디널리티 또는 ㅇㅇ라고 함.\r\n",ITERATION:202105,NO:56,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"개체, 관계, 속성, 다중, 기본, 복합, 연결",QUESTION:"<E-R 다이어그램>\r\n- 사각형: ㅇㅇ 타입\r\n- 다이아몬드(마름모): ㅇㅇ 타입\r\n- 타원: ㅇㅇ\r\n- 이중 타원: ㅇㅇ값 속성\r\n- 밑줄 타원: ㅇㅇ 키 속성\r\n- 복수 타원: ㅇㅇ 속성\r\n- 선, 링크: 개체 타입과 속성을 ㅇㅇ\r\n",ITERATION:202105,NO:57,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"개념",QUESTION:"ㅇㅇ 스키마: 데이터베이스 전체를 정의한 것으로 데이터 개체, 관계, 제약 조건, 접근 권한, 무결성 규칙 등을 명세한 것\r\n",ITERATION:202103,NO:42,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"OOOX",QUESTION:"<로킹 단위>\r\n- 데이터베이스, 파일, 레코드 등은 로킹 단위가 될 수 있음. (O/X)\r\n- 로킹 단위가 작아지면 로킹 오버헤드가 증가함. (O/X)\r\n- 한 번에 로킹할 수 있는 단위를 로킹 단위라고 함. (O/X)\r\n- 로킹 단위가 작아지면 병행성 수준이 낮아짐. (O/X) \r\n",ITERATION:202103,NO:46,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:1,QUESTION:"조건을 만족하는 릴레이션의 수평적 부분 집합으로 구성하며, 연산자의 기호는 그리스 문자 시그마(σ)를 사용하는 관계 대수 연산은?\r\n1)Select    2)Project    3)Join    4)Division\r\n",ITERATION:202103,NO:51,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"삭제, 삽입, 갱신",QUESTION:"<이상의 종류>\r\n- ㅇㅇ 이상: 릴레이션에서 한 튜플을 삭제할 때 의도와는 상관없는 값들로 함께 삭제되는 연쇄 삭제 현상\r\n- ㅇㅇ 이상: 릴레이션에서 데이터를 삽입할 때 의도와는 상관 없이 원하지 않는 값들로 함께 삽입되는 모순 현상\r\n- ㅇㅇ 이상: 릴레이션에서 튜플에 있는 속성 값을 갱신할 때 일부 튜플의 정보만 갱신되어 정보에 모순이 생기는 현상\r\n",ITERATION:202103,NO:53,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"튜플, 스키마, 도메인, 릴레이션",QUESTION:"<릴레이션>\r\n- 릴레이션의 각 행을 ㅇㅇ이라 함.\r\n- 릴레이션의 각 열을 ㅇㅇㅇ라 하며, 각 속성에서 정의된 값을 이용하여 구성됨.\r\n- ㅇㅇㅇ은 하나의 속성이 가질 수 있는 같은 타입의 모든 값의 집합으로 원자값을 가짐.\r\n- 릴레이션의 논리적인 구조를 정의한 것으로 릴레이션에 포함된 속성들의 집합을 ㅇㅇㅇㅇ 스키마라고 함.\r\n",ITERATION:202103,NO:54,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"인덱스",QUESTION:"ㅇㅇㅇ: 데이터베이스 성능에 많은 영향을 주는 DBMS 구성 요소로\r\n 테이블과 클리스터에 연관되어 독립적인 저장 공간을 보유하며,\r\n데이터베이스에 저장된 자료를 더욱 빠르게 조회하기 위해서 사용되는 것\r\n",ITERATION:202103,NO:56,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"ALTER",QUESTION:"회원 테이블 생성 후 주소 필드가 누락되어 이를 추가하려고 한다. 이에 적합한 SQL 명령어는?\r\n",ITERATION:202103,NO:58,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"원자, 일관, 독립, 영속",QUESTION:"<트랜잭션의 특징>\r\n- Atomicity(ㅇㅇ성): 트랜잭션의 연산은 데이터베이스에 모두 반영되든지 아니면 전혀 반영되지 않아야 함.\r\n- Consistency(ㅇㅇ성): 트랜잭션이 그 실행을 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 변환함.\r\n- Isolation(ㅇㅇ성): 둘 이상의 트랜잭션이 동시에 병행 실행되는 경우 어느 하나의 트랜잭션 실행 중에 다른 트랜잭션 연산이 끼어들 수 없음.\r\n- Durability(ㅇㅇ성): 성공적으로 완료된 트랜잭션의 결과는 영구적으로 반영되어야 함.\r\n",ITERATION:202009,NO:41,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"슈퍼, 후보, 기본, 대체, 외래",QUESTION:"<키의 개념>\r\n- ㅇㅇ키: 한 릴레이션 내에 있는 속성들의 집합으로 구성된 키로, 릴레이션을 구성하는 모든 튜플에 대해 유일성은 만족하지만 최소성은 만족하지 못함.\r\n- ㅇㅇ키: 릴레이션을 구성하는 속성들 중에서 튜플을 유일하게 식별하기 위해 사용되는 속성들의 부분 집합으로, 유일성과 최소성 모두 만족\r\n- ㅇㅇ키: 후보키 중에서 특별히 선정된 키로 중복된 값과 NULL 값을 가질 수 없음.\r\n- ㅇㅇ키: 후보키 중에서 선정된 기본키를 제외한 나머지 후보키를 의미\r\n- ㅇㅇ키: 다른 릴레이션의 기본키를 참조하는 속성 또는 속성들의 집합을 의미하며, 릴레이션 간의 관계를 표현할 때 사용함.\r\n",ITERATION:202009,NO:48,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"OOXO",QUESTION:"<뷰>\r\n- 뷰 위에 또 다른 뷰를 정의할 수 있음. (O/X)\r\n- 뷰에 대한 조작에서 삽입, 갱신, 삭제 연산은 제약이 따름. (O/X)\r\n- 뷰의 정의는 기본 테이블과 같이 ALTER문을 이용하여 변경함. (O/X)\r\n- 뷰가 정의된 기본 테이블이 제거되면 뷰도 자동적으로 제거됨. (O/X)\r\n",ITERATION:202009,NO:54,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:1,QUESTION:"데이터웨어하우스의 기본적인 OLAP(on-line analytical processing) 연산이 아닌 것은?\r\n1)translate\r\n2)roll-up\r\n3)dicing\r\n4)drill-down\r\n",ITERATION:202009,NO:60,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"원자",QUESTION:"ㅇㅇ성: Commit과 Rollback 명령어에 의해 보장 받는 트랜잭션의 특징\r\n",ITERATION:202008,NO:43,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"위치, 중복, 병행, 장애",QUESTION:"<분산 데이터베이스>\r\n- ㅇㅇ 투명성(Location Transparency): 접근하려는 데이터베이스의 실제 위치를 알 필요 없이 단지 데이터베이스의 논리적인 명칭으로만 접근 가능\r\n- ㅇㅇ 투명성(Replication Transparency): 동일한 데이터가 여러 곳에 중복되어 있더라도 사용자는 마치 하나의 데이터만 존재하는 것처럼 사용\r\n- ㅇㅇ 투명성(Concurrency Transparency): 분산 데이터베이스와 관련된 다수의 트랜잭션들이 동시에 실행되더라도 그 트랜잭션들이 수행 결과는 서로 영향을 받지 않음.\r\n- ㅇㅇ 투명성(Failure Transparency): 트랜잭션, DBMS, 네트워크, 컴퓨터 장애에도 불구하고 트랜잭션은 정확하게 수행됨.\r\n",ITERATION:202008,NO:49,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"OOXO",QUESTION:"<정규화의 목적>\r\n- 어떠한 릴레이션이라도 데이터베이스 내에서 표현 가능하게 만듦. (O/X)\r\n- 데이터 삽입시 릴레이션을 재구성할 필요성을 줄임. (O/X)\r\n- 중복을 배제하여 삽입, 삭제, 갱신 이상의 발생을 야기함. (O/X)\r\n- 효과적인 검색 알고리즘을 생성할 수 있음. (O/X)\r\n",ITERATION:202008,NO:50,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"제외",QUESTION:"Division: Y ⊂ X인 두 개의 릴레이션 R(X), S(Y)이 있을 때, R의 속성이 S의 속성 값을 모두 가진 튜플에서 S가 가진 속성을 ㅇㅇ한 속성만을 구함.\r\n",ITERATION:202008,NO:52,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"즉각 갱신",QUESTION:"ㅇㅇ ㅇㅇ 기법: 데이터베이스 로그(log)를 필요로 하는 회복 기법\r\n",ITERATION:202008,NO:54,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"논리, 트랜잭션, 스키마, 스키마, 테이블",QUESTION:"<논리적 설계>\r\n- ㅇㅇ적 데이터베이스 구조로 매핑\r\n- ㅇㅇㅇㅇ 인터페이스 설계\r\n- ㅇㅇㅇ의 평가 및 정제\r\n- 특정 목표 DBMS에 따른 ㅇㅇㅇ 설계\r\n- 관계형 데이터베이스에서 ㅇㅇㅇ 설계\r\n",ITERATION:202006,NO:46,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"물리, 레코드, 경로, 접근, 양식",QUESTION:"<물리적 설계>\r\n- ㅇㅇ적 구조의 데이터로 변환\r\n- ㅇㅇㅇ 집중의 분석 및 설계\r\n- 데이터 베이스 파일의 저장 구조 및 엑세스 ㅇㅇ 결정\r\n- ㅇㅇ 경로 설계\r\n- 저장 레코드의 ㅇㅇ 설계\r\n",ITERATION:202006,NO:46,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:4,QUESTION:"트랜잭션의 연산은 데이터베이스에 모두 반영되든지\r\n아니면 전혀 반영되지 않아야 한다는 트랜잭션 특성은?\r\n1)Durability\r\n2)Share\r\n3)Consistency\r\n4)Atomicity\r\n",ITERATION:202006,NO:24,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:1,QUESTION:"SQL의 분류 중 DDL에 해당하지 않는 것은? \r\n 1) UPDATE \r\n2) ALTER \r\n3) DROP \r\n4) CREATE\r\n",ITERATION:202006,NO:41,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"OOOX",QUESTION:"<VIEW> \r\n- 뷰는 CREATE문을 사용하여 정의한다 (O/X) \r\n - 뷰는 데이터의 논리적 독립성을 제공한다. (O/X) \r\n- 뷰를 제거할 때에는 DROP 문을 사용한다 (O/X) \r\n- 뷰는 저장장치 내에 물리적으로 존재한다.(O/X) \r\n",ITERATION:202006,NO:44,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"도메인, 튜플, 엔티티",QUESTION:"-ㅇㅇㅇ: 하나의 원자값들의 집합을 의미함.\r\n -ㅇㅇ: 릴레이션을 구성하는 각각의 행\r\n -ㅇㅇㅇ: 데이터베이스의 논리적 구성요소\r\n",ITERATION:202006,NO:48,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"2",QUESTION:"제ㅇ정규형: 키가 아닌 모든 속성이 기본키에 대하여 완전 함수적 종속 관계를 만족해야 한다.",ITERATION:202006,NO:60,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"열, 행",QUESTION:"<릴레이션> \r\n - Degree: 테이블의 ㅇ \r\n - Cardinality: 테이블의 ㅇ",ITERATION:202203,NO:47,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"3",QUESTION:"제ㅇ정규형: 함수 종속이 A->B 이고, B->C일 때, A->C의 관계(이행적 종속 관계)를 제거",ITERATION:202203,NO:47,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"XOOO",QUESTION:"CREATE TABLE문 기능 \r\n- 속성 타입 변경 (O/X) \r\n - 속성의 NOT NULL 여부 지정 (O/X) \r\n- 기본키를 구성하는 속성 지정 (O/X) \r\n- CHECK 제약조건의 정의(O/X) \r\n",ITERATION:202203,NO:51,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"OOOO",QUESTION:"분산 데이터베이스 시스템 \r\n- 논리적으로는 하나의 시스템에 속하지만 물리적으로는 여러 개의 컴퓨터 사이트에 분산되어 있음. (O/X) \r\n - 위치 투명성, 중복 투명성, 병행 투명성, 장애 투명성을 목표로 함. (O/X) \r\n- 주요 구성 요소는 전역, 분할, 할당, 지역 스키마 등 (O/X)\r\n- 데이터베이스의 설계가 비교적 어렵고, 개발 비용과 처리 비용이 증가한다는 단점이 있음. (O/X) \r\n",ITERATION:202203,NO:58,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"OOXO",QUESTION:"<인덱스> \r\n- 문헌의 색인, 사전과 같이 데이터를 쉽고 빠르게 찾을 수 있도록 만든 데이터 구조 (O/X) \r\n - 테이블에 붙여진 색인으로 데이터 검색 시 처리 속도 향상에 도움 (O/X) \r\n- 인덱스의 추가, 삭제 명령어는 각각 ADD, DELETE (O/X)\r\n- 대부분의 데이터베이스에서 테이블을 삭제하면 인덱스도 같이 삭제 (O/X) \r\n",ITERATION:202204,NO:45,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"CREATE, DROP",QUESTION:"<인덱스> \r\n- 인덱스의 생성: (CREATE/ADD) \r\n - 인덱스의 삭제: (DELETE/DROP) \r\n",ITERATION:202204,NO:45,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"타입, 분포, 접근",QUESTION:"<저장 레코드의 양식 설계 시, 고려 사항> \r\n- 데이터 ㅇㅇ \r\n - 데이터 값의 ㅇㅇ \r\n- ㅇㅇ 빈도 \r\n",ITERATION:202204,NO:46,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"DCL",QUESTION:"SQL의 기능에 따른 분류 중에서 REVOKE문과 같이 데이터의 사용 권한을 관리하는데 사용하는 언어는? \r\n ㅇㅇㅇ \r\n",ITERATION:202204,NO:47,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:2,QUESTION:"트랜잭션의 상태 중 트랜잭션의 마지막 연산이 실행된 직후의 상태로, 모든 연산의 처리는 끝났지만 트랜잭션이 수행한 최종 결과를 데이터베이스에 반영하지 않은 상태는?\r\n1) Active\r\n2) Partially Committed\r\n3) Committed\r\n4) Aborted\r\n",ITERATION:202204,NO:51,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"OOXO",QUESTION:"<데이터베이스 개념적 설계 단계> \r\n- 산출물로 E-R Diagram을 만들 수 있음. (O/X) \r\n - DBMS에 독립적인 개념 스키마를 설계 (O/X) \r\n- 트랜잭션 인터페이스를 설계 및 작성 (O/X)\r\n- 논리적 설계 단계의 앞 단계에서 수행 (O/X) \r\n",ITERATION:202204,NO:54,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"XOXX",QUESTION:"<개체 무결성 제약조건> \r\n- 릴레이션 내의 튜플들이 각 속성의 도메인에 정해진 값만을 가져야 함. (O/X) \r\n - 기본키는 NULL 값을 가져서는 안되며 릴레이션 내에 오직 하나의 값만 존재 (O/X) \r\n- 자식 릴레이션의 외래키는 부모 릴레이션의 기본키와 도메인이 동일 (O/X)\r\n- 논자식 릴레이션의 값이 변경될 때 부모 릴레이션의 제약을 받음. (O/X) \r\n",ITERATION:202204,NO:58,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:3},{ANSWER:"내부, 입력, 동일, 순차, 시간, 유사, 없는",QUESTION:"<응집도의 종류(강함에서 약한 순)>\r\n- 기능적 응집도(Functional Cohesion): 모듈 ㅇㅇ의 모든 기능 요소들이 단일 문제와 연관되어 수행될 경우 응집도\r\n- 순차적 응집도(Sequential Cohesion): 모듈 내 하나의 활동으로부터 나온 출력 데이터를 그 다음 활동의 ㅇㅇ 데이터로 사용할 경우의 응집도\r\n- 교환적 응집도(Communication Cohesion): ㅇㅇ한 입력과 출력을 사용하여 서로 다른 기능을 수행하거는 구성 요소들이 모였을 경우의 응집도 \r\n- 절차적 응집도(Procedural Cohesion): 모듈이 다수의 관련 기능을 가질 때 모듈 안의 구성 요소들이 그 기능을 ㅇㅇ적으로 수행할 경우의 응집도\r\n- 시간적 응집도(Temporal Cohesion): 특정 ㅇㅇ에 처리되는 몇 개의 기능을 모아 하나의 모듈로 작성할 경우의 응집도\r\n- 논리적 응집도(Logical Cohesion): ㅇㅇ한 성격을 갖거나 특정 형태로 분류되는 처리 요소들로 하나의 모듈이 형성되는 경우의 응집도\r\n- 우연적 응집도(Coincidental Cohesion): 모듈 내부의 각 구성 요소들이 서로 관련 ㅇㅇ 요소로만 구성된 경우의 응집도\r\n",ITERATION:202108,NO:61,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"확인, 부정, 오류, 효율",QUESTION:"<자동 반복 요청>\r\n- Stop-and-Wait: 수신 측의 ㅇㅇ 신호(ACK)를 받은 후 다음 패킷을 전송하는 방식\r\n- Go-Back-N ARQ: 여러 블록을 연속적으로 전송하고, 수신 측에서 ㅇㅇ 응답(NAK)를 보내면 송신 측이 오류가 발생한 블록부터 재전송함.\r\n- Selective-Repeat APQ: 여러 블록을 연속적으로 전송하고, 수신 측에서 부정 응답(NAK)을 보내오면 송신 측이 ㅇㅇ가 발생한 블록만을 재전송함.\r\n- Adaptive ARQ: 전송 ㅇㅇ을 최대로 하기 위해서 데이터 블록의 길이를 채널의 상태에 따라 그때그때 동적으로 변경하는 방식\r\n",ITERATION:202108,NO:62,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"nationalter",QUESTION:'다음 C언어 프로그램이 실행되었을 때의 결과는?\r\n------------------------\r\n#include <stdio.h>\r\n#include <string.h>\r\nint main(void) {\r\n  char str[50] = "nation";\r\n  char *p2 = "alter";\r\n  strcat(str, p2);\r\n  printf("%s", str);\r\n}\r\n',ITERATION:202108,NO:64,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"1, 1, 0",QUESTION:"다음 C언어의 변수 r1, r2, r3 값은?                   정답 기입 예시) 0, 0, 0\r\nint r1 = 4 <= 4 || 2 == 2;\r\nint r2 = (3 > 0) && (4 < 5);\r\nint r3 = !2;\r\n",ITERATION:202108,NO:66,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"가까운, 65",QUESTION:"<SSTF(Shortest Seek Time First)>                                                   정답 기입 예시) 가까운, 98\r\n- 현재 헤드의 위치에서 가장 (가까운/먼) 거리에 있는 트랙의 요청을 먼저 서비스함.\r\n- 헤드의 위치가 53이고 큐의 입출력 내용이 [98, 37, 14, 124, 65]이면, SSTF 스케줄링을 사용한 경우 가장 처음 처리 순서는 ㅇㅇ임.\r\n",ITERATION:202108,NO:68,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:196,QUESTION:"192.168.1.0/24 네트워크를 FLSM 방식을 이용하여 4개의 Subnet으로 나누고 IP Subnet-zero를 적용함. 이 때 Subnetting된 네트워크 중 4번째 네트워크의 4번째 사용 가능한 IP는 192.168.1.ㅇㅇㅇ임.                 정답 기입 예시) 111\r\n",ITERATION:202108,NO:69,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"127, 191, 223, 239",QUESTION:"<IP 주소>                                                                 정답 기입 예시) 111, 111, 111, 111\r\n- A Class: 국가나 대형 통신망에 사용되며 0 ~ ㅇㅇㅇ로 시작\r\n- B Class: 중대형 통신망에 사용되며 ( A Class 다음 값 ~ ㅇㅇㅇ)로 시작\r\n- C Class: 소규모 통신망에 사용되며 ( B Class 다음 값 ~ ㅇㅇㅇ)로 시작\r\n- D Class: 멀티캐스트용으로 사용되며 ( C Class 다음 값 ~ ㅇㅇㅇ)로 시작\r\n- E Class: 실험적 주소이며 공용되지 않음.\r\n",ITERATION:202108,NO:70,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"0, 4, 4",QUESTION:'다음 C언어 프로그램이 실행되었을 때의 결과는?\r\n----------------------------------------\r\n#include <stdio.h>\r\nint main(void) {\r\n int n = 4;\r\n int* pt = NULL;\r\n pt = &n;\r\n\r\n printf("%d, %d, %d", &n - *&pt, *pt , n);\r\n}\r\n',ITERATION:202108,NO:71,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:4,QUESTION:"귀도 반 로섬이 발표한 언어로 인터프리터 방식이자 객체지향적이며, 배우기 쉽고 이식성이 좋은 것이 특징인 스크립트 언어는?\r\n1.C++    2.JAVA    3.C#    4.Python\r\n",ITERATION:202108,NO:72,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"디스패치, 제어, 문맥, 스레드",QUESTION:"<프로세스>\r\n- ㅇㅇㅇㅇ: 프로세스가 준비 상태에서 프로세서가 배당되어 실행 상태로 변화하는 것\r\n- 프로세스 ㅇㅇ 블록: 프로세스 식별자, 프로세스 상태 등의 정보로 구성\r\n- ㅇㅇ 교환: 이정 프로세스의 상태 레지스터 내용을 보관하고 다른 프로세스의 레지스터를 적재하는 과정\r\n- ㅇㅇㅇ: 프로세스 내에서의 작업 단위로서 시스템의 여러 자원을 할당 받아 실행하는 프로그램 단위\r\n",ITERATION:202108,NO:74,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"파문, 인터페이스, 변수, 매개",QUESTION:"<결합도>\r\n- 오류가 발생했을 때 전파되어 다른 오류의 원인이 되는 ㅇㅇ 효과(Ripple Effect)를 최소화해야 함.\r\n- 인터페이스가 정확히 설정되어 있지 않을 경우 불필요한 ㅇㅇㅇㅇㅇ가 나타나 모듈 사이의 의존도는 높아지고 결합도는 증가함.\r\n- 모듈들이 ㅇㅇ를 공유하여 사용하게 하거나, 제어 정보를 교류하게 함으로써 결합도가 높아짐.\r\n- 다른 모듈과 데이터 교류가 필요한 경우 전역변수(Global Variable) 보다는 ㅇㅇ변수를 사용하는 것이 결합도를 낮추는 데 도움이 됨.\r\n",ITERATION:202108,NO:75,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"순서, 수신, 체크섬, 16",QUESTION:"<TCP 헤더>\r\n- ㅇㅇ 번호(Sequence Number)는 전달하는 바이트마다 번호가 부여됨.\r\n- ㅇㅇ 번호 확인(Acknowledgement Number)은 상대편 호스트에서 받으려는 바이트의 번호를 정의함.\r\n- ㅇㅇㅇ은 데이터를 포함한 세그먼트의 오류를 검사함.\r\n- 윈도우의 최대 크기는 65,535byte로 ㅇㅇbit임.\r\n",ITERATION:202108,NO:76,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"OXOO",QUESTION:"<모듈화>\r\n- 소프트웨어의 모듈은 프로그래밍 언어에서 Subroutine, Function 등으로 표현될 수 있음. (O/X)\r\n- 모듈의 수가 증가하면 상대적으로 각 모듈의 크기가 커지며, 모듈 사이의 상호 교류가 감소하여 과부하 현상이 나타남. (O/X)\r\n- 모듈화는 시스템을 지능적으로 관리할 수 있도록 해주며, 복잡도 문제를 해결하는 데 도움을 줌. (O/X)\r\n- 모듈화는 시스템의 유지보수와 수정을 용이하게 함. (O/X)\r\n",ITERATION:202108,NO:77,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"OPT, FIFO, LRU, LFU, NUR, SCR",QUESTION:"<페이지 교체 알고리즘>\r\n- ㅇㅇㅇ(Optimal replacement, 최적 교체): 앞으로 가장 오랫동안 사용하지 않을 페이지를 교체하는 기법\r\n- ㅇㅇㅇㅇ(First In First Out): 각 페이지가 주기억장치에 적재될 때마다 그때의 시간을 기억시켜 가장 먼저 들어온 페이지 교체\r\n- ㅇㅇㅇ(Least Recently Used): 최근에 가장 오랫동안 사용하지 않은 페이지를 교체하는 기법\r\n- ㅇㅇㅇ(Least Frequently Used): 사용 빈도가 가장 적은 페이지를 교체하는 기법\r\n- ㅇㅇㅇ(Not Used Recently): 최근에 사용하지 않은 페이지를 교체하는 기법으로 참조 비트(Reference Bit)와 변형 비트(Modified Bit)가 사용됨.\r\n- ㅇㅇㅇ(Second Chance Replacement, 2차 기회 교체): 가장 오랫동안 주기억장치에 있던 페이지 중 자주 사용되는 페이지의 교체를 방지\r\n",ITERATION:202108,NO:78,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:1,QUESTION:"C언어에서 변수 선언으로 틀린 것은?\r\n1.int else;    2.int Test2;    3.int pc;    4.int True;\r\n",ITERATION:202108,NO:79,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"정보, 주기억, 참조, 제어",QUESTION:"<파일 디스크립터>\r\n- 파일 관리를 위해 시스템이 필요로 하는 ㅇㅇ를 가지고 있음.\r\n- 보조기억장치에 저장되어 있다가 파일이 개방되면 ㅇㅇㅇ장치로 이동됨.\r\n- 사용자가 파일 디스크립터를 확인할 수 있으나, 직접 ㅇㅇ할 수는 없음.\r\n- 파일 ㅇㅇ 블록이라고도 함.\r\n",ITERATION:202108,NO:80,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:3,QUESTION:"다음 설명에 해당하는 방식은?\r\n- 무선 랜에서 데이터 전속 시, 매체가 비어 있음을 확인한 뒤 충돌을 회피하기 위해 임의 시간을 기다린 후 데이터를 전송하는 방법\r\n- 네트워크에 데이터의 전송이 없는 경우라도 동시 전송에 의한 충돌에 대비하여 확인 신호를 전송함.\r\n1)STA    2)Collision Domain    3)CSMA/CA    4)CSMA/CD\r\n",ITERATION:202105,NO:61,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"내용, 공통, 외부, 제어, 스탬프, 자료",QUESTION:"<결합도의 종류(강함에서 약함 순)>\r\n- ㅇㅇ 결합도(Content Coupling): 한 모듈이 다른 모듈의 내부 기능 및 그 내부 자료를 직접 참조하거나 수정할 때의 결합도\r\n- ㅇㅇ 결합도(Common Coupling): 공유되는 공통 데이터 영역을 여러 모듈이 사용할 때의 결합도\r\n- ㅇㅇ 결합도(External Coupling): 어떤 모듈에서 외부로 선언한 데이터(변수)를 다른 모듈에서 참조할 때의 결합도\r\n- ㅇㅇ 결합도(Control Coupling): 어떤 모듈이 다른 모듈 내부의 논리적인 흐름을 제어하기 위해 제어 신호를 이용하여 통신하거나 제어 요소를 전달\r\n- ㅇㅇㅇ 결합도(Stamp Coupling): 모듈 간의 인터페이스로 배열이나 레코드 등의 자료 구조가 전달될 때의 결합도\r\n- ㅇㅇ 결합도(Data Coupling): 모듈 간의 인터페이스가 자료 요소로만 구성될 때의 결합도\r\n",ITERATION:202105,NO:62,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"1, 0111, 7",QUESTION:'#include <stdio.h>\r\nint main(int argc, char *argv[]) {\r\n  int a = 4;\r\n  int b = 7;\r\n  int c = a | b;\r\n  printf("%d", c);\r\n  return 0;\r\n}\r\n----------------------------\r\n코드를 보고 아래의 빈 칸을 채우시오.                          정답 기입 예시) 0, 0000, 0\r\nC언어에서 |는 두 비트 중 한 비트라도 1이면 ㅇ이 되는 비트 연산자임.\r\na = 00000100, b = 00000111이므로 c = 0000ㅇㅇㅇㅇ로 정수로 표현할 경우 ㅇ임.\r\n',ITERATION:202105,NO:63,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"예방, 회피, 발견, 회복",QUESTION:"<교착 상태 해결 방법>\r\n- ㅇㅇ 기법(Prevention): 교착 상태가 발생하지 않도록 사전에 시스템을 제어하는 방법으로, 교착 상태 발생의 네 가지 조건 중에서 어느 하나를 제거\r\n- ㅇㅇ 기법(Avoidance): 교착 상태가 발생할 가능성을 배제하지 않고 발생하면 적절히 피해나가는 방법으로, 주로 은행원 알고리즘이 사용됨.\r\n- ㅇㅇ 기법(Detection): 시스템에 교착 상태가 발생했는지 점검하여 교착 상태에 있는 프로세스와 자원을 발견하는 것으로, 자원 할당 그래프 사용\r\n- ㅇㅇ 기법(Recovery): 교착 상태를 일으킨 프로세스를 종료하거나 교착 상태의 프로세스에 할당된 자원을 선점하여 프로세스나 자원을 회복하는 것\r\n",ITERATION:202105,NO:65,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:224,QUESTION:"CIDR(Classless Inter-Domain Routing) 표기로 203.241.132.82/27과 같이 사용되었다면, \r\n해당 주소의 서브넷 마스크(subnet mask)는?                   정답 기입 예시) 000\r\n-> 255.255.255.ㅇㅇㅇ\r\n",ITERATION:202105,NO:66,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"시간, 공간, 스레싱, 프레임",QUESTION:"<프로세스 적재 정책>\r\n- 반복, 스택, 부프로그램은 ㅇㅇ 지역성과(Temporal Locality)과 관련 있음.\r\n- ㅇㅇ 지역성(Spatial Locality)은 프로세스가 어떤 페이지를 참조했다면 이후 가상 주소 공간상 그 페이지와 인접한 페이지들을 참조할 가능성 높음.\r\n- 일반적으로 페이지 수행 시간 보다 교환 시간이 커질 때 ㅇㅇㅇ이 발생함.\r\n- 스레싱 현상을 방지하기 위해서는 각 프로세스가 필요로 하는 ㅇㅇㅇ을 제공할 수 있어야 함.\r\n",ITERATION:202105,NO:68,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"재사용, 모듈, 확장",QUESTION:"<프레임워크>\r\n- 소프트웨어 구성에 필요한 기본 구조를 제공함으로써 ㅇㅇㅇ이 가능\r\n- ㅇㅇ화가 잘 되어 있어 자유로운 ㅇㅇ이 가능한 반제품 형태의 소프트웨어임.\r\n",ITERATION:202105,NO:69,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"XOOO",QUESTION:"<리눅스 Bash 쉘에서 export>\r\n- 변수를 출력하고자 할 때는 export 사용 (O/X)\r\n- export가 매개 변수 없이 쓰일 경우 현재 설정된 환경 변수들이 출력됨. (O/X)\r\n- 사용자가 생성하는 변수는 export 명령어 표시하지 않는 한 현재 쉘에 국한됨. (O/X)\r\n- 변수를 export 시키면 전역 변수처럼 되어 끝까지 기억됨. (O/X)\r\n",ITERATION:202105,NO:71,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"증가, 증가, 감소, 증가",QUESTION:"<페이징 기법에서 페이지 크기가 작아질 경우>\r\n- 기억장소 이용 효율이 ㅇㅇ함.\r\n- 입출력 시간이 ㅇㅇ함.\r\n- 내부 단편화가 ㅇㅇ함.\r\n- 페이지 맵 테이블의 크기가 ㅇㅇ함.\r\n",ITERATION:202105,NO:74,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:1,QUESTION:"다음 중 가장 강한 응집도는?\r\n1)Sequential Cohesion    2)Procedural Cohesion    3)Logical Cohesion    4)Coincidental Cohesion\r\n",ITERATION:202105,NO:75,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"패킷, 흐름, 전이중, 응답",QUESTION:"<TCP 프로토콜>\r\n- ㅇㅇ의 전송 및 오류를 제어함. \r\n- ㅇㅇ 제어의 기능을 수행함.\r\n- ㅇㅇㅇ(Full Duplex) 방식의 양방향 가상회선을 제공함.\r\n- 전송 데이터와 ㅇㅇ 데이터를 함께 전송\r\n",ITERATION:202105,NO:76,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"ㄱ, ㄷ, ㄴ, ㄹ",QUESTION:"C언어 라이브러리의 설명과 보기의 문자를 올바르게 연결하시오.                       정답 기입 예시) ㄱ, ㄴ, ㄷ, ㄹ\r\nㄱ)stdlib.h    ㄴ)string.h    ㄷ)stdio.h    ㄹ)math.h\r\n-ㅇ: 문자열을 수치 데이터로 바꾸는 문자 변환 함수와 수치를 문자열로 바꿔주는 변환 함수 등이 있음.\r\n-ㅇ: 표준 입출력 라이브러리임.\r\n-ㅇ: 문자열 처리 함수로 strlen()이 포함됨.\r\n-ㅇ: 삼각 함수, 제곱근, 지수 등 수학적인 함수를 내장\r\n",ITERATION:202105,NO:78,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"패킷, 논리, 경로",QUESTION:"<OSI 7계층 중 네트워크 계층>\r\n- ㅇㅇ을 발신지로부터 최종 목적지까지 전달하는 책임을 짐.\r\n- 패킷에 발신지와 목적지의 ㅇㅇ 주소를 추가함.\r\n- 라우터 또는 교환기는 패킷 전달을 위해 ㅇㅇ를 지정하거나 교환 기능을 제공함.\r\n",ITERATION:202105,NO:80,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:2,QUESTION:"다음 중 응집도가 가장 높은 것은?\r\n1)절차적 응집도 2)순차적 응집도 3)우연적 응집도 4)논리적 응집도\r\n",ITERATION:202103,NO:61,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"물리, 데이터, 네트워크, 전송, 세션, 표현, 응용",QUESTION:"<OSI 계층>\r\n- ㅇㅇ 계층: 전송에 필요한 두 장치 간의 실제 접속과 절단 등 기계적, 전기적, 기능적, 절차적 특성에 관한 규칙 정의\r\n- ㅇㅇㅇ 링크 계층: 물리적 연결을 이용해 신뢰성 있는 정보를 전송하려고 동기화, 오류제어, 흐름제어 등의 전송에러를 제어하는 계층\r\n- ㅇㅇㅇㅇ 계층: 경로 설정, 데이터 교환 및 중계, 트래픽 제어, 패킷 정보 전송을 수행함.\r\n- ㅇㅇ 계층: 논리적 안정과 균일한 데이터 전송 서비스를 제공함으로써 종단 시스템 간에 투명한 데이터 전송 가능하게 함.\r\n- ㅇㅇ 계층: 송/수신측 간의 관련성을 유지하고 대화 제어를 담당하는 계층임.\r\n- ㅇㅇ 계층: 서로 다른 데이터 표현 형태를 갖는 시스템 간의 상호 접속을 위해 필요한 계층임.\r\n- ㅇㅇ 계층: 사용자가 OSI 환경에 접근할 수 있도록 서비스 제공함.\r\n",ITERATION:202103,NO:62,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"ㄴ, ㄹ, ㄷ, ㅁ, ㅂ, ㄱ",QUESTION:"IEEE 802의 표준 규약을 바르게 연결하시오.                        정답 기입 예시) ㄱ, ㄴ, ㄷ, ㄹ, ㅁ, ㅂ\r\nㄱ)CSMA/CA    ㄴ)CSMA/CD    ㄷ)Token RING    ㄹ)Token BUS    ㅁ)Fiber optic LANS    ㅂ)음성/데이터 통합 LAN\r\n- IEEE 802.3: ㅇ\r\n- IEEE 802.4: ㅇ\r\n- IEEE 802.5: ㅇ\r\n- IEEE 802.8: ㅇ\r\n- IEEE 802.9: ㅇ\r\n- IEEE 802.11: ㅇ\r\n",ITERATION:202103,NO:64,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:6,QUESTION:'기억 공간이 15K, 23K, 22K, 21K 순으로 빈 공간이 있을 때 기억 장치 배치 전력으로 "First Fit"을 사용하여 17K의 프로그램을 적재할 경우 내부단편화의 크기는?                            정답 기입 예시) 1\r\n-> ㅇK\r\n',ITERATION:202103,NO:65,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"배제, 점유, 비선점, 환형",QUESTION:"<교착 상태 발생의 필요 충분 조건>\r\n- 상호 ㅇㅇ(Mutual Exclusion): 한 번에 한 개의 프로세스만이 공유 자원을 사용할 수 있어야 함.\r\n- ㅇㅇ와 대기(Hold and Wait): 최소한 하나의 자원을 점유하고 있으면서 다른 프로세스에 할당되어 사용되고 있는 자원을 추가로 점유하기 위해 대기하는 프로세스가 있어야 함.\r\n- ㅇㅇㅇ(Not-preemption): 다른 프로세스에 할당된 자원은 사용이 끝날 때까지 강제로 빼앗을 수 없어야 함.\r\n- ㅇㅇ 대기(Circular Wait): 공유 자원과 공유 자원을 사용하기 위해 대기하는 프로세스들이 원형으로 구성되어 있어 자신에게 할당된 자원을 점유하면서 앞이나 뒤에 있는 프로세스의 자원을 요구해야 함.\r\n",ITERATION:202103,NO:66,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"애니, 보안, 애니, 128",QUESTION:"<IPv6>\r\n- 브로드캐스트 대신 ㅇㅇ캐스트를 사용함.\r\n- 보안과 인증 확장 헤더를 사용함으로써 인터넷 계층의 ㅇㅇ 기능을 강화함.\r\n- ㅇㅇ 캐스트는 하나의 호스트에서 그룹 내의 가장 가까운 곳에 있는 수신자에게 전달하는 방식임.\r\n- ㅇㅇㅇ비트 주소체계 사용함.\r\n",ITERATION:202103,NO:67,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"전송, 네트워크",QUESTION:"ㅇㅇ 계층: TCP/IP 프로토콜에서 TCP가 해당하는 계층\r\nㅇㅇㅇㅇ 계층: TCP/IP 프로토콜에서 IP가 해당하는 계층\r\n",ITERATION:202103,NO:68,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"정수, 실수, 문자열, 올림",QUESTION:"<C언어의 형변환 라이브러리 함수>\r\n- atoi(): 문자열을 ㅇㅇ형으로 변환\r\n- atof(): 문자열을 ㅇㅇ형으로 변환\r\n- itoa(): 정수형을 ㅇㅇㅇ로 변환\r\n- ceil(): 실수를 정수형으로 ㅇㅇ처리하는 함수\r\n",ITERATION:202103,NO:71,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:4,QUESTION:"운영체제의 가상 기억 장치 관리에서 프로세스가 일정 시간 동안 자주 참조하는 페이지들의 집합을 의미하는 것은? \r\n1)Locality    2)Deadlock    3)Thrashing    4)Working Set\r\n",ITERATION:202103,NO:72,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"ㄴ, ㄹ, ㅂ, ㅁ, ㄷ, ㄱ",QUESTION:"결합도가 낮은 것부터 높은 순으로 나열하시오.                                  정답 기입 예시) ㄱ, ㄴ, ㄷ, ㄹ, ㅁ, ㅂ\r\nㄱ)내용 결합도    ㄴ)자료 결합도    ㄷ)공통 결합도    ㄹ)스탬프 결합도   ㅁ)외부 결합도  ㅂ)제어 결합도 \r\n",ITERATION:202103,NO:73,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"ㄱ, ㄹ",QUESTION:"가상기억장치의 일반적인 구현 방법과 명칭을 바르게 이으시오.              정답 기입 예시) ㄱ, ㄴ\r\nㄱ)Paging ㄴ)Allocation ㄷ)Compaction ㄹ)Segmentation ㅁ)Linking\r\n- ㅇ: 프로그램을 고정된 크기의 일정한 블록으로 나누는 기법\r\n- ㅇ: 프로그램을 가변적인 크기의 블록으로 나누는 기법\r\n",ITERATION:202103,NO:74,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:4,QUESTION:"C언어에서 산술 연산자가 아닌 것은? \r\n1)%    2)*    3)/    4)=\r\n",ITERATION:202103,NO:76,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"비연결, 빠름, 오버헤드",QUESTION:"<UDP>                                                            정답 기입 예시: 이짱구, 빠름, 이클립스\r\n- 데이터 전송 전에 연결을 설정하지 않는 ㅇㅇㅇ형 서비스 제공\r\n- 흐름제어나 순서제어가 없어 전송 속도가 (빠름/느림).\r\n- TCP에 비해 상대적으로 단순한 헤더 구조를 가지므로, ㅇㅇㅇㅇ가 적음.\r\n",ITERATION:202103,NO:77,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"OOXO",QUESTION:"<JAVA에서 변수와 자료형>\r\n- 변수는 어떤 값을 주기억 장치에 기억하기 위해서 사용하는 공간임. (O/X)\r\n- 변수의 자료형에 따라 저장할 수 있는 값의 종류와 범위가 달라짐. (O/X)\r\n- char 자료형은 나열된 여러 개의 문자를 저장하고자 할 때 사용함. (O/X)\r\n- boolean 자료형은 조건이 참인지 거짓인지 판단하고자 할 때 사용함. (O/X)\r\n",ITERATION:202103,NO:78,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:1,QUESTION:"UNIX SHELL 환경 변수를 출력하는 명령어가 아닌 것은? \r\n1)configenv    2)printenv    3)env    4)setenv\r\n",ITERATION:202009,NO:61,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"프로세스, 기억, 파일",QUESTION:"<운영체제에서 커널의 기능>\r\n- ㅇㅇㅇㅇ 생성, 종료\r\n- ㅇㅇ 장치 할당, 회수\r\n- ㅇㅇ 시스템 관리\r\n",ITERATION:202009,NO:64,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:2,QUESTION:"다음 쉘 스크립트의 의미로 옳은 것은?\r\n----------------------------------------\r\nuntil who I grep wow\r\ndo\r\nsleep 5\r\ndone\r\n----------------------------------------\r\n1)wow 사용자가 로그인한 경우에만 반복문 수행\r\n2)wow 사용자가 로그인할 때까지 반복문 수행\r\n3)wow 문자열을 복사함.\r\n4)wow 사용자에 대한 정보를 무한 반복 출력\r\n",ITERATION:202009,NO:66,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"0, 6, 2",QUESTION:"<슬라이스>                                                      정답 기입 예시) 0, 0, 0\r\n- 파이썬의 슬라이스는 문자열이나 리스트와 같은 순차형 객체에서 일부를 잘라 반환하는 기능임.\r\n- 객체명[초기위치:최종위치:증가값] 으로 표현하며 초기 위치에서 최종 위치 -1까지의 요소들을 가져옴.\r\n- a[:7:2]의 경우 배열 a의 ㅇ부터 ㅇ번째 위치까지 ㅇ씩 증가하면서 해당 위치의 요소를 출력하라는 의미\r\n ",ITERATION:202009,NO:68,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"함수, 컴포넌트, 애플리케이션",QUESTION:"<재사용 범위에 따른 분류>\r\n- ㅇㅇ와 객체: 클래스나 메소드 단위의 소스 코드 재사용\r\n- ㅇㅇㅇㅇ: 수정 없이 인터페이스를 통해 통신하는 방식으로 재사용함.\r\n- ㅇㅇㅇㅇㅇㅇ: 공통된 기능들을 제공하는 애플리케이션을 공유하는 방식으로 재사용함.\r\n",ITERATION:202009,NO:69,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"짧은, 4",QUESTION:"<SJF(Shortest Job First)>\r\n- 준비 상태 큐에서 기다리고 있는 프로세스들 중 실행 기간이 가장 ㅇㅇ 프로세스에게 먼저 CPU를 할당하는 기법\r\n- P1, P2, P3, P4 프로세스가 차례로 큐에 도착하고, 각 실행 시간은 6, 8, 4, 3일 경우 가장 먼저 처리되는 작업은 Pㅇ임.\r\n",ITERATION:202009,NO:70,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:6,QUESTION:"4개의 페이지를 수용할 수 있는 주기억장치가 있으며, 초기에는 모두 비어 있다고 가정함. \r\n[페이지 참조 순서 : 1, 2, 3, 1, 2, 4, 5, 1]에서 FIFO 페이지 교체 알고리즘을 사용할 경우 페이지 결함의 발생 횟수는?\r\n- ㅇ회\r\n",ITERATION:202009,NO:71,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:3,QUESTION:"TCP 흐름 제어 기법 중 프레임이 손실되었을 때, 손실된 프레임 1개를 전송하고 수신자의 응답을 기다리는 방식으로 한 번에 프레임 1개만 전송할 수 있는 기법은?\r\n1)Slow Start    2)Sliding Window    3)Stop and Wait    4)Congestion Avoidance\r\n",ITERATION:202009,NO:72,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"모듈, 스탬프, 내용, 공통",QUESTION:"<결합도>\r\n- 결합도: 두 ㅇㅇ 간의 상호작용 또는 의존도 정도\r\n- ㅇㅇㅇ 결합도: 두 모듈이 매개변수로 자료를 전달할 때, 자료구조 형태로 전달되어 이용될 경우\r\n- ㅇㅇ 결합도: 하나의 모듈이 직접적으로 다른 모듈의 내용을 참조할 경우\r\n- ㅇㅇ 결합도: 두 모듈이 동일한 전역 데이터를 접근할 경우\r\n",ITERATION:202009,NO:73,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:4,QUESTION:"응집도의 종류 중 서로 간에 어떠한 의미 있는 연관 관계도 지니지 않은 기능 요소로 구성되는 경위며, 서로 다른 상위 모듈에 의해 호출되어 처리 상의 연관성이 없는 서로 다른 기능을 수행하는 경우의 응집도는?\r\n1)Functional Cohesion    2)Sequential Cohesion    3)Logical Cohesion    4)Coincidental Cohesion\r\n",ITERATION:202009,NO:74,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:398,QUESTION:"세그먼트 테이블에서 2번의 시작 주소는 222, 길이는 198임.\r\n논리주소(2, 176)에 대한 물리 주소는?\r\n",ITERATION:202009,NO:77,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"경로, 제어, 그룹, 물리, 논리",QUESTION:"<인터넷 계층의 프로토콜>\r\n- IP: 데이터 주소를 지정하고 ㅇㅇ 설정\r\n- ICMP: IP와 조합하여 통신 중의 오류 처리와 전송 경로 변경 등을 위한 ㅇㅇ 메시지 관리\r\n- IGMP: 멀티캐스트를 지원하는 호스트나 라우터 사이에서 멀티캐스트 ㅇㅇ 유지를 위해 사용됨.\r\n- ARP: 호스트의 IP주소를 네트워크 접속 장치의 ㅇㅇ적 주소로 변환함.\r\n- RARP: 물리 주소를 ㅇㅇ 주소로 변환함.\r\n",ITERATION:202009,NO:78,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:3,QUESTION:"C언어에서 구조체를 사용하여 데이터를 처리할 때 사용하는 것은?\r\n1)for 2)scanf 3)struct 4)abstract\r\n",ITERATION:202009,NO:73,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:2,QUESTION:"PHP에서 사용 가능한 연산자가 아닌 것은?\r\n1)@    2)#    3)<>    4)===\r\n",ITERATION:202009,NO:74,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"오버플로, FTP, SQL, 디렉터리",QUESTION:"<소프트웨어 취약점>\r\n- 버퍼 ㅇㅇㅇㅇ: 메모리를 다루는 데 오류가 발생하여 잘못된 동작을 함.\r\n- ㅇㅇㅇ 바운스 공격: FTP 서버가 목적지를 검사하지 않는 취약점을 이용하여 공격 대상의 열린 포트를 찾아내는 기법\r\n- ㅇㅇㅇ 삽입: 전문 스캐너 프로그램 혹은 봇넷 등을 이용해 웹사이트를 무차별적으로 공격하는 과정에서 취약한 사이트가 발견되면 데이터베이스 등의 데이터를 조작하는 보안 약점\r\n- ㅇㅇㅇㅇ 접근 공격: 데이터 입출력 경로를 조작함으로써 허가되지 않은 디렉터리에 접근하여 무단으로 자원을 수정 및 삭제할 수 있음.\r\n",ITERATION:202008,NO:62,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:3,QUESTION:"다음 중 bash 쉘 스크립트에서 사용할 수 있는 제어문이 아닌 것은?\r\n1)if    2)for    3)repeat_do    4)while\r\n",ITERATION:202008,NO:63,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"128, 실시간, 증가, 네트워크",QUESTION:"<IPv6>\r\n- ㅇㅇㅇ비트의 주소 체계를 사용\r\n- 멀티미디이어의 ㅇㅇㅇ 처리가 가능\r\n- IPv4보다 보안성이 (증가/감소)됨.\r\n- 자동으로 ㅇㅇㅇㅇ 환경 구성이 가능함. \r\n",ITERATION:202008,NO:64,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"대기, 서비스, 서비스, 높은",QUESTION:"<HRN>\r\n- 우선 순위 계산식: (ㅇㅇ 시간 + ㅇㅇㅇ 시간) / ㅇㅇㅇ 시간\r\n- 우선순위를 계산하여 그 숫자가 가장 (높은/낮은) 것부터 순차적으로 부여됨.\r\n",ITERATION:202008,NO:66,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"대용량, 자동, 견고, 안정, 성능",QUESTION:"<배치 프로그램의 필수 요소>\r\n- ㅇㅇㅇ 데이터: 대량의 데이터를 가져오거나, 전달하거나, 계산하는 등의 처리가 가능\r\n- ㅇㅇ화: 심각한 오류 상황 외에는 사용자의 개입 없이 동작\r\n- ㅇㅇ성: 잘못된 데이터나 데이터 중복 등의 상황으로 중단되는 일 없이 수행되어야 함.\r\n- ㅇㅇ성/신뢰성: 오류가 발생하면 오류의 발생 위치, 시간 등을 추적할 수 있어야 함.\r\n- ㅇㅇ: 다른 응용 프로그램의 수행을 방해하지 않아야 하고, 지정된 시간 내에 처리가 완료\r\n",ITERATION:202008,NO:68,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"연결, 160, 스트림, 패킷, 전송",QUESTION:"<TCP 프로토콜>\r\n- 신뢰성이 있는 ㅇㅇ 지향형 전달 서비스\r\n- 기본 헤더 크기는 20~60byte로 ㅇㅇㅇbyte까지 확장 가능함.\r\n- ㅇㅇㅇ 전송 기능 제공\r\n- 순서 제어, 오류 제어, 흐름 제어, ㅇㅇ의 다중화 기능을 제공함.\r\n- OSI 7계층의 ㅇㅇ 계층에 해당\r\n",ITERATION:202008,NO:69,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"절차",QUESTION:"ㅇㅇ적 응집도: 모듈이 다수의 관련 기능을 가질 때 모듈 안의 구성 요소들이 그 기능을 순차적으로 수행할 경우의 응집도\r\n",ITERATION:202008,NO:70,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"1, 작게, 많이",QUESTION:"<배치 전략>                                          정답 기입 예시) 0, 작게, 작게\r\n- 최초 적합(First-Fit): 프로그램이나 데이터가 들어갈 수 있는 크기의 빈 영역 중에서 ㅇ 번째 분할 영역에 배치시키는 방법\r\n- 최적 적합(Best-Fit): 프로그램이나 데이터가 들어갈 수 있는 크기의 빈 영역 중에서 단변화를 가장 (작게/많이) 남기는 분할 영역에 배치시키는 방법\r\n- 최악 적합(Worst-Fit): 프로그램이나 데이터가 들어갈 수 있는 크기의 빈 영역 중에서 단편화를 가장 (작게/많이) 남기는 분할 영역에 배치시키는 방법\r\n",ITERATION:202008,NO:73,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:1,QUESTION:"200.1.1.0/24 네트워크를 FLSM 방식을 이용하여 10개의 Subnet으로 나누고 ip subnet-zero를 적용함. 이때 서브네팅된 네트워크 중 10번째 네트워크의 broadcast IP 주소는?\r\n1)200.1.1.159    2)201.1.5.175    3)202.1.11.254    4)203.1.255.245\r\n",ITERATION:202008,NO:74,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"OOXO",QUESTION:"<파이썬의 변수 작성 규칙>\r\n- 첫 자리에 숫자 사용 불가능 (O/X)\r\n- 영문 대문자/소문자, 숫자, 밑줄 사용 가능 (O/X)\r\n- 변수 이름의 중간에 공백 사용 가능 (O/X)\r\n- 이미 사용되고 있는 예약어 사용 불가능 (O/X)\r\n",ITERATION:202008,NO:76,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:3,QUESTION:"어떤 모듈이 다른 모듈의 내부 논리 조직을 제어하기 위한 목적으로 제어 신호를 리용하여 통신하는 경우이며,\r\n 하위 모듈에서 상위 모듈로 제어 신호가 이동하여 상위 모듈에게 처리 명령을 부여하는 권리 전도 현상이 발생하게 되는 결합도는?\r\n1)data coupling  \r\n  2)stamp coupling  \r\n  3)control coupling \r\n  4)common coupling\r\n",ITERATION:202008,NO:77,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:3,QUESTION:"UNIX에서 새로운 프로세스를 생성하는 명령어는?\r\n1)ls    2)cat    3)fork    4)chmod\r\n",ITERATION:202008,NO:79,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:2,QUESTION:"C언어에서 비트 논리 연산자에 해당하지 않는 것은?\r\n1)^    2)?    3)&    4)~\r\n",ITERATION:202006,NO:62,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:1,QUESTION:"은행가 알고리즘(Banker's Algorithm)은 교착 상태의 해결 방법 중 어떤 기법에 해당되는가?\r\n1)Avoidance    2)Detection    3)Prevention    4)Recovery\r\n",ITERATION:202006,NO:65,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"쉘, 쉘, 여러, 커널",QUESTION:"<UNIX>\r\n- (쉘/커널)은 명령어 해석기\r\n- (쉘/커널)은 시스템과 사용자 간의 인터페이스를 담당함.\r\n- (단일/여러) 종류의 쉘이 있음.\r\n- (쉘/커널)은 프로세스, 기억 장치, 입출력 관리를 수행함.\r\n",ITERATION:202006,NO:66,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"전송",QUESTION:"ㅇㅇ 계층: OSI-7 계층에서 종단간 신뢰성 있고 효율적인 데이터를 전송하기 위해 오류 검출과 복구, 흐름 제어를 수행하는 계층\r\n",ITERATION:202006,NO:68,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:3,QUESTION:"프로세스 상태의 종류가 아닌 것은?\r\n1)Ready    2)Running    3)Request    4)Exit\r\n",ITERATION:202006,NO:71,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"있음, 처리, 커널, 사용자",QUESTION:"<스레드>\r\n- 한 개의 프로세스는 여러 개의 스레드를 가질 수 (있음/없음).\r\n- 스레드를 사용함으로써 하드웨어, 운영체제의 성능과 응용 프로그램의 ㅇㅇ율을 향상 시킬 수 있음.\r\n- ㅇㅇ 스레드: 운영체제에 의해 스레드 운용\r\n- ㅇㅇㅇ 스레드: 사용자가 만든 라이브러리를 사용하여 수레드 운용\r\n",ITERATION:202006,NO:72,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"e",QUESTION:"IEEE 802.11 워킹 그룹의 무선 LAN 표준화 현황 중 QoS 강화를 위해 MAC 지원 가능을 채택한 것은?\r\n-> 802.11ㅇ\r\n",ITERATION:202006,NO:74,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:2,QUESTION:"C언어에서 사용할 수 없는 변수명은?\r\n1)student2019    2)text-color    3)_korea    4)amount\r\n",ITERATION:202006,NO:75,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:2,QUESTION:"스크립트 언어가 아닌 것은?\r\n1)PHP    2)Cobol    3)Basic    4)Python\r\n",ITERATION:202006,NO:76,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:14,QUESTION:"페이지 참조 열 [7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 7, 0]에 대해 페이지 교체 기법으로 선입선출 알고리즘을 사용할 경우 페이지 부재 횟수는? \r\n(단, 할당된 페이지 프레임의 수는 3이고, 처음에는 모든 프레임이 비어 있음.)\r\n-> ㅇㅇ\r\n",ITERATION:202006,NO:77,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:4,QUESTION:"응집도가 가장 낮은 것은?\r\n1)기능적 응집도\r\n2)시간적 응집도\r\n3)절차적 응집도 \r\n4)우연적 응집도\r\n",ITERATION:202006,NO:79,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"TCP",QUESTION:"TCP/IP 프로토콜 중 전송계층 프로토콜은? ㅇㅇㅇ",ITERATION:202006,NO:63,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"SLIP, PPP, HDLC, LLC",QUESTION:"다음 중 OSI 7계층 중 데이터링크 계층에 해당되는 프로토콜을 모두 찾아라. \r\n -Coax, IP, SLIP, PPP, HTTP, HDLC, LLC",ITERATION:202203,NO:63,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"응용",QUESTION:"HTTP는 ㅇㅇ 계층 프로토콜이다.",ITERATION:202203,NO:63,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"ICMP",QUESTION:"TCP/IP 계층 구조에서 IP의 동작 과정에서의 전송 오류가 발생하는 경우에 대비해 오류 정보를 전송하는 목적으로 사용하는 프로토콜은?\r\n ㅇㅇㅇㅇ",ITERATION:202203,NO:67,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"O",QUESTION:"Python의 print()는 자동으로 개행된다. (O/X)",ITERATION:202203,NO:79,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"OOOO",QUESTION:"<IP 프로토콜 필드>\r\n- Header Length는 IP 프로토콜의 헤더 길이를 32비트 워드 단위로 표시 (O/X)\r\n- Packet Length는 IP 헤더 및 데이터를 포함한 IP 패킷 전체 길이를 바이트 단위로 길이를 표시함. 최대값은 65,535 = 2^16 - 1 (O/X)\r\n- Time To Live는 송신 호스트가 패킷을 전송하기 전 네트워크에서 생존할 수 있는 시간을 지정한 것 (O/X)\r\n- Version Number는 IP 프로토콜의 버전번호 (O/X)\r\n",ITERATION:202204,NO:64,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"홉, IGP, 갱신",QUESTION:"<RIP 라우팅>\r\n- 경로 선택 메트릭은 ㅇ 카운트이다.\r\n- 라우팅 프로토콜은 IGP와 EGP로 분류했을 때 ㅇㅇㅇ에 해당한다.\r\n- 최단 경로 탐색에 Bellman-Ford 알고리즘을 사용한다.\r\n- 각 라우터는 이웃 라우터들로부터 수신한 정보를 이용하여 라우팅 표를 ㅇㅇ한다.\r\n",ITERATION:202204,NO:66,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"하나 이상, O, O, 트리, 높, 높",QUESTION:"<UNIX 운영체제>\r\n- (하나 이상/하나)의 작업에 대하여 백그라운드에서 수행이 가능\r\n- Multi-User 지원 (O/X)\r\n- Multi-Tasking 지원 (O/X)\r\n- ㅇㅇ 구조의 파일 시스템 갖는다. \r\n- 이식성이 (높/낮)으며 장치 간의 호환성이 (높/낮)다. \r\n",ITERATION:202204,NO:68,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"비연결, 적, 전송",QUESTION:"<UDP>\r\n- (비연결/연결)형 서비스 제공\r\n- 단순한 헤더 구조로 오버헤드가 (적/많)다. \r\n- TCP와 같이 ㅇㅇ 계층에 존재 \r\n",ITERATION:202204,NO:69,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"튜플",QUESTION:"<Python 데이터 타입>\r\n- ㅇㅇ 타입: 시퀀스 데이터 타입에 해당하며, 다양한 타입들을 주어진 순서에 따라 저장할 수 있으나, 저장된 내용을 변경할 수 없음.\r\n",ITERATION:202204,NO:70,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"헤더, 패킷, 비연결",QUESTION:"<IP 프로토콜>\r\n- 체크선 기능으로 (데이터/헤더) 체크섬만 제공\r\n- ㅇㅇ을 분할, 병합하는 기능을 수행 \r\n- (비연결/연결)형 서비스 제공\r\n- Best Effort 우너칙에 따른 전송 기능 제공 \r\n",ITERATION:202204,NO:75,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"커널, 커널, 커널, 사용자",QUESTION:"<스레드>\r\n- (커널/사용자) 스레드는 한 프로세스가 운영체제를 호출할 때 전체 프로세스가 대기할 필요가 없으므로 시스템 성능 높일 수 있음.\r\n- (커널/사용자) 스레드는 동시에 여러 스레드가 커널에 접근할 수 있으므로 여러 스레드가 시스템 호출을 동시에 사용할 수 있음.\r\n- (커널/사용자) 스레드는 각 스레드를 개별적으로 관리할 수 있으므로 스레드의 독립적인 스케줄링이 가능함.\r\n- (커널/사용자) 스레드는 커널 모드로의 전환 없이 스레드 교환이 가능하므로 오버헤드가 줄어든다. \r\n",ITERATION:202204,NO:77,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:4},{ANSWER:"오용, 이상, 사용자",QUESTION:"<침입 탐지 시스템(IDS: Intrusion Detection System)>\r\n- 외부 인터넷에 서비스를 제공하는 서버가 위치하는 네트워크인 DMZ(Demilitarized Zone)에는 IDS가 설치될 수 있음.\r\n- ㅇㅇ 탐지 기법(Misuse Detection): Signature Base나 Knowledge Base라 불리며 이미 발견되고 정립된 공격 패턴을 입력해두었다가 탐지 및 차단함.\r\n- ㅇㅇ 탐지 기법(Anomaly Detection): Behavior, Statistical Detection로 불리며 평균적인 시스템의 상태를 기준으로 비정상적인 행위나 자원 사용이 감지되면 이를 알려줌.\r\n- HIDS(Host-Based Intrusion Detection)는 운영 체제에 설정된 사용자 계정에 따라 어떤 ㅇㅇㅇ가 어떤 접근을 시도하고 어떤 작업을 했는지에 대한 기록을 남기고 추적함.\r\n- NIDS(Network-Based Intrusion Detection System)로는 대표적으로 Snort가 있음.\r\n",ITERATION:202108,NO:81,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"신원, 등급, 역할",QUESTION:"<접근 통제 기술>\r\n- 임의 접근 통제(Discretionary Access Control): 데이터에 접근하는 사용자의 ㅇㅇ에 따라 접근 권한을 부여하는 방식\r\n- 강제 접근 통제(Mandatory Access Control): 주체와 객체의 ㅇㅇ을 비교하여 접근 권한을 부여하는 방식\r\n- 역할 기반 접근 통제(Role Based Access Control): 사용자의 ㅇㅇ에 따라 접근 권한을 부여하는 방식\r\n",ITERATION:202108,NO:82,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"통제, 포트, 네트워크",QUESTION:"<정보 보안을 위한 접근 제어>\r\n- 적절한 권한을 가진 인가자만 특정 시스템이나 정보에 접근할 수 있도록 ㅇㅇ하는 것임.\r\n- 시스템 및 네트워크에 대한 접근 제어의 가장 기본적인 수단은 IP와 서비스 ㅇㅇ로 볼 수 있음.\r\n- ㅇㅇㅇㅇ 장비에서 수행하는 IP에 대한 접근 제어로는 관리 인터페이스의 접근제어와 ACL(Access Control List)등이 있음.\r\n",ITERATION:202108,NO:85,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:1,QUESTION:"물리적 배치와 상관 없이 논리적으로 LAN을 구성하여 Broadcast Domain을 구분할 수 있게 해주는 기술로 접속된 장비들의 성능 향상 및 보안성 증대 효과가 있는 것은?\r\n1)VLAN\r\n2)STP\r\n3)L2AN\r\n4)ARP\r\n",ITERATION:202108,NO:87,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"삽입, 연동, DBMS, 입력",QUESTION:"<SQL Injection 공격>\r\n- 임의로 작성한 SQL 구문을 애플리케이션에 ㅇㅇ하는 공격 방식\r\n- 취약점이 발생하는 곳은 주로 웹 애플리케이션과 데이터페이스가 ㅇㅇ되는 부분임.\r\n- ㅇㅇㅇㅇ의 종류에 따라 공격 기법이 다름.\r\n- 로그인과 같이 웹에서 사용자의 ㅇㅇ 값을 받아 데이터베이스 SQL문으로 데이터를 요청하는 경우 SQL Injection을 수행할 수 있음.\r\n",ITERATION:202108,NO:88,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"여러, 케이블, 네트워크, 네트워크",QUESTION:"<스토리지>\r\n- SDS(Software Defined Storage): 컴퓨팅 소프트웨어로 규정하는 데이터 스토리지 체계이며, 일정 조직 내 ㅇㅇ 스토리지를 하나처럼 관리하고 운용함.\r\n- DAS(Direct Attached Storage): 서버와 저장 장치를 전용 ㅇㅇㅇ로 직접 연결하는 방식으로, 일반 가정에서 컴퓨터에 외장 하드를 연결하는 것\r\n- NAS(Network Attached Storage): 서버와 저장 장치를 ㅇㅇㅇㅇ를 통해 연결하는 방식\r\n- SAN(Storage Area Network): DAS의 빠른 처리와 NAS의 파일 공유 장점을 혼합한 방식으로, 서버와 저장 장치를 연결하는 전용 ㅇㅇㅇㅇ를 별도 구성\r\n",ITERATION:202108,NO:90,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"이전, 예측, 완벽, 소통",QUESTION:"<소프트웨어 생명 주기 모형>\r\n- 폭포수 모형(Waterfall Model): 폭포에서 한 번 떨어진 물은 거슬러 올라갈 수 없듯이 소프트웨어 개발도 ㅇㅇ 단계로 돌아갈 수 없다는 전제하에 각 단계를 확실히 매듭짓고 그 결과를 철저하게 검토하여 승인 과정을 거친 후에 다음 단계를 진행하는 개발 방법론.\r\n- 프로토타입 모형(Prototype Model): 사용자의 요구 사항을 정확히 파악하기 위해 실제 개발될 소프트웨어에 대한 견본품을 만들어 최종 결과물을 ㅇㅇ하는 모형\r\n- 나선형 모형(Spiral Model): 폭포수 모형과 프로토타입 모형의 장점에 위험 분석 기능을 추가한 모형으로, 나선을 따라 돌듯이 여러 번의 소프트웨어 개발 과정을 거쳐 점진적으로 ㅇㅇ한 최종 소프트웨어를 개발함.\r\n- 애자일 모형(Agile Model): 고객의 요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복하면서 개발 과정을 진행하는 모형으로, 어느 특정 개발 방법론이 아니라 좋은 것을 빠르고 낭비 없게 만들기 위해 고객과의 ㅇㅇ에 초점을 맞춘 방법론\r\n",ITERATION:202108,NO:93,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"대규모, 위험, 최소, 반복",QUESTION:"<Spiral Model>\r\n- 비교적 ㅇㅇㅇ 시스템에 적합함.\r\n- 개발 순서는 계획 및 정의, ㅇㅇ 분석, 공학적 개발, 고객 평가 순으로 진행됨.\r\n- 소프트웨어를 개발하면서 발생할 수 있는 위험을 관리하고 ㅇㅇ화하는 것을 목적으로 함.\r\n- 계획 수립, 위험 분석, 개발 및 검증, 고객 평가 과정을 ㅇㅇ하며 수행\r\n",ITERATION:202108,NO:94,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"MQTT",QUESTION:"ㅇㅇㅇㅇ: TCP/IP 기반 네트워크에서 동작하는 발행/구독 기반의 메시징 프로토콜로 최근 IoT 환경에서 자주 사용되고 있는 프로토콜\r\n",ITERATION:202108,NO:96,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"SSO",QUESTION:"ㅇㅇㅇ: 시스템이 몇 대가 되어도 하나의 시스템에서 인증에 성공하면 다른 시스템에 대한 접근 권한도 얻는 시스템\r\n",ITERATION:202108,NO:97,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"Salt",QUESTION:"ㅇㅇㅇㅇ: 시스템에 저장되는 패스워드들은 Hash 또는 암호화 알고리즘의 결과 값으로 저장됨. 이때 암호공격을 막기 위해 똑같은 패스워드들이 다른 암호 값으로 저장되도록 추가하는 값을 의미함.\r\n",ITERATION:202108,NO:98,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"예측, 생명, 전문가, 종합",QUESTION:"<비용 산정 방법>\r\n- LOC 기법: S/W 각 기능의 원시 코드 라인 수의 비관치, 낙관치, 기대치를 측정하여 ㅇㅇ치를 구하고 이를 이용하여 비용을 산정\r\n- Effort Per Task 기법: 각 기능을 구현시키는 데 필요한 노력을 ㅇㅇ 주기의 각 단계별로 산정\r\n- 전문가 감정 기법: 두 명 이상의 ㅇㅇㅇ에게 비용 산정을 의뢰하는 기법으로 주관적이나 가장 편리하고 신속함.\r\n- 델파이 기법: 전문가 기법의 주관적인 편견을 보완하기 위해 많은 전문가의 의견을 ㅇㅇ하여 선정하는 기법\r\n",ITERATION:202108,NO:99,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"OWASP",QUESTION:"ㅇㅇㅇㅇㅇ: 오픈소스 웹 애플리케이션 보안 프로젝트로서 주로 웹을 통한 정보 유출, 악성 파일 및 스크립트, 보안 취약점 등을 연구하는 곳\r\n",ITERATION:202108,NO:100,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"22, 암호, 서버, 원격",QUESTION:"<SSH(Secure Shell)>\r\n- 기본 네트워크 포트는 ㅇㅇ번을 사용함.\r\n- 전송되는 데이터는 ㅇㅇ화됨.\r\n- 키를 통한 인증은 클라이언트의 공개키를 ㅇㅇ에 등록해야 함.\r\n- 서로 연결되어 있는 컴퓨터 간 ㅇㅇ 명령 실행이나 셀 서비스 등을 수행함.\r\n",ITERATION:202105,NO:82,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"Sqoop",QUESTION:"ㅇㅇㅇㅇㅇ: 하둡(Hadoop)과 관계형 데이터베이스 간에 데이터를 전송할 수 있도록 설계된 도구\r\n",ITERATION:202105,NO:85,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"네트워크, 멀티, 홉, 경로",QUESTION:"<라우팅 프로토콜인 OSPF(Open Shortest Path First)>\r\n- ㅇㅇㅇㅇ 변화에 신속하게 대처할 수 있음.\r\n- ㅇㅇ캐스팅을 지원함.\r\n- ㅇ 수에 재한이 없으므로 대규모 네트워크에서 많이 사용함.\r\n- 최단 ㅇㅇ 탐색에 Dijkstra 알고리즘 사용\r\n",ITERATION:202105,NO:86,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"규모, 노력, 기능",QUESTION:"<소프트웨어 비용 추정 모형>\r\n- COCOMO 모형: 개발할 소프트웨어의 ㅇㅇ(LOC)를 예측한 후 이를 소프트웨어 종류에 따라 다르게 책정되는 비용 산정 방정식에 대입함.\r\n- Putnam 모형: 소프트웨어 생명 주기의 전 과정 동안에 사용될 ㅇㅇ의 분포를 가정해 주는 모형으로 생명 주기 예측 모형이라고도 함.\r\n- 기능점수(Function-Point) 모형: 소프트웨어의 ㅇㅇ을 증대시키는 요인별로 가중치를 부여하고, 요인별 가중치를 합산하여 총 점수를 산출한 것과 영향도를 이용하여 기능 점수(FP)를 구한 후 이를 이용해서 비용을 산정\r\n",ITERATION:202105,NO:87,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"필사, 전위, 이중, 생략, 추가, 임의",QUESTION:"<코드의 오류>\r\n- ㅇㅇ 오류(Transcription Error): 입력시 임의의 한 자리를 잘못 기록(12345 -> 12745)\r\n- ㅇㅇ 오류(Transpoision Error): 입력시 좌우 자리를 바꾸어 기록한 경우(12345 -> 12435)\r\n- ㅇㅇ 오류(Double Transpoision Error): 전위 오류가 2개 이상 발생한 경우(12345 -> 13254)\r\n- ㅇㅇ 오류(Omission Error): 입력시 한 자리를 빼놓고 기록한 경우(12345 -> 1245)\r\n- ㅇㅇ 오류(Addition Error): 입력시 한 자리를 더 추가하여 기록(12345 -> 123456)\r\n- ㅇㅇ 오류(Random Error): 오류가 두 가지 이상 결합하여 발생한 경우(12345 -> 127435)\r\n",ITERATION:202105,NO:88,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"기본, 지원, 조직",QUESTION:"<ISO/IEC 12207>\r\n- ㅇㅇ 생명 주기 프로세스: 획득, 공급, 개발, 운영, 유지보수 프로세스\r\n- ㅇㅇ 생명 주기 프로세스: 품질 보증, 검증 확인, 활동 검토, 감사, 문서화, 형상 관리, 문제 해결 프로세스\r\n- ㅇㅇ 생명 주기 프로세스: 관리, 기반 구조, 훈련, 개선 프로세스\r\n",ITERATION:202105,NO:89,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"ㅁ, ㅂ, ㅅ, ㄹ, ㄷ, ㄴ",QUESTION:"SPICE 모델의 프로세스 수행 능력 단계를 수준 0부터 수준 5까지 순서대로 말하시오.         정답 기입 예시) ㄱ, ㄴ, ㄷ, ㄹ, ㅁ, ㅂ\r\nㄱ)미완성 ㄴ)최적화 ㄷ)예측 ㄹ)확립 ㅁ)불완전 ㅂ)수행 ㅅ)관리\r\n",ITERATION:202105,NO:91,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"복원, 초미세, 콘텐츠",QUESTION:"<하드웨어 관련 신기술>\r\n- Memristor: Memory와 Register의 합성어로 전원 공급이 끊어져도 다시 전원이 공급되면 기존의 상태가 그대로 ㅇㅇ됨.\r\n- MEMS: 초정밀 반도체 제조 기술을 바탕으로 센서, 액추에이터 등 기계 구조를 다양한 기술로 미세 가공하여 전기기계적 동작을 할 수 있도록 한 ㅇㅇㅇ 장치\r\n- N-Screen: PC, TV, 휴대폰에서 원하는 ㅇㅇㅇ를 끊임없이 자유롭게 이용할 수 있는 서비스\r\n",ITERATION:202105,NO:92,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"고정, 일, 보호",QUESTION:"<해쉬 기법>\r\n- 임의의 길이의 입력 데이터를 받아 ㅇㅇ된 길이의 해쉬 값으로 변환함.\r\n- 대표적인 해쉬 알고리즘으로 HAVAL, SHA-1 등이 있음.\r\n- 해시 함수는 ㅇ방향 함수임.\r\n- 데이터의 암호화, 무결성 검증을 위해 사용될 뿐만 아니라 정보 ㅇㅇ의 다양한 분야에서 활용됨.\r\n",ITERATION:202105,NO:93,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"양, 기밀, 운영, 무결",QUESTION:"<IPSec>\r\n- 암호화와 복호화가 모두 가능한 ㅇ방향 암호 방식\r\n- ESP는 발신지 인증, 데이터 무결성, ㅇㅇ성 모두를 보장함.\r\n- ㅇㅇ 모드는 Tunnel 모드와 Transport 모드로 분류됨.\r\n- AH는 발신지 호스트를 인증하고, IP 패킷의 ㅇㅇ성을 보장함.\r\n",ITERATION:202105,NO:94,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"인증, 접근, 객체, 경로, 축소",QUESTION:"<Secure OS의 보안 기능>\r\n- 식별 및 ㅇㅇ\r\n- 임의적/강제적 ㅇㅇ 통제\r\n- ㅇㅇ 재사용 보호\r\n- 신뢰 ㅇㅇ\r\n- 감사 및 감사 기록 ㅇㅇ\r\n",ITERATION:202105,NO:97,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"nmap",QUESTION:"ㅇㅇㅇㅇ: 서버에 열린 포트 정보를 스캐닝해서 보안 취약점을 찾는데 사용하는 도구\r\n",ITERATION:202105,NO:98,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"라우터",QUESTION:"ㅇㅇㅇ: 서로 다른 네트워크 대역에 있는 호스트들 상호 간에 통신할 수 있도록 해주는 네트워크 장비\r\n",ITERATION:202105,NO:99,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"개인, 공개, 공개, 개인",QUESTION:"<암호화 기법>\r\n- ㅇㅇ키 암호화 기법은 동일한 키로 데이터를 암호화하고 복호화함.\r\n- ㅇㅇ키 암호화 기법은 암호화는 데이터베이스 사용자에게 공개하는 공개키, 복호화는 관리자가 비밀리에 관리하는 비밀키 사용함.\r\n- RSA, ECC는 ㅇㅇ키 기법임.\r\n- AES는 ㅇㅇ키 기법임.\r\n",ITERATION:202105,NO:100,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"계획, 위험, 개발, 평가",QUESTION:"<나선형 모형의 수행 과정>\r\nㅇㅇ 및 정의 -> ㅇㅇ 분석 -> 공학적 ㅇㅇ -> 고객 ㅇㅇ\r\n",ITERATION:202103,NO:84,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"구조, 객체, 정보, 컴포넌트",QUESTION:"<개발 방법론>\r\n- ㅇㅇ적 방법론: 정형화된 분석 절차에 따라 사용자 요구 사항을 파악하여 문서화하는 처리 중심의 방법론\r\n- ㅇㅇ 지향 방법론: 현실 세계의 개체를 기계의 부품처럼 하나의 객체로 만들어, 소프트웨어를 개발할 때 기계의 부품을 조립하듯이 객체들을 조립해서 필요한 소프트웨어를 구현\r\n- ㅇㅇ 공학 방법론: 정보 시스템의 개발을 위해 계획, 분석, 설계, 구축에 정형화된 기법들을 상호 연관성 있게 통합 및 적용하는 자료 중심의 방법론\r\n- ㅇㅇㅇㅇ 기반 방법론(CBD): 기존의 시스템이나 소프트웨어를 구성하는 컴포넌트를 조합하여 하나의 새로운 애플리케이션을 만드는 방법론\r\n",ITERATION:202103,NO:87,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"Baas",QUESTION:"<ㅇㅇㅇㅇ>                                             정답 기입 예시) Yumi\r\n- 블록체인(Blockchain) 개발 환경을 클라우드로 서비스하는 개념\r\n- 블록체인 네트워크에 노드의 추가 및 제거가 용이\r\n- 블록체인의 기본 인프라를 추상화하여 블록체인 응용 프로그램을 만들 수 있는 클라우드 컴퓨팅 플랫폼\r\n",ITERATION:202103,NO:89,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"성, 링, 버스, 계층, 망",QUESTION:"<통신망의 구성 형태>\r\n- ㅇ형(중앙 집중형): 중앙에 중앙 컴퓨터가 있고, 이를 중심으로 단말 장치들이 연결되는 중앙 집중식의 네트워크 구성 형태\r\n- ㅇ형(루프형): 컴퓨터와 단말 장치들을 서로 이웃하는 것끼리 포인트 투 포인트(Point-to-Point) 방식으로 연결시킨 형태\r\n- ㅇㅇ형: 한 개의 통신 회선에 여러 대의 단말 장치가 연결되어 있는 형태\r\n- ㅇㅇ형(분산형): 중앙 컴퓨터와 일정 지역의 단말 장치까지는 하나의 통신 회선으로 연결시키고, 이웃하는 단말 장치는 일정 지역 내에 설치된 중간 단말 장치로 부터 다시 연결시키는 형태\r\n- ㅇ형(Mesh): 모든 지점의 컴퓨터와 단말 장치를 서로 연결한 형태로, 노드의 연결성이 높음.\r\n",ITERATION:202103,NO:91,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"그리드, 사물, 아카이빙, 빅뱅",QUESTION:"스마트 ㅇㅇㅇ;전기 및 정보 통신 기술을 활용하여 전력망을 지능화, 고도화함으로써 고품질의 전력 서비스를 제공하고 에너지 이용 효율을 극대화하는 전력망\r\nㅇㅇ 인터넷: 정보 통신 기술을 기반으로 실세계와 가상 세계의 다양한 사물들을 인터넷으로 서로 연결하여 진보된 서비스를 제공하기 위한 서비스 기반 기술\r\n디지털 ㅇㅇㅇㅇ: 디지털 정보 자원을 장기적으로 보존하기 위한 작업. 아날로그는 디지털로 변환 후 압축해서 저장하고 디지털은 체계적으로 분류하고 메타 데이터를 만들어 DB화함.\r\n미디어 ㅇㅇ: 새로운 미디어의 등장 및 시장의 변화로 기존의 미디어 질서가 변화하는 것을 비유한 것.\r\n",ITERATION:202103,NO:92,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"순차, RC, 대칭",QUESTION:"<스트림 암호화 방식>\r\n- 비트/바이트/단어들을 ㅇㅇ적으로 암호화\r\n- ㅇㅇ4, LFSR가 대표적임.\r\n- 개인키 암호화 기법으로 단일키 암호화 기법 또는 ㅇㅇ 암호 기법이라고도 함.\r\n",ITERATION:202103,NO:94,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"비동기, ACK, 패킷, 리셋",QUESTION:"<세션 하이재킹 탐지 방법>\r\n- ㅇㅇㅇ화 상태 탐지\r\n- ㅇㅇㅇ Storm 탐지\r\n- ㅇㅇ의 유실과 재전송 증가 탐지\r\n- 예상치 못한 접속의 ㅇㅇ 탐지\r\n",ITERATION:202103,NO:95,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"초기, 관리, 정의, 정량, 최적",QUESTION:"<CMM(Capability Maturity Model)의 단계>\r\n- ㅇㅇ 단계: 정의된 프로세스가 없으며 작업자 능력에 따라 성공 여부가 결정됨.\r\n- ㅇㅇ 단계: 규칙화된 프로세스로 특정한 프로세스 내의 프로세스 정의 및 수행\r\n- ㅇㅇ 단계: 표준화된 프로세스로 조직의 표준 프로세스를 활용하여 업무 수행\r\n- ㅇㅇ적 관리 단계: 예측 가능한 프로세스로 프로젝트를 정량적으로 관리 및 통제함.\r\n- ㅇㅇ화 단계: 지속적 개선 프로세스. 프로세스 역량 향상을 위해 지속적인 프로세스 개선\r\n",ITERATION:202009,NO:82,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"표현, 비즈니스, 서비스, 전사, 운영",QUESTION:"서비스 지향 아키텍처(SOA)의 계층\r\n-> ㅇㅇ층, ㅇㅇㅇㅇ 프로세스층, ㅇㅇㅇ층, ㅇㅇ적 요소층, ㅇㅇ 시스템층\r\n",ITERATION:202009,NO:84,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"DAS, NAS, SAN",QUESTION:"<스토리지 시스템의 종류>\r\n- ㅇㅇㅇ: 서버와 저장 장치를 전용 케이블로 직접 연결하는 방식으로, 일반 가정 컴퓨터에 외장하드를 연결하는 것\r\n- ㅇㅇㅇ: 서버와 저장 장치를 네트워크를 통해 연결하는 방식\r\n- ㅇㅇㅇ: DAS의 빠른 처리와 NAS의 파일 공유 장점을 혼합한 방식으로, 서버와 저장 장치를 연결하는 전용 네트워크를 별도로 구성하는 방식\r\n",ITERATION:202009,NO:85,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"DFD, DD, 프로세스, ERD, STD, SADT",QUESTION:"<구조적 분석 도구>\r\n- 자료 흐름도(ㅇㅇㅇ): 요구사항 분석에서 자료의 흐름 및 변환 과정과 기능을 도형 중심으로 서술하는 방법으로 자료 흐름 그래프, 버블 차트라고도 함.\r\n- 자료 사전(ㅇㅇ): 자료 흐름도에 있는 자료를 더 자세히 정의하고 기록한 것이며, 이처럼 데이터를 설명하는 데이터를 데이터의 데이터, 또는 메타 데이터라고 함.\r\n- 소단위 명세서(Mini-Spec.): 세분화된 자료 흐름도에서 최하위 단계 버블(프로세스)의 처리 절차를 기술한 것으로 ㅇㅇㅇㅇ 명세서라고도 함.\r\n- 개체 관계도(ㅇㅇㅇ): 시스템에서 처리되는 개체와 개체의 구성과 속성, 개체 간의 관계를 표현하여 자료를 모델화하는 데 사용됨.\r\n- 상태전이도(ㅇㅇㅇ): 시스템에 어떤 일이 발생할 경우 시스템의 상태와 상태 간의 전이를 모델화한 것으로, 상태 전이도를 통해 개발자는 시스템의 행위를 정의할 수 있음.\r\n- ㅇㅇㅇㅇ: 미국의 SoftTech사에서 만든 기법으로, 청사진이라고 하는 다이어그램을 사용하여 소프트웨어 시스템을 설계하고, 이 다이어그램을 계층 구조적으로 전개해 감으로써 시스템의 논리를 구체화해 가는 특징이 있음.\r\n",ITERATION:202009,NO:87,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"DAC, MAC, RBAC",QUESTION:"<접근 통제 기술>                           정답 기입 예시) ABC, DEF, GHIJ\r\n- 임의 접근 통제(ㅇㅇㅇ): 데이터에 접근하는 사용자의 신원에 따라 접근 권한을 부여하며, 정책 변경이 어렵지만 안정적이고 집중적임.\r\n- 강제 접근 통제(ㅇㅇㅇ): 주체와 객체의 등급을 비교하여 접근 권한을 부여하는 방식으로, 정책 변경이 용이하고 유연함.\r\n- 역할 기반 접근 통제(ㅇㅇㅇㅇ): 사용자의 역할에 따라 접근 권한을 부여하는 방식이며 정책 변경이 용이하고 관리가 용이함.\r\n",ITERATION:202009,NO:89,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"랜섬웨어, 파밍, 피싱, XSS",QUESTION:"ㅇㅇㅇㅇ: 인터넷 사용자의 컴퓨터에 잠입해 내부 문서나 파일 등을 암호화해 사용자가 열지 못하게 하는 프로그램으로, 암호 해독용 프로그램의 전달을 조건으로 사용자에게 돈을 요규하기도 함.\r\nㅇㅇ: 합법적으로 소유하고 있던 사용자의 도메인을 탈취하거나 DNS 이름을 속여 사용자들이 진짜 사이트로 오인하도록 유도하여 개인 정보를 훔치는 신종 인터넷 사기 수법\r\nㅇㅇ: 낚시라는 뜻의 은어로, 허위 웹 사이트를 내세워 사용자의 개인 신용 정보를 빼내는 수법\r\n크로스사이트 스크립팅(ㅇㅇㅇ): 웹페이지에 악의적인 스크립트를 삽입하여 방문자들의 정보를 탈취하거나, 비정상적인 기능 수행을 유발하는 취약점\r\n",ITERATION:202009,NO:94,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"소프트웨어, 자동, 가상, 하드웨어",QUESTION:"<소프트웨어 정의 데이터센터(SDDC:Software Defined Data Center)>\r\n- 컴퓨팅, 네트워킹, 스토리지, 관리 등을 모두 ㅇㅇㅇㅇㅇ로 정의함.\r\n- 인력 개입 없이 소프트웨어 조작만으로 ㅇㅇ 제어 관리\r\n- 데이터 센터 내 모든 자원을 ㅇㅇ화하여 서비스\r\n- 특정 ㅇㅇㅇㅇ와 상관없이 독립적으로 서비스 제공\r\n",ITERATION:202009,NO:96,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"논리, 제어, X, 시각",QUESTION:"<NS(Nassi-Scheniderman) chart>\r\n- ㅇㅇ의 기술에 중점을 둔 도형식 표현 방법\r\n- 연속, 선택 및 다중 선택, 반복 등의 ㅇㅇ 논리 구조로 표현\r\n- GOTO나 화살표를 사용 (O/X)\r\n- 조건이 복합되어 있는 곳의 처리를 ㅇㅇ적으로 명확히 식별하는데 적합함.\r\n",ITERATION:202009,NO:98,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:1,QUESTION:"다음 내용에 적합한 용어는?\r\n- 대용량 데이터를 분산 처리하기 위한 목적으로 개발된 프로그래밍 모델\r\n- Google에 의해 고안된 기술로써 대표적인 대용량 데이터 처리를 위한 병렬 처리 기법을 제공함.\r\n- 임의의 순서로 정렬된 데이터를 분산 처리하고 이를 다시 합치는 과정을 거침.\r\n1)MapReduce    2)SQL    3)Hijacking    4)Logs\r\n",ITERATION:202009,NO:99,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:4,QUESTION:"소프트웨어 프로세스에 대한 개선 및 능력 측정 기준에 대한 국제 표준은?\r\n1)ISO 14001  \r\n  2)IEEE 802.5   \r\n 3)IEEE 488   \r\n 4)SPICE\r\n",ITERATION:202009,NO:100,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"디지털 트윈",QUESTION:"물리적인 사물과 컴퓨터에 동일하게 표현되는 가상의 모델로, 실제 물리적인 자산 대신 소프트웨어로 가상화함으로써 실제 자산의 특성에 대한 정확한 정보를 얻을 수 있고, 자산 최적화, 돌발 사고 최소화, 생산성 증가 등 설계부터 제조, 서비스에 이르는 모든 과정의 효율성을 향상시킬 수 있는 모델은?\r\n-> ㅇㅇㅇ ㅇㅇ\r\n",ITERATION:202008,NO:81,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"자료, 정보, 명령어, 데이터, 인터페이스",QUESTION:"<기능 점수 모형의 비용 산정 요소>\r\n- ㅇㅇ 입력(입력 양식)\r\n- ㅇㅇ 출력(출력 보고서)\r\n- ㅇㅇㅇ(사용자 질의수)\r\n- ㅇㅇㅇ 파일\r\n- 필요한 외부 루틴과의 ㅇㅇㅇㅇㅇ\r\n",ITERATION:202008,NO:84,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"SLIM",QUESTION:"ㅇㅇㅇㅇ: Putnam 모형을 기초로 해서 만든 자동화 추정 도구\r\n",ITERATION:202008,NO:86,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"SEED, ARIA, DES, AES, RSA",QUESTION:"<주요 암호화 알고리즘>\r\n- ㅇㅇㅇㅇ: 1999년 한국인터넷진흥원에서 개발한 블록 암호화 알고리즘\r\n- ㅇㅇㅇㅇ: 2004년 국가정보원과 산학연협회가 개발한 블록 암호화 알고리즘\r\n- ㅇㅇㅇ: 1975년 미국 NBS에서 발표한 개인키 암호화 알고리즘\r\n- ㅇㅇㅇ: 2001년 미국 표준 기술 연구소에서 발표한 개인키 암호화 알고리즘\r\n- ㅇㅇㅇ: 1978년 MIT의 라이베스트, 샤미르, 애들먼에 의해 제안된 공개키 암호화 알고리즘\r\n",ITERATION:202008,NO:87,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"Trin, TFN, 암호",QUESTION:"<DDoS 공격의 종류>\r\n- ㅇㅇㅇㅇ00: 가장 초기 형태의 데몬으로, 주로 UDP Flooding 공격을 수행함.\r\n- ㅇㅇㅇ(Tribe Flooding Network): UDP Flooding 뿐만 아니라 TCP SYN Flood 공격, ICMP 응답 요청, 스머핑 공격 등을 수행함.\r\n- Stacheldraht: 이전 툴들의 기능을 유지하면서, 공격자, 마스터, 에이전트가 쉽게 노출되지 않도록 ㅇㅇ화된 통신을 수행하며, 툴이 자동으로 업데이트되도록 설계됨.",ITERATION:202008,NO:91,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"거리, 소, 15, 최단",QUESTION:"<RIP(Routing Information Protocol)>\r\n- ㅇㅇ 벡터 라우팅 프로토콜이라고도 함.\r\n- ㅇ규모 네트워크 환경에 적합함.\r\n- 최대 홉 카운트를 ㅇㅇ홉 이하로 한정함.\r\n- ㅇㅇ 경로 탐색에는 Bellman-Ford 알고리즘 사용\r\n",ITERATION:202008,NO:93,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"합성, 생성",QUESTION:"<재사용 방법>\r\n- ㅇㅇ 중심: 전자 칩과 같은 소프트웨어 부품, 즉 블록(모듈)을 만들어 끼워 맞추는 방법으로 소프트웨어를 완성시키는 방법. 블록 구성 방법이라고도 함.\r\n- ㅇㅇ 중심: 추상화 형태로 쓰여진 명세를 구체화하여 프로그램을 만드는 방법으로, 패턴 구성 방법이라고도 함.\r\n",ITERATION:202008,NO:96,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:4,QUESTION:"실무적으로 검증된 개발 보안 방법론 중 하나로, SW 보안의 모범 사례를 SDLC(Software Development Life Cycle)에 통합한 소프트웨어 개발 보안 생명주기 방법론은?\r\n1)CLASP   \r\n 2)CWE\r\n    3)PIMS \r\n   4)Seven Touchpoints\r\n",ITERATION:202008,NO:92,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"스택가드",QUESTION:"메모리상에서 프로그램의 복귀 주소와 변수 사이에 특정 값을 저장해 두었다가 그 값이 변경되었을 경우 오버플로우 상태로 가정하여 프로그램 실행을 중단하는 기술은?\r\n-> ㅇㅇㅇㅇ\r\n",ITERATION:202006,NO:82,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"무결성, 로그, 파일, 열린, 백도어",QUESTION:"<백도어 탐지 방법>\r\n- ㅇㅇㅇ 검사\r\n- ㅇㅇ 분석\r\n- SetUID ㅇㅇ 검사\r\n- ㅇㅇ 포트 검사\r\n- 바이러스 및 ㅇㅇㅇ 탐지 툴 이용\r\n",ITERATION:202006,NO:83,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:4,QUESTION:"IP 또는 ICMP의 특성을 악용하여 특정 사이트에 집중적으로 데이터를 보내 네트워크 또는 시스템의 상태를 불능으로 만드는 공격 방법은?\r\n1)TearDrop   \r\n2)Smishing \r\n  3)Qshing  \r\n 4)Smurfing\r\n",ITERATION:202006,NO:84,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"목표, 규모, 기술, 제약, 품질",QUESTION:"<테일러링 개발 방법론>\r\n- 내부적 요건: ㅇㅇ 환경, 요구사항, 프로젝트 ㅇㅇ, 보유 ㅇㅇ\r\n- 외부적 요건: 법적 ㅇㅇ 사항, 표준 ㅇㅇ 기준\r\n",ITERATION:202006,NO:97,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"무결",QUESTION:"ㅇㅇ성: 시스템 내의 정보는 오직 인가된 사용자만 수정할 수 있는 보안 요소\r\n",ITERATION:202006,NO:100,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:2,QUESTION:"크래커가 침입하여 백도어를 만들어 놓거나, 설정 파일을 변경했을 때 분석하는 도구는? \r\n1) trace \r\n2) tripwire \r\n3) udpdump \r\n4) cron\r\n",ITERATION:202006,NO:87,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:2,QUESTION:"COCOMO model 중 기관 내부에서 개발된 중소 규모의 소프트웨어로 일괄 자료 처리나 과학기술 계산용, 비즈니스 자료 처리용으로 5만 라인 이하의 소프트웨어를 개발하는 유형은? \r\n1) embeded \r\n2) organic \r\n3) semi-detached \r\n4) semi-embeded\r\n",ITERATION:202006,NO:89,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:1,QUESTION:"여러 개의 독립된 통신장치가 UWB 기술 또는 블루투스 기술을 사용하여 통신망을 형성하는 무선 네트워크 기술은? \r\n1) PICONET \r\n2) SCRUM \r\n3) NFC \r\n4) WI-SUN\r\n",ITERATION:202006,NO:90,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:1,QUESTION:"컴퓨터 사용자의 키보드 움직임을 탐지해 ID, 패스워드 등 개인의 중요한 정보를 몰래 빼가는 해킹 공격은? \r\n1) Key Logger Attack \r\n2) Worm \r\n3) Rollback \r\n4) Jombie Worm\r\n",ITERATION:202006,NO:96,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"위험, 반복, 주기",QUESTION:"<나선형 모델(Spiral Model)> \r\n - 소프트웨어 개발 프로세스를 ㅇㅇ 관리 측면에서 본 모델 \r\n- 점진적으로 개발 과정이 ㅇㅇ되므로 계획 수립 이후 추가적인 위험 분석이 가능 \r\n- 시스템을 여러 부분으로 나누어 여러 번의 개발 ㅇㅇ를 거치면서 완성됨.  \r\n- 요구사항이나 아키텍쳐를 이해하기 어렵다거나 중심이 되는 기술에 문제가 있는 경우 적합한 모델\r\n",ITERATION:202203,NO:81,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"고가용성",QUESTION:"다음 설명에 해당하는 정보시스템은? \r\n - 각 시스템 간에 공유 디스크를 중심으로 클러스터링으로 엮여 다수의 시스템을 동시에 연결할 수 있다.  \r\n- 조직, 기업의 기간 업무 서버 등의 안정성을 높이기 위해 사용될 수 있다. \r\n- 여러 가지 방식으로 구현되며 2개의 서버를 연결하는 것으로 2개의 시스템이 각각 업무를 수행하도록 구현하는 방식이 널리 사용\r\n ㅇㅇㅇㅇ 솔루션(HACMP)",ITERATION:202203,NO:82,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:3,QUESTION:"위조된 매체 접근 제어(MAC) 주소를 지속적으로 네트워크로 흘려보내, 스위치 MAC 주소 테이블의 저장 기능을 혼란시켜 더미 허브(Dummy Hub)처럼 작동하게 하는 공격은? \r\n1) Parsing \r\n2) LAN Tapping \r\n3) Switch Jamming \r\n4) FTP Flooding\r\n",ITERATION:202203,NO:83,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"버그, 스나프, 프린팅, 재킹",QUESTION:"<블루투스 공격> \r\n- 블루ㅇㅇ: 블루투스 장비사이의 취약한 연결 관리를 악용한 공격 \r\n- 블루ㅇㅇㅇ: 블루투스의 취약점을 활용하여 장비의 파일에 접근하는 공격으로 OPP를 사용하여 정보를 열람  \r\n- 블루ㅇㅇㅇ: 블루투스 공격 장치의 검색 활동을 의미 \r\n- 블루ㅇㅇ: 블루투스를 이용해 스팸처럼 명함을 익명으로 퍼뜨리는 것\r\n",ITERATION:202203,NO:87,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"Honey",QUESTION:"다음 설명에 해당하는 시스템은? \r\n - 1990년대 David Clock이 처음 제안하였다.  \r\n- 비정상적인 접근의 탐지를 위해 의도적으로 설치해 둔 시스템 \r\n- 침입자를 속여 실제 공격당하는 것처럼 보여줌으로써 크래커를 추적 및 공격기법의 정보를 수집하는 역할을 함.\r\n- 쉽게 공격자에게 노출되어야 하며 쉽게 공격이 가능한 것처럼 취약해 보여야 한다.\r\n ㅇㅇㅇㅇㅇpot",ITERATION:202203,NO:89,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"Docker",QUESTION:"다음 설명하는 IT 기술은? \r\n - 컨테이너 응용프로그램의 배포를 자동화하는 오픈소스 엔진이다. \r\n- 소프트웨어 컨테이너 안에 응용 프로그램들을 배치시키는 일을 자동화해주는 오픈 소스 프로젝트이자 소프트웨어로 볼 수 있다.\r\n ㅇㅇㅇㅇㅇㅇ",ITERATION:202203,NO:90,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:2,QUESTION:"Python 기반의 웹 크롤링 프레임워크로 옳은 것은? \r\n1) Li-fi \r\n2) Scrapy \r\n3) CrawlCat \r\n4) SBAS\r\n",ITERATION:202203,NO:92,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"쿼리, 브라우저, 운영체제, 문자열",QUESTION:"<Secure 코딩에서 입력 데이터의 보안 약점> \r\n- SQL 삽입: 사용자의 입력 값 등 외부 입력 값이 SQL ㅇㅇ에 삽입되어 공격 \r\n- 크로스사이트 스크립트: 검증되지 않은 외부 입력 값에 의해 ㅇㅇㅇㅇ에서 악의적인 코드가 실행\r\n- 운영체제 명령어 삽입: 운영체제 명령어 파라미터 입력 값이 적절한 사전검증을 거치지 않고 사용되어 공격자가 ㅇㅇㅇㅇ 명령어를 조작  \r\n- 자원 삽입: 자원을 조작할 수 있는 ㅇㅇㅇ을 삽입하여 시스템이 보호하는 자원에 임의로 접근\r\n",ITERATION:202203,NO:93,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"우수, 대용량",QUESTION:"<NTFS의 특징> \r\n- FAT시스템을 대체하기 위해 개발된 윈도우 파일 시스템 \r\n- 보안 측면에서 FAT보다 (우수/취약)\r\n- (대용량/저용량) 볼륨에 효율적 \r\n- 자동 ㅇㅇ 및 안정성\r\n",ITERATION:202203,NO:94,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"666, 777, 022",QUESTION:"<unmask> \r\n- UNIX에서 파일이나 디렉터리의 초기 권한을 설정할 때 사용하는 값\r\n- 파일의 경우 ㅇㅇㅇ에서 unmask를 뺀 값을, 디렉터리일 경우 ㅇㅇㅇ에서 unmask를 뺀 값을 초기 접근 권한으로 갖는다. \r\n- 파일 권한이 644일 경우, unmask 값은 ㅇㅇㅇ이다.\r\n",ITERATION:202203,NO:96,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:4,QUESTION:"OSI 7 Layer 전 계층의 프로토콜과 패킷 내부의 콘텐츠를 파악하여 침입 시도, 해킹 등을 탐지하고 트래픽을 조정하기 위한 패킷 분석 기술은? \r\n1) PLCP \r\n2) Traffic Distributor \r\n3) Packet Tree \r\n4) DPI(Deep Packet Inspection)\r\n",ITERATION:202203,NO:99,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"XOOO",QUESTION:"<소프트웨어 개발 방법론의 테일러링>\r\n- 프로젝트 수행 시 예상되는 변화를 배제하고 신속히 진행하여야 함. (O/X)\r\n- 프로젝트에 최적화된 개발 방법론을 적용하기 위해 절차, 산출물 등을 적절히 변경하는 활동 (O/X)\r\n- 관리 측면에서의 목적 중 하나는 최단기간에 안정적인 프로젝트 진행을 위한 사전 위험을 식별하고 제거하는 것 (O/X)\r\n- 기술적 측면에서의 목적 중 하나는 프로젝트에 최적화된 기술 요소를 도입하여 프로젝트 특성에 맞는 최적의 기법과 도구를 사용하는 것(O/X)\r\n",ITERATION:202203,NO:94,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:1,QUESTION:"어떤 외부 컴퓨터가 접속되면 접속 인가 여부를 점검해서 인가된 경우에는 접속이 허용되고, 그 반대의 경우에는 거부할 수 있는 접근제어 유틸리티는? \r\n1) tcp wrapper \r\n2) trace checker \r\n3) token finder\r\n4) change detector\r\n",ITERATION:202204,NO:82,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"Zing",QUESTION:"ㅇㅇㅇㅇ: 기기를 키오스크에 갖다 대면 원하는 데이터를 바로 가져올 수 있는 기술로\r\n 10㎝ 이내 근접 거리에서 기가급 속도로 데이터 전송이 가능한 초고속 근접무선통신(NFC : Near Field Communication) 기술\r\n",ITERATION:202204,NO:83,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"OOOX",QUESTION:"<클라우드 기반 HSM(Cloud-based Hardware Security Module)>\r\n- 클라우드(데이터센터) 기반 암호화 키 생성, 처리, 저장 등을 하는 보안 기기이다.\t(O/X)\r\n- 국내에서는 공인인증제의 폐지와 전자서명법 개정을 추진하면서 클라우드 HSM 용어가 자주 등장하였다. (O/X)\r\n- 클라우드에 인증서를 저장하므로 기존 HSM 기기나 휴대폰에 인증서를 저장해 다닐 필요가 없다 (O/X)\r\n- 하드웨어가 아닌 소프트웨어적으로만 구현되기 때문에 소프트웨어식 암호 기술에 내재된 보안 취약점을 해결할 수 없다는 것이 주요 단점 (O/X)\r\n",ITERATION:202204,NO:88,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:1,QUESTION:"\t악성코드의 유형 중 다른 컴퓨터의 취약점을 이용하여 스스로 전파하거나 메일로 전파되며 스스로를 증식하는 것은? \r\n1) Worm \r\n2) Rogue Ware \r\n3) Adware\r\n4) Reflection Attack\r\n",ITERATION:202204,NO:89,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:1,QUESTION:"\t악성코드의 유형 중 다른 컴퓨터의 취약점을 이용하여 스스로 전파하거나 메일로 전파되며 스스로를 증식하는 것은? \r\n1) Worm \r\n2) Rogue Ware \r\n3) Adware\r\n4) Reflection Attack\r\n",ITERATION:202204,NO:82,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"OXOO",QUESTION:"<암호 알고리즘>\r\n- 대칭 암호 알고리즘은 비교적 실행 속도가 빠르기 때문에 다양한 암호의 핵심 함수로 사용 (O/X)\r\n- 대칭 암호 알고리즘은 비밀키 전달을 위한 키 교환이 필요하지 않아 암호화 및 복호화의 속도가 빠름. (O/X)\r\n- \t비대칭 암호 알고리즘은 자신만이 보관하는 비밀키를 이용하여 인증, 전자서명 등에 적용이 가능 (O/X)\r\n- 대표적인 대칭키 암호 알고리즘으로는 AES, IDEA 등이 있음. (O/X)\r\n",ITERATION:202204,NO:93,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"OOXO",QUESTION:"<COCOMO(Constructive Cost Model)>\r\n- 프로젝트를 완성하는데 필요한 man-month로 산정 결과를 나타냄. (O/X)\r\n- 보헴(Boehm)이 제안한 것으로 원시코드 라인 수에 의한 비용 산정 기법 (O/X)\r\n- 대규모 소프트웨어 프로젝트에 적합 (O/X)\r\n- 개발유형에 따라 조직형(Organic), 반분리형(Semi-Detached), 내장형(Embedded)으로 구분 (O/X)\r\n",ITERATION:202204,NO:96,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:4,QUESTION:"\t시스템의 사용자가 로그인하여 명령을 내리는 과정에 대한 시스템의 동작 중 다음 설명에 해당하는 것? \r\n- 자신의 신원(Identity)을 시스템에 증명하는 과정 \r\n - 아이디와 패스워드를 입력하는 과정이 가장 일반적인 예시 \r\n1) Aging \r\n2) Accounting \r\n3) Authorization\r\n4) Authentication\r\n",ITERATION:202204,NO:98,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:1,QUESTION:"다음 IT 기술은? \r\n- 네트워크를 제어부, 데이터 전달부로 분리하여 네트워크 관리자가 보다 효율적으로 네트워크를 제어, 관리할 수 있는 기술 \r\n - 기존의 라우터, 스위치 등과 같이 하드웨어에 의존하는 네트워크 체계에서 안정성, 속도, 보안 등을 소프트웨어로 제어, 관리하기 위해 개발됨. \r\n - 네트워크 장비의 펌웨어 업그레이드를 통해 사용자의 직접적인 데이터 전송 경로 관리가 가능하고, 기존 네트워크에는 영향을 주지 않으면서 특정 서비스의 전송 경로 수정을 통하여 인터넷사에서 발생하는 문제를 처리할 수 있음. \r\n1) SDN(Software Defined Networking)\t\r\n2) NFS(Network File System)\t\r\n3) Network Mapper\r\n4) AOE Network\r\n",ITERATION:202204,NO:99,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"막대, 시간선, 수평",QUESTION:"<GANTT 차트> \r\n- 각 작업들이 언제 시작하고 언제 종료되는지에 대한 일정을 ㅇㅇ 도표를 이용하여 표시\r\n- ㅇㅇㅇ 차트라고도 함. \r\n- ㅇㅇ 막대의 길이는 작업의 기간을 나타냄.\r\n",ITERATION:202204,NO:100,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5},{ANSWER:"PERT",QUESTION:"ㅇㅇㅇㅇ 차트: 작업자들 간의 상호 관련성, 결정경로, 경계시간, 자원할당 등을 제시하며 네트워크 도표를 이용하여 표시한다.\r\n",ITERATION:202204,NO:100,IS_CORRECT:!1,IS_ENTERED:!1,SUBJECT:5}];const W={name:"App",components:{},setup:function(){var E=(0,a.KR)(0);function T(T){E.value=T,R()}(0,r.sV)((function(){return T(1)}));var S=(0,a.KR)([]),n=(0,r.EW)((function(){return S.value.find((function(E){return!E.IS_ENTERED}))})),I=(0,r.EW)((function(){var E=S.value.length,T=S.value.filter((function(E){return E.IS_CORRECT})),n=T.length;return"".concat(n,"/").concat(E)}));function R(){S.value=B.filter((function(T){var S=T.SUBJECT;return S===E.value})),n.value&&(0,r.dY)((function(){return U()}))}function N(){S.value.sort((function(){return Math.random()-Math.random()})),U()}var O=(0,a.KR)(null),C=(0,r.EW)((function(){return n.value.ANSWER})),A=(0,a.KR)(!1);function U(){O.value.value="",O.value.focus(),A.value=!1}function e(){if(A.value)_();else{var E=O.value.value;n.value.IS_CORRECT=t(C.value)===t(E),A.value=!0}}function _(){if(n.value.IS_CORRECT)n.value.IS_ENTERED=!0;else{var E=S.value.findIndex((function(E){return E===n.value})),T=S.value.splice(E,1),r=(0,D.A)(T,1),I=r[0];S.value.push(I)}U()}function t(E){return String(E).toUpperCase().replace(/ |,/g,"")}return{selectedSubject:E,selectSubject:T,currentQuestion:n,questionMark:I,changeQuestionList:R,shuffleQuestionList:N,answerRef:O,isAnswerEntered:A,checkAnswer:e,validateAnswer:t,passAnswer:_}}};var Q=S(1241);const J=(0,Q.A)(W,[["render",i]]),s=J;(0,n.Ef)(s).mount("#app")}},T={};function S(n){var r=T[n];if(void 0!==r)return r.exports;var I=T[n]={exports:{}};return E[n].call(I.exports,I,I.exports,S),I.exports}S.m=E,(()=>{var E=[];S.O=(T,n,r,I)=>{if(!n){var R=1/0;for(A=0;A<E.length;A++){for(var[n,r,I]=E[A],N=!0,O=0;O<n.length;O++)(!1&I||R>=I)&&Object.keys(S.O).every((E=>S.O[E](n[O])))?n.splice(O--,1):(N=!1,I<R&&(R=I));if(N){E.splice(A--,1);var C=r();void 0!==C&&(T=C)}}return T}I=I||0;for(var A=E.length;A>0&&E[A-1][2]>I;A--)E[A]=E[A-1];E[A]=[n,r,I]}})(),(()=>{S.n=E=>{var T=E&&E.__esModule?()=>E["default"]:()=>E;return S.d(T,{a:T}),T}})(),(()=>{S.d=(E,T)=>{for(var n in T)S.o(T,n)&&!S.o(E,n)&&Object.defineProperty(E,n,{enumerable:!0,get:T[n]})}})(),(()=>{S.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(E){if("object"===typeof window)return window}}()})(),(()=>{S.o=(E,T)=>Object.prototype.hasOwnProperty.call(E,T)})(),(()=>{var E={524:0};S.O.j=T=>0===E[T];var T=(T,n)=>{var r,I,[R,N,O]=n,C=0;if(R.some((T=>0!==E[T]))){for(r in N)S.o(N,r)&&(S.m[r]=N[r]);if(O)var A=O(S)}for(T&&T(n);C<R.length;C++)I=R[C],S.o(E,I)&&E[I]&&E[I][0](),E[I]=0;return S.O(A)},n=self["webpackChunkjungcheogi"]=self["webpackChunkjungcheogi"]||[];n.forEach(T.bind(null,0)),n.push=T.bind(null,n.push.bind(n))})();var n=S.O(void 0,[504],(()=>S(4486)));n=S.O(n)})();
//# sourceMappingURL=app.7ead58b1.js.map