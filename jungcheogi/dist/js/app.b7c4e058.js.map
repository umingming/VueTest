{"version":3,"file":"js/app.b7c4e058.js","mappings":"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","sources":["webpack://jungcheogi/./src/App.vue","webpack://jungcheogi/./src/plugin/algorithm.js","webpack://jungcheogi/./src/App.vue?7ccd","webpack://jungcheogi/./src/main.js","webpack://jungcheogi/webpack/bootstrap","webpack://jungcheogi/webpack/runtime/chunk loaded","webpack://jungcheogi/webpack/runtime/compat get default export","webpack://jungcheogi/webpack/runtime/define property getters","webpack://jungcheogi/webpack/runtime/global","webpack://jungcheogi/webpack/runtime/hasOwnProperty shorthand","webpack://jungcheogi/webpack/runtime/jsonp chunk loading","webpack://jungcheogi/webpack/startup"],"sourcesContent":["<template>\n    <div class=\"subject-group\">\n        <button\n            v-for=\"key in 7\"\n            :key=\"key\"\n            :class=\"{ on: selectedSubject === key }\"\n            @click=\"selectSubject(key)\"\n        >\n            {{ key }}\n        </button>\n        <button\n            v-for=\"key in subjects\"\n            :key=\"key\"\n            :class=\"{ on: selectedSubject === key }\"\n            @click=\"selectSubject(key)\"\n        >\n            {{ key }}\n        </button>\n    </div>\n    <div\n        v-if=\"currentQuestion\"\n        :class=\"{ correct: currentQuestion.IS_CORRECT }\"\n    >\n        <span id=\"question-mark\">\n            {{ questionMark }}\n            <button @click=\"shuffleQuestionList\">Shuffle</button>\n        </span>\n        <div class=\"question-box\">\n            <span>[ {{ currentQuestion.TITLE }} ]</span>\n            {{ currentQuestion.QUESTION }}\n        </div>\n        <span id=\"serial\">\n            {{ currentQuestion.ITERATION }},\n            {{ currentQuestion.NO }}\n        </span>\n        <div class=\"answer-box\">\n            <input ref=\"answerRef\" @keyup.enter=\"checkAnswer\" />\n            <button v-if=\"!isAnswerEntered\" @click=\"checkAnswer\">Enter</button>\n            <button v-else @click=\"passAnswer\">Next</button>\n        </div>\n        <div class=\"info-box\" v-if=\"isAnswerEntered\">\n            <div v-if=\"currentQuestion.IS_CORRECT\">맞았다! 잘했다!</div>\n            <div v-else>틀렸다.</div>\n            <div>\n                정답:\n                <span>{{ currentQuestion.ANSWER }}</span>\n            </div>\n        </div>\n    </div>\n    <div v-else class=\"success\">{{ selectedSubject }} 과목 완료!🎉</div>\n</template>\n\n<script>\nimport { computed, nextTick, onMounted, ref } from \"vue\";\n\nimport { QUESTIONS } from \"./plugin/algorithm\";\n\nexport default {\n    name: \"App\",\n    components: {},\n    setup() {\n        //============================== Subject\n        const selectedSubject = ref(0);\n\n        function selectSubject(key) {\n            selectedSubject.value = key;\n            changeQuestionList();\n        }\n\n        onMounted(() => selectSubject(1));\n\n        //============================== Question\n        const questionList = ref([]);\n        const currentQuestion = computed(() =>\n            questionList.value.find(question => !question.IS_ENTERED)\n        );\n        const questionMark = computed(() => {\n            const { length: total } = questionList.value;\n            const { length: index } = questionList.value.filter(\n                question => question.IS_CORRECT\n            );\n            return `${index}/${total}`;\n        });\n\n        function changeQuestionList() {\n            questionList.value = QUESTIONS.filter(\n                ({ SUBJECT }) => SUBJECT === selectedSubject.value\n            );\n\n            if (currentQuestion.value) {\n                nextTick(() => initAnswer());\n            }\n        }\n\n        function shuffleQuestionList() {\n            questionList.value.sort(() => Math.random() - Math.random());\n            initAnswer();\n        }\n\n        //============================== Answer\n        const answerRef = ref(null);\n        const currentAnswer = computed(() => currentQuestion.value.ANSWER);\n        const isAnswerEntered = ref(false);\n        const enteredTime = ref(0);\n\n        function initAnswer() {\n            answerRef.value.value = \"\";\n            answerRef.value.focus();\n            isAnswerEntered.value = false;\n        }\n\n        function checkAnswer({ timeStamp }) {\n            if (isAnswerEntered.value) {\n                return timeStamp - enteredTime.value > 500\n                    ? passAnswer()\n                    : null;\n            }\n            const { value } = answerRef.value;\n            currentQuestion.value.IS_CORRECT =\n                validateAnswer(currentAnswer.value) === validateAnswer(value);\n\n            isAnswerEntered.value = true;\n            enteredTime.value = timeStamp;\n        }\n\n        function passAnswer() {\n            if (currentQuestion.value.IS_CORRECT) {\n                currentQuestion.value.IS_ENTERED = true;\n            } else {\n                const index = questionList.value.findIndex(\n                    question => question === currentQuestion.value\n                );\n                const [question] = questionList.value.splice(index, 1);\n                questionList.value.push(question);\n            }\n            initAnswer();\n        }\n\n        function validateAnswer(value) {\n            return String(value).toUpperCase().replace(/ |,/g, \"\");\n        }\n\n        return {\n            // Subject\n            subjects: [\"보안\", \"유비\"],\n            selectedSubject,\n            selectSubject,\n\n            // Question\n            currentQuestion,\n            questionMark,\n            changeQuestionList,\n            shuffleQuestionList,\n\n            // Answer\n            answerRef,\n            isAnswerEntered,\n            checkAnswer,\n            validateAnswer,\n            passAnswer,\n        };\n    },\n};\n</script>\n\n<style>\n#app {\n    font-family: Avenir, Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-align: center;\n    color: #2c3e50;\n    margin-top: 60px;\n    white-space: break-spaces;\n    line-height: 25px;\n    max-width: 800px;\n    margin: auto;\n}\n\n.subject-group button {\n    width: 50px;\n    margin: 10px;\n}\n\n.subject-group button.on {\n    font-weight: bold;\n}\n\n#question-mark {\n    display: block;\n    text-align: right;\n    margin: 0px 30px 10px;\n}\n\n#serial {\n    display: block;\n    text-align: right;\n    margin: 0px 30px;\n}\n\n.question-box span {\n    display: block;\n    font-weight: 600;\n    font-size: large;\n    margin-bottom: 5px;\n}\n\n.answer-box input {\n    margin-right: 10px;\n    width: calc(80% - 100px);\n    height: 20px;\n}\n\n.success {\n    margin-top: 10px;\n    font-weight: bold;\n}\n\n.info-box {\n    margin-top: 10px;\n    color: red;\n}\n\n.info-box span {\n    font-weight: 600;\n}\n\n.correct .info-box {\n    color: blue;\n}\n</style>\n","/**\n * 지수: ⁰¹²³⁴⁵⁶⁷⁸⁹\n * 로그: ₀₁₂₃₄₅₆₇₈₉\n * 특수문자: Θ\n */\nexport const QUESTIONS = [\n    //============================== 2019\n    {\n        ANSWER: \"입출, 명, 유, 유효\",\n        TITLE: \"알고리즘의 조건\",\n        QUESTION: \"ㅇㅇ력, ㅇ확성, ㅇ한성, ㅇㅇ성\",\n        ITERATION: 2019,\n        NO: 1,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"이중\",\n        TITLE: \"연결 리스트\",\n        QUESTION:\n            \"ㅇㅇ 연결 리스트는 특정 노드에서 선행 노드와 후행 노드에 대한 접근이 모두 가능함.\",\n        ITERATION: 2019,\n        NO: 2,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"경로\",\n        TITLE: \"그래프 용어\",\n        QUESTION:\n            \"그래프 G에서 정점 v1으로부터 정점 v2까지의 ㅇㅇ(이)란 간선 (v1, v2),(v1, v2), ..., (vn-1, vn)으로 연결된 \\r\\n정점의 순서 리스트 v1, v2, ..., vn을 의미함.\",\n        ITERATION: 2019,\n        NO: 3,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 4,\n    },\n    {\n        ANSWER: \"욕심쟁이, 분할, 동적\",\n        TITLE: \"알고리즘의 대표적인 설계 기법\",\n        QUESTION: \"ㅇㅇㅇㅇ 방법, ㅇㅇ정복 방법, ㅇㅇ 프로그래밍 방법\",\n        ITERATION: 2019,\n        NO: 4,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"4\",\n        TITLE: \"점근 성능\",\n        QUESTION:\n            \"입력 크기 n에 대한 알고리즘 수행 시간 f(n)=5n³+10n²+8n+200을 점근 성능으로 올바르게 나타낸 것은?\\r\\n1)O(1)\\r\\n2)O(n)\\r\\n3)O(n²)\\r\\n4)O(n³)\",\n        ITERATION: 2019,\n        NO: 5,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"최악, 3\",\n        TITLE: \"점화식과 폐쇄형\",\n        QUESTION:\n            \"퀵 정렬 (최악/최선) 알고리즘의 성능으로 T(1)=Θ(1), T(n)=T(n-1)+Θ(n)의 폐쇄형은?\\r\\n11)T(n)=Θ(logn)\\r\\n2)T(n)=Θ(n)\\r\\n3)T(n)=Θ(n²)\\r\\n4)T(n)=Θ(nlogn)\",\n        ITERATION: 2019,\n        NO: 6,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"이진, 1\",\n        TITLE: \"점화식과 폐쇄형\",\n        QUESTION:\n            \"ㅇㅇ탐색 알고리즘의 성능으로 T(1)=Θ(1), T(n)=T(n/2)+Θ(1)의 폐쇄형은?\\r\\n1)T(n)=Θ(logn)\\r\\n2)T(n)=Θ(n)\\r\\n3)T(n)=Θ(n²)\\r\\n4)T(n)=Θ(nlogn)\",\n        ITERATION: 2019,\n        NO: 7,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"2\",\n        TITLE: \"점화식과 폐쇄형\",\n        QUESTION:\n            \"T(1)=Θ(1), T(n)=T(n/2)+Θ(n)의 폐쇄형은?\\r\\n1)T(n)=Θ(logn)\\r\\n2)T(n)=Θ(n)\\r\\n3)T(n)=Θ(n²)\\r\\n4)T(n)=Θ(nlogn)\",\n        ITERATION: 2019,\n        NO: 6,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"2\",\n        TITLE: \"점화식과 폐쇄형\",\n        QUESTION:\n            \"T(1)=Θ(1), T(n)=2T(n/2)+Θ(1)의 폐쇄형은?\\r\\n1)T(n)=Θ(logn)\\r\\n2)T(n)=Θ(n)\\r\\n3)T(n)=Θ(n²)\\r\\n4)T(n)=Θ(nlogn)\",\n        ITERATION: 2019,\n        NO: 6,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"최선, 합병, 4\",\n        TITLE: \"점화식과 폐쇄형\",\n        QUESTION:\n            \"퀵 정렬 (최선/최악), ㅇㅇ 정렬 알고리즘의 성능으로 T(1)=Θ(1), T(n)=2T(n/2)+Θ(n)의 폐쇄형은?\\r\\n1)T(n)=Θ(logn)\\r\\n2)T(n)=Θ(n)\\r\\n3)T(n)=Θ(n²)\\r\\n4)T(n)=Θ(nlogn)\",\n        ITERATION: 2019,\n        NO: 6,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"분할, 정복, 결합\",\n        TITLE: \"분할정복 방법\",\n        QUESTION:\n            \"분할정복 방법에서 각 순환 호출마다 거치는 작업의 단계: ㅇㅇ -> ㅇㅇ -> ㅇㅇ\",\n        ITERATION: 2019,\n        NO: 6,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"25, 10, 20, 15\",\n        TITLE: \"퀵 정렬\",\n        QUESTION:\n            \"다음 데이터에 대해서 분할 함수 Partition()을 한 번 적용한 후 왼쪽 부분배열에 존재하는 데이터를 순서대로 기입하시오.\\r\\n(단, 피벗은 맨 왼쪽 원소이고, 오름차순으로 정렬한다.)\\r\\n [30, 45, 20, 15, 40, 25, 35, 10]\",\n        ITERATION: 2019,\n        NO: 6,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"최악, 최악, 최선, 최악, 최선\",\n        TITLE: \"퀵 정렬의 성능\",\n        QUESTION:\n            \"- 분할을 수행할 때마다 항상 피벗이 최솟값 또는 최댓값이 되는 경우: (최선/최악)의 성능\\r\\n- 피벗만 제자리를 잡고 나머지 모든 데이터가 하나의 부분배열이 되는 경우: (최선/최악)의 성능\\r\\n - 피벗이 항상 중간값이 되는 경우: (최선/최악)의 성능\\r\\n- 입력 데이터가 정렬되어 있는 경우: (최선/최악)의 성능\\r\\n- 피벗을 중심으로 항상 동일한 크기의 두 부분배열로 분할되는 경우: (최선/최악)의 성능\\r\\n\",\n        ITERATION: 2019,\n        NO: 10,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"36\",\n        TITLE: \"퀵 정렬 피벗\",\n        QUESTION:\n            \"다음은 입력 크기 38인 배열의 원소를 7개의 그룹으로 구성한 모습이다. 최악 O(n)으로 i번째로 작은 원소를 찾기 위한 선택 문제에서 피벗으로 선택되는 원소는? \\r\\n[9, 6, 35, 39, 15]\\r\\n[24, 70, 95, 50, 1]\\r\\n[97, 84, 77, 28, 10]\\r\\n[22, 27, 11, 31, 62]\\r\\n[54, 81, 5, 34, 4]\\r\\n[89, 60, 29, 2, 75]\\r\\n[18, 36, 80, 7, 53]\\r\\n[25, 66, 43]\",\n        ITERATION: 2019,\n        NO: 11,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"스트링, 상향, 최적, X\",\n        TITLE: \"동적 프로그래밍 방법\",\n        QUESTION:\n            \"- 모든 정점 간의 최단 경로 문제와 ㅇㅇㅇ 편집 거리 문제에 적용된다. \\r\\n-(상향/하향)식 접근 방법 \\r\\n- ㅇㅇ성의 원리가 만족되는 문제에만 적용할 수 있다. \\r\\n- 소문제들은 서로 독립적이어야 한다. (O/X)\",\n        ITERATION: 2019,\n        NO: 12,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 5,\n    },\n    {\n        ANSWER: 13,\n        TITLE: \"피보나치 수열\",\n        QUESTION:\n            \"피보나치 수열 f(n)에서 f(7)은 얼마인가? \\r\\n (단, f(0) = 0, f(1) = 1이다.)\",\n        ITERATION: 2019,\n        NO: 13,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 5,\n    },\n    {\n        ANSWER: 4,\n        TITLE: \"행렬의 연쇄적 곱셈\",\n        QUESTION:\n            \"동적 프로그래밍 방법을 적용하여 n개의 행렬에 대한 연쇄적 곰셈 문제를 해결하는 알고리즘의 시간 복잡도는?\\r\\n1)O(nlogn)\\r\\n2)O(n)\\r\\n3)O(n²)\\r\\n4)O(n³)\",\n        ITERATION: 2019,\n        NO: 14,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 5,\n    },\n    {\n        ANSWER: 4,\n        TITLE: \"플로이드 알고리즘\",\n        QUESTION:\n            \"플로이드 알고리즘의 성능 표현으로 올바른 것은? \\r\\nFloyd (G=(V,E)) { // |V|=n \\r\\nD[][] <- 입력 간선의 인접 행렬로 초기화\\r\\nfor (k=1부터 n까지)\\r\\nfor (i=1부터 n까지)\\r\\nfor (j=1부터 n까지)\\r\\nif (D[i][j] > D[i][k] + D[k][j])\\r\\nD[i][j] = D[i][k] + D[k][j];\\r\\nreturn D[][];\\r\\n}\\r\\n1)O(nlogn)\\r\\n2)O(n)\\r\\n3)O(n²)\\r\\n4)O(n³)\",\n        ITERATION: 2019,\n        NO: 15,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 4,\n    },\n    {\n        ANSWER: \"크루스칼, 프림, 데이크스트라\",\n        TITLE: \"욕심쟁이(greedy) 대표 고리즘\",\n        QUESTION:\n            \"- 최소 신장 트리: ㅇㅇㅇㅇ 알고리즘, ㅇㅇ 알고리즘 \\r\\n- 단일 출발점에 대한 최단 경로: ㅇㅇㅇㅇㅇㅇ 알고리즘\",\n        ITERATION: 2019,\n        NO: 17,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"가중, 작은\",\n        TITLE: \"최소 신장 트리\",\n        QUESTION:\n            \"최소 신장 트리는 신장 트리 중에서 ㅇㅇ치의 합이 가장 (큰/작은) 것\",\n        ITERATION: 2019,\n        NO: 18,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 4,\n    },\n    {\n        ANSWER: \"T6\",\n        TITLE: \"욕심쟁이 방법\",\n        QUESTION:\n            \"욕심쟁이 방법을 적용한 작업 선택 문제에서 기계에 가장 먼저 할당되는 작업은? \\r\\nT1 = (0, 4), T2 = (4, 8), T3 = (6, 9), T4 = (9, 10), T5 = (1, 6), T6 = (1, 3), T7 = (3, 8), T8 = (4, 6)\",\n        ITERATION: 2019,\n        NO: 19,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"비교, 분포\",\n        TITLE: \"정렬 알고리즘\",\n        QUESTION:\n            \"- ㅇㅇ 기반의 알고리즘: 선택 정렬, 버블 정렬, 삽입 정렬, 셸 정렬, 퀵 정렬, 합병 정렬, 힙 정렬 \\r\\n - 데이터의 ㅇㅇ에 기반한 정보를 바탕으로 정을 수행하는 알고리즘: 계수 정렬, 기수 정렬, 버킷 정렬\",\n        ITERATION: 2019,\n        NO: 20,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"유지, 불안정, 안정, 안정, 불안정, 불안정, 안정, 불안정, 안정\",\n        TITLE: \"안정적 정렬\",\n        QUESTION:\n            \"안정적 정렬은 같은 값을 갖는 여러 개의 데이터에 대한 정렬 전의 상대적 위치가 정렬 후에도 그대로 ㅇㅇ되는 정렬이다.\\r\\n - 선택 정렬: (안정/불안정)\\r\\n - 버블 정렬: (안정/불안정)\\r\\n - 삽입 정렬: (안정/불안정)\\r\\n - 셸 정렬: (안정/불안정)\\r\\n - 퀵 정렬: (안정/불안정)\\r\\n - 합병 정렬: (안정/불안정)\\r\\n - 힙 정렬: (안정/불안정)\\r\\n - 데이터 분포 기반의 정렬: (안정/불안정)\",\n        ITERATION: 2019,\n        NO: 21,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"10\",\n        TITLE: \"버블 정렬\",\n        QUESTION:\n            \"다음 데이터에 대해 버블 정렬을 적용하여 오름차순으로 정렬할 때, 인접한 두 데이터 간의 자리바꿈이 발생하는 총 횟수는? \\r\\n [50, 40, 30, 20, 10]\",\n        ITERATION: 2019,\n        NO: 22,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"선택\",\n        TITLE: \"ㅇㅇ 정렬\",\n        QUESTION:\n            \"정렬되지 않은 데이터 중에서 가장 작은 값을 골라서, 이 값과 미정렬 데이터 부분의 첫 번째 원소와 교환하는 방식\",\n        ITERATION: 2019,\n        NO: 23,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"O, 안정, O, O\",\n        TITLE: \"삽입 정렬\",\n        QUESTION:\n            \"- 입력이 정렬된 상태로 주어지는 최선의 경우 수행시간은 O(n)이다. (O/X)\\r\\n- (안정/불안정)적인 정렬 알고리즘\\r\\n- 제자리 정렬 알고리즘이다. (O/X)\\r\\n- 최악의 수행시간은 O(n²)이다. (O/X)\",\n        ITERATION: 2019,\n        NO: 24,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"nlogn, nlogn, 안정, X, O\",\n        TITLE: \"합병 정렬\",\n        QUESTION:\n            \"- 최악의 수행시간은 O((n/nlogn))이다. \\r\\n- 최선의 수행시간은 O((n/nlogn))이다.\\r\\n- (안정/불안정)적인 정렬 알고리즘\\r\\n- 제자리 정렬 알고리즘이다. (O/X)\\r\\n- 분할정복 방법이 적용되었다. (O/X)\",\n        ITERATION: 2019,\n        NO: 25,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"O, nlogn, 불안정, O, O\",\n        TITLE: \"퀵 정렬\",\n        QUESTION:\n            \"- 최악의 수행시간은 O(n²)이다. (O/X)\\r\\n- 최선의 수행시간은 O((n/nlogn))이다.\\r\\n- (안정/불안정)적인 정렬 알고리즘\\r\\n- 제자리 정렬 알고리즘이다. (O/X)\\r\\n- 분할정복 방법이 적용되었다. (O/X)\",\n        ITERATION: 2019,\n        NO: 26,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"제자리, 넘지 않는\",\n        TITLE: \"ㅇㅇㅇ 정렬 알고리즘\",\n        QUESTION:\n            \"입력 데이터를 저장하는 공간 이외에 별도로 필요한 저장 공간이 상수 개를 (넘는/넘지 않는) 정렬 알고리즘\",\n        ITERATION: 2019,\n        NO: 26,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"88\",\n        TITLE: \"힙 정렬\",\n        QUESTION:\n            \"주어진 데이터를 오름차순으로 힙 정렬할 때, 루트 노드에 존재하는 데이터는? \\r\\n [10, 7, 15, 88, 50, 30, 40]\",\n        ITERATION: 2019,\n        NO: 27,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"X, 상수, X, 안정, n\",\n        TITLE: \"기수 정렬\",\n        QUESTION:\n            \"- 비교 기반의 정렬 알고리즘이다. (O/X)\\r\\n - 입력 데이터의 자릿수가 ㅇㅇ일 때 유용하다.\\r\\n - 제자리 정렬 알고리즘이다. (O/X)\\r\\n - (안정/불안정) 정렬 알고리즘이다.\\r\\n - 시간 복잡도는 O((n/n의 제곱))이다.\",\n        ITERATION: 2019,\n        NO: 28,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"비정렬, 작은, O, 1, n, n, 1\",\n        TITLE: \"순차 탐색\",\n        QUESTION:\n            \"- (정렬/비정렬) 데이터에 적합하다.\\r\\n - 크기가 (큰/작은) 데이터에 적합하다.\\r\\n - 리스트 형태의 입력에 언제라도 적용이 가능하다. (O/X)\\r\\n - 탐색 키가 존재하는 경우에는 최소 (1/n)번의 비교가 필요하다.\\r\\n - 탐색 키가 존재하지 않는 경우 항상 (n의 제곱/n)번의 비교가 필요하다.\\r\\n - 탐색과 삭제 연산의 시간 복잡도는 O((n/n의 제곱))이다.\\r\\n - 삽입 연산의 시간 복잡도는 O((1/n/logn))이다.\",\n        ITERATION: 2019,\n        NO: 29,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 3,\n    },\n    {\n        ANSWER: \"정렬, 작은, logn, nlogn, n\",\n        TITLE: \"이진 탐색\",\n        QUESTION:\n            \"- (정렬/비정렬) 데이터에 적합하다.\\r\\n - 크기가 (큰/작은) 데이터에 적합하다.\\r\\n - 탐색 연산의 시간 복잡도는 O((n/logn/nlogn))이다.\\r\\n - 초기화 연산의 시간 복잡도는 O((n/logn/nlogn))이다.\\r\\n - 삽입과 삭제 연산의 시간 복잡도는 O((n/logn/nlogn))이다.\",\n        ITERATION: 2019,\n        NO: 30,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 3,\n    },\n    {\n        ANSWER: \"균형, 검정, 검정, 검정, 작다, 크다\",\n        TITLE: \"레드-블랙 트리(흑적 트리)\",\n        QUESTION:\n            \"흑적 트리는 모든 노드에 대해 다음 성질을 만족하는 이진 트리인 ㅇㅇ 탐색 트리이다. \\r\\n- 모든 노드는 검정이거나 빨강이다. \\r\\n- 루프 노드와 리프 노드는 (검정/빨강)이다.\\r\\n- 빨강 노드의 부모 노드는 항상 (검정/빨강)이다.\\r\\n- 임의의 노드로부터 리프 노드까지의 경로상에는 동일한 개수의 (검정/빨강) 노드가 존재한다.\\r\\n- 한 노드의 왼쪽 서브트리에 있는 모든 키 값은 그 노드의 키값보다 (작다/크다).\\r\\n- 한 노드의 오른쪽 서브트리에 있는 모든 키 값은 그 노드의 키값보다 (크다/작다).\",\n        ITERATION: 2019,\n        NO: 31,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 3,\n    },\n    {\n        ANSWER: 4,\n        TITLE: \"탐색 트리\",\n        QUESTION:\n            \"모든 리프 노드의 레벨이 동일한 트리는? \\r\\n 1) 흑적 트리\\r\\n 2) 이진 탐색 트리\\r\\n 3) 완전 이진 트리\\r\\n 4) B-트리\",\n        ITERATION: 2019,\n        NO: 32,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 3,\n    },\n    {\n        ANSWER: \"1, logn, logn, n, logn, logn, logn\",\n        TITLE: \"탐색 연산의 시간 복잡도\",\n        QUESTION:\n            \"- 이진 탐색 최선: O((1/n/logn))\\r\\n- 이진 탐색 최악: O((n/logn/nlogn))\\r\\n- 이진 탐색 트리 최선: O((1/n/logn))\\r\\n- 이진 탐색 트리 최악: O((n/logn/nlogn))\\r\\n- 2-3-4 트리: O((n/logn/nlogn))\\r\\n- 레드-블랙 트리: O((n/logn/nlogn))\\r\\n- B-트리: O((n/logn/nlogn))\\r\\n\",\n        ITERATION: 2019,\n        NO: 33,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 3,\n    },\n    {\n        ANSWER: 2,\n        TITLE: \"근사 알고리즘\",\n        QUESTION:\n            \"다음 NP-완전 문제의 근사 알고리즘을 통해 해결할 수 있는 문제는? \\r\\n- 주어진 그래프의 최소 신장 트리를 구한다.\\r\\n- 임의의 정점 하나를 루트 노드로 지정해서 최소 신장 트리를 깊이 우선 탐색 순서대로 정점을 나열하고 마지막에 첫 정점을 한 번 더 추가한다.\\r\\n1) 버텍스 커버 문제\\r\\n2) 외판원 문제\\r\\n3) CNF-만족성 문제\\r\\n4) 클리크 판정 문제\",\n        ITERATION: 2019,\n        NO: 35,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 7,\n    },\n\n    //============================== 2018\n    {\n        ANSWER: \"컴퓨터, 명확, O, 0, 1\",\n        TITLE: \"알고리즘의 조건\",\n        QUESTION:\n            \"- 모든 명령은 ㅇㅇㅇ에서 수행 가능해야 한다. \\r\\n- 각 명령은 단순하고 ㅇㅇ해야 한다.\\r\\n- 한정된 수의 단계를 거친 후에는 반드시 끝나야 한다. (O/X)\\r\\n- 외부에서 (0/1)개 이상의 입력을 받아서 (0/1)개 이상의 출력을 생성해야 한다.\",\n        ITERATION: 2018,\n        NO: 2,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: 8,\n        TITLE: \"이진 트리\",\n        QUESTION:\n            \"최대 개수의 노드를 갖는 높이 4인 이진 트리에서 단말 노드의 개수는?\",\n        ITERATION: 2018,\n        NO: 3,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 4,\n    },\n    {\n        ANSWER: \"수행, 4\",\n        TITLE: \"알고리즘의 시간 복잡도\",\n        QUESTION:\n            \"시간 복잡도는 알고리즘의 ㅇㅇ시간이다. 이는 무엇의 함수로 표현하는가? \\r\\n1) 입력 데이터의 값\\r\\n2) 프로그램에 사용된 동적 변수의 개수\\r\\n3) 프로그램 코드의 길이\\r\\n4) 입력 데이터의 크기\",\n        ITERATION: 2018,\n        NO: 4,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"독립, 하향, 분할, 정복, 결합\",\n        TITLE: \"분할정복 방법\",\n        QUESTION:\n            \"- 분할된 작은 문제는 서로 ㅇㅇ적이다.\\r\\n- (상향/하향)식 접근 방법\\r\\n- ㅇㅇ, ㅇㅇ, ㅇㅇ의 처리 과정을 거친다.\",\n        ITERATION: 2018,\n        NO: 6,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"상향, 점화\",\n        TITLE: \"동적 프로그래밍 방법\",\n        QUESTION:\n            \"- (상향/하향)식 접근 방법\\r\\n- ㅇㅇ식을 이용해서 보다 큰 문제의 해를 구한다.\",\n        ITERATION: 2018,\n        NO: 6,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: 4,\n        TITLE: \"퀵 정렬\",\n        QUESTION:\n            \"퀵 정렬 최악의 시간 복잡도에 해당하는 점화식은? \\r\\n1) T(1)=Θ(1), T(n)=2T(n/2)+Θ(n)\\r\\n2) T(1)=Θ(1), T(n)=T(n-1)+Θ(1)\\r\\n3) T(1)=Θ(1), T(n)=T(n/2)+Θ(1)\\r\\n4) T(1)=Θ(1), T(n)=T(n-1)+Θ(n)\",\n        ITERATION: 2018,\n        NO: 8,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: 5,\n        TITLE: \"퀵 정렬\",\n        QUESTION:\n            \"중간값들의 중간값을 사용하는 선택 문제에서 각 그룹은 몇 개의 원소로 구성되는가?\",\n        ITERATION: 2018,\n        NO: 9,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"플로이드, 동적 프로그래밍, 분할정복, 분할정복, 욕심쟁이\",\n        TITLE: \"알고리즘 설계기법\",\n        QUESTION:\n            \"다음의 알고리즘과 설계기법을 매칭하라. \\r\\n - 모든 정점 간의 최단 경로 구하는 알고리즘(ㅇㅇㅇㅇ 알고리즘): (욕심쟁이/분할정복/동적 프로그래밍) 방법\\r\\n - 합병 정렬: (욕심쟁이/분할정복/동적 프로그래밍) 방법\\r\\n - 최솟값과 최댓값을 모두 찾는 알고리즘: (욕심쟁이/분할정복/동적 프로그래밍) 방법\\r\\n - 작업 선택 문제: (욕심쟁이/분할정복/동적 프로그래밍) 방법\",\n        ITERATION: 2018,\n        NO: 10,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: 30,\n        TITLE: \"행렬의 연쇄적 곱셈\",\n        QUESTION:\n            \"다음과 같이 6개의 행렬을 곱할 때, C(1,2)의 값은? \\r\\n M1 x M2 x M3 x M4 x M5 x M6 \\r\\n 5 x 2, 2 x 3, 3 x 4, 4 x 6, 6 x 7, 7 x 8\",\n        ITERATION: 2018,\n        NO: 11,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 5,\n    },\n    {\n        ANSWER: \"이하, 경유, 최단\",\n        TITLE: \"플로이드 알고리즘\",\n        QUESTION:\n            \"모든 정점 간의 최단 경로를 구할 때, d₄₃²은 정점 번호가 2 (이상/이하)인 정점만을 ㅇㅇ하는 정점 4에서 정점 3까지의 ㅇㅇ 경로 길이라고 한다.\",\n        ITERATION: 2018,\n        NO: 12,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 5,\n    },\n    {\n        ANSWER: \"정수\",\n        TITLE: \"동적 프로그래밍 방법\",\n        QUESTION: \"저울 문제에서 추의 무게는 ㅇㅇ이어야 한다.\",\n        ITERATION: 2018,\n        NO: 13,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 5,\n    },\n    {\n        ANSWER: \"X, 큰, 4\",\n        TITLE: \"거스름돈 문제\",\n        QUESTION:\n            \"- 동전의 액면가가 임의로 주어지는 경우에도 욕심쟁이 방법으로 해결할 수 있다. (O/X)\\r\\n 동전의 액면가가 (큰/작은) 것 부터 최대한 사용해서 거스름돈을 만든다.\\r\\n 동전의 종류가 500원, 100원, 50원, 10원이면 거스름돈 750원에 대한 최적해는 ㅇ개이다.\",\n        ITERATION: 2018,\n        NO: 14,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"1\",\n        TITLE: \"최소 신장 트리\",\n        QUESTION:\n            \"다음 중 최소 신장 트리를 구하는 알고리즘은? \\r\\n1) 크루스칼 알고리즘\\r\\n2) 플로이드 알고리즘\\r\\n3) 데이크스트라 알고리즘\\r\\n4) KMP 알고리즘\",\n        ITERATION: 2018,\n        NO: 15,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"t5\",\n        TITLE: \"작업 스케줄링\",\n        QUESTION:\n            \"다음 작업에 대한 작업 스케줄링 문제의 최적해를 구하려고 한다. 가장 먼저 기계에 할당하는 작업은?\\r\\n t1=(2, 5), t2=(6, 9), t3=(4, 9), t4=(1, 4), t5=(0, 7), t6=(9, 10), t7=(7, 10), t8=(5, 8)\",\n        ITERATION: 2018,\n        NO: 16,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"큰, d\",\n        TITLE: \"데이터 압축 - 허프만 코딩\",\n        QUESTION:\n            \"텍스트 abcdbcdcdd를 허프만 코딩으로 인코딩하였을 때 가장 짧은 코드가 부여되는 문자는 빈도수가 가장 (큰/작은) 문자이므로 ㅇ이다.\",\n        ITERATION: 2018,\n        NO: 17,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 6,\n    },\n    {\n        ANSWER: \"X, O, 불안정, O, 작은\",\n        TITLE: \"선택 정렬\",\n        QUESTION:\n            \"- 입력 데이터의 상태에 따라 성능이 달라진다. (O/X)\\r\\n- 입력 데이터와 무관하게 언제나 동일한 시간 복잡도를 갖는다. (O/X)\\r\\n- (안정/불안정)적인 정렬 알고리즘\\r\\n- 제자리 정렬 알고리즘이다. (O/X)\\r\\n- 오름차순 정렬의 경우 주어진 데이터 중에서 가장 (작은/큰) 값부터 골라 차례로 나열한다.\",\n        ITERATION: 2018,\n        NO: 20,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"셸, n의 제곱, nlogn, 불안정, O\",\n        TITLE: \"ㅇ 정렬\",\n        QUESTION:\n            \"- 삽입 정렬의 단점을 보완한 정렬 알고리즘\\r\\n- 최악의 경우 시간 복잡도: O((n/logn/n의 제곱/nlogn))\\r\\n- 최선의 경우 시간 복잡도: O((n/logn/n의 제곱/nlogn))\\r\\n- (안정/불안정)적인 정렬 알고리즘\\r\\n- 제자리 정렬 알고리즘이다. (O/X)\",\n        ITERATION: 2018,\n        NO: 22,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: 4,\n        TITLE: \"정렬 알고리즘\",\n        QUESTION:\n            \"평균적인 성능이 O(nlogn)인 안정적인 알고리즘은? \\r\\n1) 퀵 정렬\\r\\n2) 셸 정렬\\r\\n3) 힙 정렬\\r\\n4) 합병 정렬\",\n        ITERATION: 2018,\n        NO: 23,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: 4,\n        TITLE: \"정렬 알고리즘\",\n        QUESTION:\n            \"비교 기반 알고리즘 중에서 정렬 과정에서 입력 크기에 비례하는 만큼의 추가적인 저장 공간을 요구하는 것은? \\r\\n1) 퀵 정렬\\r\\n2) 셸 정렬\\r\\n3) 힙 정렬\\r\\n4) 합병 정렬\",\n        ITERATION: 2018,\n        NO: 24,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"초기 힙, 크, 최대, 재구성\",\n        TITLE: \"힙 정렬\",\n        QUESTION:\n            \"- 첫 번째 단계: 주어진 배열을 ㅇㅇ ㅇ으로 변환한다. 각 노드의 값은 자식 노드의 값보다 (크/작)거나 같다. \\r\\n- 두 번째 단계: 데이터의 개수만큼 반복하면서 (최소/최대)값을 삭제하고 힙으로 ㅇㅇㅇ하는 과정\",\n        ITERATION: 2018,\n        NO: 25,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"70, 60, 50, 40, 20, 30, 10, 80\",\n        TITLE: \"힙 정렬\",\n        QUESTION:\n            \"다음 배열에 대해 오름차순으로 정렬하는 힙 정렬의 두 번째 단계를 한 번 수행한 후의 배열의 상태를 올바르게 표현하면? \\r\\n[80, 60, 70, 40, 20, 30, 50, 10]\",\n        ITERATION: 2018,\n        NO: 25,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"계수, 선형, 안정, X\",\n        TITLE: \"ㅇㅇ 정렬\",\n        QUESTION:\n            \"- 주어진 원소 중에서 자신보다 작거나 같은 값을 갖는 원소의 개수를 계산하여 정렬할 위치를 찾아 정렬하는 방법\\r\\n- ㅇㅇ 시간의 성능을 가짐.\\r\\n- (안정/불안정)적인 정렬 알고리즘\\r\\n- 제자리 정렬 알고리즘이다. (O/X)\",\n        ITERATION: 2018,\n        NO: 26,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"h, n, logn\",\n        TITLE: \"이진 탐색 트리 탐색 연산\",\n        QUESTION:\n            \"- 높이가 h라면 탐색 연산의 시간 복잡도는 O((h/logh/2h/0.5h))이다. \\r\\n- 최악의 탐색 성능을 갖는 경우, 입력 크기 n에 대한 시간 복잡도는 O((n/logn/n의 제곱/nlogn))\\r\\n- 최선의 탐색 성능을 갖는 경우, 시간 복잡도는 O((n/logn/n의 제곱/nlogn))\",\n        ITERATION: 2018,\n        NO: 27,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 3,\n    },\n    {\n        ANSWER: \"리프, 후속자\",\n        TITLE: \"이진 탐색 트리 삭제 연산\",\n        QUESTION:\n            \"- 자식 노드가 없는 경우: 삭제되는 노드가 ㅇㅇ 노드이므로 남은 노드가 없어 위치 조절 필요없다. \\r\\n- 자식 노드가 하나인 경우: 자식 노드를 삭제되는 노드의 위치로 올리면서 서브 트리 전체도 따라 올린다.\\r\\n- 자식 노드가 2개인 경우: 삭제 노드의 바로 다음 키값을 갖는 노드인 ㅇㅇㅇ 노드를 삭제 노드의 위치로 올린다.\",\n        ITERATION: 2018,\n        NO: 28,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 3,\n    },\n    {\n        ANSWER: \"2t-1, t-1\",\n        TITLE: \"B-트리의 삽입 연산\",\n        QUESTION:\n            \"- 탐색할 자식 노드가 없으면 현재 리프 노드에 키로 추가한다. \\r\\n- 탐색 과정에서 키의 개수가 (t/2t/2t-1/2t+1)인 노드를 만다면 항상 노드 분할이 발생한다.\\r\\n- 노드 분할은 노드 하나를 (t/t-1/t+1)개의 키를 갖는 2개의 노드로 분할하는 것으로, 가운데 키를 부모 노드로 올린다.\",\n        ITERATION: 2018,\n        NO: 30,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 3,\n    },\n    {\n        ANSWER: \"개방, 폐쇄, 버, 선, 이, 이\",\n        TITLE: \"해시 테이블 - 충돌 해결 방법\",\n        QUESTION:\n            \"- ㅇㅇ 해싱: 충돌된 데이터를 해시 테이블 밖의 별도의 장소에 저장 \\r\\n- ㅇㅇ 해싱: 충돌된 데이터를 해시 테이블 내의 다른 위치에 저장, ㅇ킷 해싱, ㅇ형 탐사, ㅇ차 탐사, ㅇ중 해싱 등\",\n        ITERATION: 2018,\n        NO: 31,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 3,\n    },\n    {\n        ANSWER: \"주소, 제산, 비닝, 중간\",\n        TITLE: \"해시 함수\",\n        QUESTION:\n            \"- 키 값을 해시 테이블의 ㅇㅇ로 변환하는 함수 \\r\\n- 종류: ㅇㅇ 잔여법, ㅇㅇ, ㅇㅇ 제곱법 등\",\n        ITERATION: 2018,\n        NO: 31,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 3,\n    },\n    {\n        ANSWER: \"사이클, 정규곱, 클리크, 정점, 최소, 외판원, 1, 무한\",\n        TITLE: \"NP-완전 문제\",\n        QUESTION:\n            \"- 해밀토니언 ㅇㅇㅇ 문제: 무방향 그래프 G가 주어졌을 때, G의 모든 정점을 한 번씩만 지나가는 사이클이 존재하는지 판정 \\r\\n- CNF 만족성 문제: ㅇㅇㅇ형으로 주어진 논리식을 참으로 만들 수 있는지 판정 \\r\\n- ㅇㅇㅇ 판정 문제: 그래프 G가 크기가 k인 클리크(완전 그래프가 되는 G의 부분 그래프)를 갖는지 판정. 크기가 k인 클리크는 ㅇㅇ이 k개인 클리크이다. \\r\\n- 버텍스 커버 문제: 그래프가 크기 k인 버텍스 커버(그래프의 모든 간선이 부수하는 (최소/최대) 크기의 부분 집합)를 갖는지 판정 \\r\\n- ㅇㅇㅇ 문제: 비용 R 이하로 모든 도시를 한 번씩만 방문하고 처음 도시로 돌아오는 방법이 존재하는지 판정 \\r\\n- 통 채우기 문제: 용량이 (1/무한)인 (1/무한)개의 빈 통에 다양한 크기의 물체를 전부 담을 수 있는지 판정\",\n        ITERATION: 2018,\n        NO: 32,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 7,\n    },\n    {\n        ANSWER: \"출발, 플로이드\",\n        TITLE: \"그래프 - 최단 경로\",\n        QUESTION:\n            \"- 특정한 하나의 정점을 ㅇㅇ점으로 지정해서 다른 모든 정점으로의 최단 경로를 구하는 알고리즘: 데이크스트라, 벨만-포드 \\r\\n- 모든 정점 쌍 간의 최단 경로를 구하는 알고리즘: ㅇㅇㅇㅇ\",\n        ITERATION: 2018,\n        NO: 32,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 4,\n    },\n    {\n        ANSWER: \"다항, 속한다\",\n        TITLE: \"NP-완전 문제\",\n        QUESTION:\n            \"클래스 NP에 속하는 모든 문제가 문제 A로 ㅇㅇ 시간에 변환되면서, 문제 A가 클래스 NP에 (속한다/속하지 않는다)는 것을 보여야 한다.\",\n        ITERATION: 2018,\n        NO: 33,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 7,\n    },\n    {\n        ANSWER: \"교차\",\n        TITLE: \"유전 알고리즘의 연산\",\n        QUESTION:\n            \"ㅇㅇ: 부모의 형질을 나누어 갖는 연산으로, 다른 최적화 방법과 구별짓는 연산이다.\",\n        ITERATION: 2018,\n        NO: 34,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"순열\",\n        TITLE: \"NP-완전 문제\",\n        QUESTION: \"ㅇㅇ 인코딩: 외판원 문제에 가장 적합한 염색체 인코딩 방법\",\n        ITERATION: 2018,\n        NO: 34,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 7,\n    },\n\n    //============================== 2017\n    {\n        ANSWER: 4,\n        TITLE: \"이진 트리\",\n        QUESTION:\n            \"깊이가 k인 이진 트리가 가질 수 있는 노드의 최대 개수는? \\r\\n1) 2^(k-1)\\r\\n2) 2^(k-1)-1\\r\\n3) 2^k\\r\\n4) 2^k-1\",\n        ITERATION: 2017,\n        NO: 2,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"분할정복, 욕심쟁이, NP-완전 문제\",\n        TITLE: \"알고리즘 설계기법\",\n        QUESTION:\n            \"- 이진 탐색: (욕심쟁이/분할정복)\\r\\n - 거스름돈 문제: (욕심쟁이/분할정복) \\r\\n - 0/1 배낭 문제: (동적 프로그래밍/NP-완전 문제)\",\n        ITERATION: 2017,\n        NO: 3,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: 4,\n        TITLE: \"버블 정렬\",\n        QUESTION:\n            \"한 단계의 수행 결과가 다음과 같을 때, 바로 다음 단계의 수행 결과를 얻기 위해서는 자리바꿈이 몇 번 발생하는가? \\r\\n 5(정렬), 35, 20, 10, 40, 25, 15, 30\",\n        ITERATION: 2017,\n        NO: 8,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"logn, n, logn\",\n        TITLE: \"탐색 알고리즘 시간 복잡도\",\n        QUESTION:\n            \"- 이진 탐색: O((n/logn/nlogn))\\r\\n - 순차 탐색: O((n/logn/nlogn)) \\r\\n - 흑적 트리: O((n/logn/nlogn))\",\n        ITERATION: 2017,\n        NO: 19,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 3,\n    },\n    {\n        ANSWER: \"3, 4, X\",\n        TITLE: \"2-3-4 트리\",\n        QUESTION:\n            \"- 4-노드는 ㅇ개의 키와 ㅇ개의 자식을 갖는다. \\r\\n- 경사 트리가 발생한다. (O/X)\",\n        ITERATION: 2017,\n        NO: 22,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 3,\n    },\n    {\n        ANSWER: \"양, 독립된\",\n        TITLE: \"강연결 성분\",\n        QUESTION:\n            \"- 주어진 방향 그래프에서 임의의 두 정점 사이에 (단/양)방향의 경로가 존재하는 최대 부분 그래프 \\r\\n- 단방향 경로로 연결되는 정점은 (독립된/같은) 강연결 성분이다.\",\n        ITERATION: 2017,\n        NO: 25,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 4,\n    },\n    {\n        ANSWER: 23,\n        TITLE: \"허프만 코딩\",\n        QUESTION:\n            \"스트링 [abracadabra]를 허프만 코딩으로 압축하였을 때 인코딩된 메시지의 길이는 몇 비트인가?\",\n        ITERATION: 2017,\n        NO: 30,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 6,\n    },\n    {\n        ANSWER: \"블록, 양자, 엔트로피\",\n        TITLE: \"JPEG 표준의 압축 과정\",\n        QUESTION: \"ㅇㅇ화 -> DCT -> ㅇㅇ화 -> ㅇㅇㅇㅇ 코딩\",\n        ITERATION: 2017,\n        NO: 31,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 6,\n    },\n    {\n        ANSWER: 3,\n        TITLE: \"알고리즘 설계 기법\",\n        QUESTION:\n            \"문자열 X를 문자열 Y로 변환하는 데 필요한 전체 편집 연산에 대한 최소 비용을 계산하는 문제를 가장 효과적으로 해결할 수 있는 기법은? \\r\\n1) 분할정복 방법\\r\\n2) 상각 분석 방법\\r\\n3) 동적 프로그래밍 방법\\r\\n4) 욕심쟁이 방법\",\n        ITERATION: 2017,\n        NO: 32,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 1,\n    },\n    {\n        ANSWER: \"최적, 점화, 작은, 큰\",\n        TITLE: \"동적 프로그래밍\",\n        QUESTION:\n            \"주어진 문제가 ㅇㅇ성의 원리를 만족하면 적용 가능하며, 다음과 같은 과정을 따른다.\\r\\n - 주어진 문제에 대해서 최적해를 제공하는 ㅇㅇ식을 도출한다. \\r\\n - 가장 (작은/큰) 문제부터 해를 구한 뒤 이를 테이블에 저장한다. \\r\\n - 테이블에 저장된 문제의 해를 이용하여 점차적으로 (큰/작은) 문제의 해를 구한다.\",\n        ITERATION: 2017,\n        NO: 33,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 5,\n    },\n\n    //============================== 2016\n    {\n        ANSWER: 5,\n        TITLE: \"퀵 정렬\",\n        QUESTION:\n            \"다음 배열에 퀵 정렬의 분할 함수를 한 번 적용하였을 때 왼쪽 부분배열에 존재하는 데이터의 개수는? \\r\\n [26, 35, 15, 77, 10, 61, 11, 59, 17, 48, 19, 40, Infinity]\",\n        ITERATION: 2016,\n        NO: 13,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"기수\",\n        TITLE: \"ㅇㅇ 정렬\",\n        QUESTION:\n            \"주어진 원소들의 키 값을 자릿수별로 나누어서 낮은 자리부터 높은 자리로 반복해서 안정적인 정렬 알고리즘을 적용하여 정렬을 수행\",\n        ITERATION: 2016,\n        NO: 15,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: 5,\n        TITLE: \"이진 탐색 트리\",\n        QUESTION:\n            \"다음과 가튼 값들을 순서대로 삽입하여 이진 탐색 트리를 생성하였다. \\r\\n 이때 키 값 10을 탐색하는 데 필요한 최소의 비교 회수는?\",\n        ITERATION: 2016,\n        NO: 20,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 3,\n    },\n    {\n        ANSWER: 4,\n        TITLE: \"스트링 매칭\",\n        QUESTION:\n            \"브루트-포스 스트링 매칭 알고리즘에서 텍스트가 0000000001일 때, 비교횟수가 가장 적은 패턴의 형태는?\\r\\n1) 0001\\r\\n2) 0011\\r\\n3) 0111\\r\\n4) 1111\",\n        ITERATION: 2016,\n        NO: 28,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 6,\n    },\n    {\n        ANSWER: 3,\n        TITLE: \"스트링 매칭\",\n        QUESTION:\n            \"텍스트의 부분 스트링의 해시 값을 계산하여 그 값이 패턴의 해시 값과 일치하는지 비교하는 방식의 스트링 매칭 방법은?\\r\\n1) 보이어-무어 알고리즘\\r\\n2) 크루스칼 알고리즘\\r\\n3) 라빈-카프 알고리즘\\r\\n4) KMP 알고리즘\",\n        ITERATION: 2016,\n        NO: 29,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 6,\n    },\n    {\n        ANSWER: 4,\n        TITLE: \"문자열 압축\",\n        QUESTION:\n            \"한 번 나왔던 문자열이 다시 나오는 경우 문자열 대신 앞서 나온 위치와 길이로 변환하여 압축하는 방법?\\r\\n1) JPEG\\r\\n2) RLE\\r\\n3) MPEG\\r\\n4) LZ77\",\n        ITERATION: 2016,\n        NO: 30,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 6,\n    },\n    {\n        ANSWER: \"양자\",\n        TITLE: \"JPEG\",\n        QUESTION:\n            \"- ㅇㅇ화: JPEG는 손실 압축 방법으로, 처리 과정 중에서 데이터의 손실이 발생하는 단게\",\n        ITERATION: 2016,\n        NO: 31,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 6,\n    },\n    {\n        ANSWER: 4,\n        TITLE: \"PRAM\",\n        QUESTION:\n            \"PRAM 모델 중에서 데이터 관점에서 가장 현실적인 방식은?\\r\\n1) ERCW\\r\\n2) EREW\\r\\n3) CRCW\\r\\n4) CREW\",\n        ITERATION: 2016,\n        NO: 34,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 7,\n    },\n\n    //============================== 2015\n    {\n        ANSWER: 1,\n        TITLE: \"정렬\",\n        QUESTION:\n            \"정렬을 수행하는 과정에서 내부적으로 다른 정렬 방법을 사용하는 것은?\\r\\n1) 기수 정렬\\r\\n2) 계수 정렬\\r\\n3) 삽입 정렬\\r\\n4) 합병 정렬\",\n        ITERATION: 2015,\n        NO: 9,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 2,\n    },\n    {\n        ANSWER: \"너비\",\n        TITLE: \"ㅇㅇ 우선 탐색\",\n        QUESTION:\n            \"주변 정점 중에서 오래된 것을 우선적으로 방문하는 그래프 순회 방법\",\n        ITERATION: 2015,\n        NO: 17,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 4,\n    },\n    {\n        ANSWER: 1,\n        TITLE: \"브루트-포스 스트링 매칭 알고리즘\",\n        QUESTION:\n            \"텍스트가 0000000001일 때 비교 횟수가 가장 많은 패턴의 형태는?\\r\\n1) 0001\\r\\n2) 0011\\r\\n3) 0111\\r\\n4) 1111\",\n        ITERATION: 2015,\n        NO: 22,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 6,\n    },\n    {\n        ANSWER: \"보이어-무어\",\n        TITLE: \"스트링 매칭\",\n        QUESTION:\n            \"- (보이어-무어/라빈-카프) 알고리즘: 불일치 문자 방법과 일치 접미부 방법 사용\",\n        ITERATION: 2015,\n        NO: 23,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 6,\n    },\n    {\n        ANSWER: \"결정론, 다항\",\n        TITLE: \"클래스 P\",\n        QUESTION:\n            \"(결정론/비결정론)적 튜링 기계에 의해 ㅇㅇ식 시간에 풀 수 있는 모든 판정 문제의 집합\",\n        ITERATION: 2015,\n        NO: 29,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 7,\n    },\n    {\n        ANSWER: \"변환\",\n        TITLE: \"ㅇㅇ\",\n        QUESTION:\n            \"문제 A의 입력과 출력을 문제 B의 입력과 출력 형태로 바꿀 수 있고\\r\\n 문제 B를 해결하는 알고리즘을 적용함으로써 궁극적으로 문제 A를 해결할 수 있다.\",\n        ITERATION: 2015,\n        NO: 30,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 7,\n    },\n    {\n        ANSWER: 3,\n        TITLE: \"PRAM\",\n        QUESTION:\n            \"PRAM 모델을 메모리 접근 방식에 따라 구분할 때\\r\\n 여러 프로세서가 메모리의 같은 위치에 동시에 접근하여 읽고 쓸 수 있는 방식은?\\r\\n1) ERCW\\r\\n2) EREW\\r\\n3) CRCW\\r\\n4) CREW\",\n        ITERATION: 2016,\n        NO: 31,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: 7,\n    },\n\n    //============================== 보안\n    //============================== 2019\n    {\n        ANSWER: \"전치, 순서, 치환\",\n        TITLE: \"고대 암호\",\n        QUESTION:\n            \"- ㅇㅇ법: 평문에 있는 문자들의 ㅇㅇ를 바꿈으로써 암호화하는 기법 \\r\\n - ㅇㅇ법: 평문의 문자들을 다른 문자로 치환함으로써 암호화하는 기법\",\n        ITERATION: 2019,\n        NO: 40,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"전치, 치환, 치환\",\n        TITLE: \"고대 암호\",\n        QUESTION:\n            \"- 스파르타의 봉 암호: (전치/치환)법 \\r\\n - 시저 암호: (전치/치환)법 \\r\\n - 시프트 암호: 알파벳에 대해 26가지 서로 다른 키가 존재하는 (전치/치환)법\",\n        ITERATION: 2019,\n        NO: 40,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"같은, 빠름, 블록, 스트림\",\n        TITLE: \"대칭키 암호\",\n        QUESTION:\n            \"- 암호화와 복호화에 (같은/다른) 키를 사용하는 방식 \\r\\n - 공개키 암호에 비해 속도가 (빠름/느림).\\r\\n - ㅇㅇ 암호와 평문과 키를 비트 단위로 XOR하여 암호문을 얻는 ㅇㅇㅇ 암호로 나뉨.\",\n        ITERATION: 2019,\n        NO: 41,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"다른, 누구나, 암호, 본인만, 복호\",\n        TITLE: \"공개키 암호\",\n        QUESTION:\n            \"- 암호화와 복호화에 (같은/다른) 키를 사용하는 방식 \\r\\n - 공개키: (본인만/누구나) 공개키를 이용하여 (암호/복호)화 가능 \\r\\n - 개인키: (본인만/누구나) 공개키를 이용하여 (암호/복호)화 가능\",\n        ITERATION: 2019,\n        NO: 41,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"랜섬웨어\",\n        TITLE: \"ㅇㅇㅇㅇ\",\n        QUESTION:\n            \"사용자의 문서 파일 등을 암호화한 후 암호를 풀기 위해서는 비트코인 등을 송금하도록 유도하는 악성코드\",\n        ITERATION: 2019,\n        NO: 45,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"스푸핑\",\n        TITLE: \"ㅇㅇㅇ\",\n        QUESTION:\n            \"피해 호스트가 신뢰하는 호스트로 가정하여 정보를 수집하거나 가로채는 방식의 공격\",\n        ITERATION: 2019,\n        NO: 46,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"분산\",\n        TITLE: \"ㅇㅇ 서비스 공격\",\n        QUESTION:\n            \"여러 대의 공격자를 분산적으로 배치해 동시에 대량의 데이터를 전송하여 \\r\\n  특정 서비스나 자원의 가용성을 떨어트리는 결과를 초래하는 유형의 공격\",\n        ITERATION: 2019,\n        NO: 47,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"사전\",\n        TITLE: \"ㅇㅇ 공격\",\n        QUESTION:\n            \"ID와 패스워드가 될 가능성이 있는 단어를 미리 모아두고 이 단어를 대입하며 계정을 크랙하는 공격\",\n        ITERATION: 2019,\n        NO: 48,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"시그니처, 통계적, X\",\n        TITLE: \"침입탐지 시스템(IDS)\",\n        QUESTION:\n            \"- ㅇㅇㅇㅇ 분석: 알려진 공격에 대한 패턴을 활용하여 침입을 탐지. 알려지지 않은 공격은 대처 불가 \\r\\n - ㅇㅇㅇ 분석: 정상적인 행위 패턴으로부터 편차를 찾아 판정. 잘못된 경고 신호를 보낼 가능성 높음. \\r\\n - 무결성 분석: 실시간 대응에 도움 (O/X)\",\n        ITERATION: 2019,\n        NO: 50,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"클리어, 암호, 암호\",\n        TITLE: \"S/MIME 메시지 구성\",\n        QUESTION:\n            \"- 서명된 데이터: 콘텐트와 전자서명을 base64로 부호화 \\r\\n- ㅇㅇㅇ 서명 데이터: 전자서명만 base64로 부호화 \\r\\n- 서명 및 봉인된 데이터: ㅇㅇ화된 데이터는 서명될 수 있고 서명된 데이터나 클리어 서명 데이터는 ㅇㅇ화될 수 있음.\",\n        ITERATION: 2019,\n        NO: 54,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: 3,\n        TITLE: \"웹 보안\",\n        QUESTION:\n            \"URL에 사용자 ID를 포함하도록 웹 서비스를 구성한 경우 이를 통한 공격을 일컫는 위협 요소?\\r\\n1) SQL Injection\\r\\n2) 크로스 사이트 스크립팅(XSS)\\r\\n3) 접근제어 실패\\r\\n4) 웹 클라이언트 공격\",\n        ITERATION: 2019,\n        NO: 56,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n\n    //============================== 2018\n    {\n        ANSWER: \"무결\",\n        TITLE: \"정보보호의 목표\",\n        QUESTION:\n            \"ㅇㅇ성: 허락되지 않은 자가 정보를 함부로 수정할 수 없도록 하는 것\",\n        ITERATION: 2018,\n        NO: 37,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"웜, 트로이, 스캐닝\",\n        TITLE: \"악성코드\",\n        QUESTION:\n            \"- (바이러스/웜): 네트워크를 통해 스스로 감염되며 숙주가 필요 없음.\\r\\n- ㅇㅇㅇ 목마: 정상적인 기능을 하는 프로그램으로 가장하여 프로그램 내에 숨어 의도하지 않은 기능을 수행\\r\\n- ㅇㅇㅇ : 공격대상 호스트들이나 네트워크에 대한 취약점을 발견하기 위한 사전 정보수집 활동\",\n        ITERATION: 2018,\n        NO: 43,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"정보, 권한, 공격, 재침입\",\n        TITLE: \"서버의 침입 및 정보유출 단계\",\n        QUESTION:\n            \"ㅇㅇ 획득 단계 -> ㅇㅇ 획득 단계 -> ㅇㅇ 단계 -> ㅇㅇㅇ 단계\",\n        ITERATION: 2018,\n        NO: 46,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"시스템, 관리자, 침입, 백도어, 유출, 비권한\",\n        TITLE: \"서버의 침입 및 정보유출 단계\",\n        QUESTION:\n            \"- 정보 획득 단계: 공격 대상 ㅇㅇㅇ 결정 \\r\\n- 권한 획득 단계: 일반 사용자와 ㅇㅇㅇ 권한 획득 \\r\\n- 공격 단계: ㅇㅇ 흔적 지우고 ㅇㅇㅇ 설치 \\r\\n- 재침입 단계: 다른 시스템 공격, 정보 변경 또는 ㅇㅇ, 다른 ㅇㅇㅇ 행위 수행\",\n        ITERATION: 2018,\n        NO: 46,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: 3,\n        TITLE: \"정보 유출 공격\",\n        QUESTION:\n            \"사람을 속여서 민감한 정보를 유츨하게 하는 공격은?\\r\\n1) 버퍼 오버플로 공격\\r\\n2) 사전 공격\\r\\n3) 사회공학적인 공격\\r\\n4) 레이스 컨디션 공격\",\n        ITERATION: 2018,\n        NO: 47,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: 3,\n        TITLE: \"방화벽 구성 방식\",\n        QUESTION:\n            \"강력한 로그인, 감시 기능이 있으며 프락시 서버를 활용하여 확장성이 우수하지만 속도가 빠르지 않은 방화벽의 구성 방식은?\\r\\n1) 패킷 필터링\\r\\n2) 서킷 게이트웨이\\r\\n3) 애플리케이션 게이트웨이\\r\\n4) 하이브리드 방식\",\n        ITERATION: 2018,\n        NO: 48,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"공중, 사설\",\n        TITLE: \"가상사설망(VPN)\",\n        QUESTION:\n            \"(공중/사설)망을 이용하여 (공중/사설)망처럼 직접 운용 관리하는 것\",\n        ITERATION: 2018,\n        NO: 51,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"인증, 기밀성, 압축, 이메일\",\n        TITLE: \"PGP 보안 서비스와 알고리즘\",\n        QUESTION:\n            \"- ㅇㅇ: SHA와 DSA 또는 RSA의 결합 \\r\\n - ㅇㅇㅇ: 메시지 암호화를 위해 대칭키인 TDEA, AES, IDEA와 공개키인 RSA를 사용 \\r\\n - ㅇㅇ: ZIP 사용\\r\\n - ㅇㅇㅇ 호환성: 기수 64 변환\",\n        ITERATION: 2018,\n        NO: 52,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"증거, 포장, 분석, 검토, 보고서\",\n        TITLE: \"디지털 포렌식 수행 과정\",\n        QUESTION:\n            \"사전 준비 -> ㅇㅇ 수집 -> ㅇㅇ 및 이송 -> 조사 ㅇㅇ -> 정밀 ㅇㅇ -> ㅇㅇㅇ 작성\",\n        ITERATION: 2018,\n        NO: 58,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n\n    //============================== 2017\n    {\n        ANSWER: \"해시 함수, 블록 암호\",\n        TITLE: \"메시지 인증 알고리즘\",\n        QUESTION:\n            \"- HMAC: ㅇㅇ ㅇㅇ에 기반을 둠.\\r\\n - CMAC: ㅇㅇ ㅇㅇ에 기반을 둠.\",\n        ITERATION: 2017,\n        NO: 42,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"스니핑\",\n        TITLE: \"사이버 공격\",\n        QUESTION:\n            \"- ㅇㅇㅇ: 네트워크상의 데이터를 도청하는 행위를 일컫는 사이버 공격 방식\",\n        ITERATION: 2017,\n        NO: 46,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"수동, 접속, 능동, 무결\",\n        TITLE: \"네트워크 보안\",\n        QUESTION:\n            \"- ㅇㅇ적 공격: 통신회선상의 정보를 무단으로 취득하는 행위로, 방어를 위해 제3자의 ㅇㅇ시도를 방지함.\\r\\n - ㅇㅇ적 공격: 통신회선상의 정보를 변조 및 위조하는 행위로 수신 측에서 데이터에 대한 ㅇㅇ성을 확인해 방어함.\",\n        ITERATION: 2017,\n        NO: 48,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: 4,\n        TITLE: \"보안시스템\",\n        QUESTION:\n            \"침입차단 시스템의 구축 형태 중 중립적인 네트워크인 비무장지대(DMZ)를 구축하는 것은?\\r\\n1) 스크리닝 라우터\\r\\n2) 베스천 호스트\\r\\n3) 스크린 호스트 게이트웨이\\r\\n4) 스크린 서브넷 게이트웨이\",\n        ITERATION: 2017,\n        NO: 51,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"전자서명, 세션, 해시함수, 암호\",\n        TITLE: \"S/MIME 알고리즘\",\n        QUESTION:\n            \"- ㅇㅇㅇㅇ: RSA와 ECDSA 사용\\r\\n- ㅇㅇ키 분배: RSA와 ECDH 사용\\r\\n- ㅇㅇㅇㅇ: SHA 사용\\r\\n- 메시지 ㅇㅇ화: AES사용\",\n        ITERATION: 2017,\n        NO: 55,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: 1,\n        TITLE: \"보안시스템\",\n        QUESTION:\n            \"무선 LAN 환경에서 기밀성을 제공하기 위한 알고리즘이지만 현재는 취약성이 드러나 사용하지 않는 것은?\\r\\n1) WEP\\r\\n2) RSN\\r\\n3) EAP\\r\\n4) WPA2\",\n        ITERATION: 2017,\n        NO: 58,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n\n    //============================== 2016\n    {\n        ANSWER: \"바이러스\",\n        TITLE: \"악성코드\",\n        QUESTION:\n            \"시스템이나 사용자의 파일에 자신을 복제하고 그 컴퓨터 시스템 내에서 증식하거나 시스템을 파괴하는 것은?\",\n        ITERATION: 2016,\n        NO: 37,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"TLS\",\n        TITLE: \"ㅇㅇㅇ\",\n        QUESTION:\n            \"SSL 3.0을 기반으로 한 업그레이드 프로토콜로 트랜스포트 계층에 적용하는 보안 프로토콜\",\n        ITERATION: 2016,\n        NO: 43,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"서명, 압축, 암호, 64\",\n        TITLE: \"PGP 송신측 전송 과정\",\n        QUESTION:\n            \"해시코드를 사용하여 ㅇㅇ을 생성 -> ㅇㅇ -> ㅇㅇ화 -> 기수 ㅇㅇ 형식으로 변환\",\n        ITERATION: 2016,\n        NO: 44,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"이진, 복호, 압축, 비교\",\n        TITLE: \"PGP 수신측 전송 과정\",\n        QUESTION:\n            \"ㅇㅇ 형식으로 변환 -> ㅇㅇ화 -> ㅇㅇ 해제 -> 서명으로부터 복구한 해시코드를 자신이 계산한 해시코드와 ㅇㅇ\",\n        ITERATION: 2016,\n        NO: 44,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: 3,\n        TITLE: \"보안 시스템\",\n        QUESTION:\n            \"허가받지 않은 접근이나 해킹 시도를 감지하여 자동으로 대응 작업을 수행하여 행위를 중지시키는 시스템은?\\r\\n1) 침입탐지 시스템(IDS)\\r\\n2) 침입차단 시스템(Firewall)\\r\\n3) 침입방지 시스템(IPS)\\r\\n4) 가상사설망(VPN)\",\n        ITERATION: 2016,\n        NO: 51,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"무결성\",\n        TITLE: \"ㅇㅇㅇ 분석\",\n        QUESTION:\n            \"- 파일이나 객체의 어떤 측면이 변경되었는지 초점\\r\\n- 해시 알고리즘 같은 강력한 암호 매커니즘 사용\",\n        ITERATION: 2016,\n        NO: 53,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: 1,\n        TITLE: \"VPN\",\n        QUESTION:\n            \"공중망을 통하여 기업과 전략적인 업무파트너 기업 사이만 연결한 VPN은?\\r\\n1) 익스트라넷 VPN\\r\\n2) 원격접속 VPN\\r\\n3) 인트라넷 VPN\\r\\n4) 복합형 VPN\",\n        ITERATION: 2016,\n        NO: 57,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n\n    //============================== 2015\n    {\n        ANSWER: \"스니핑\",\n        TITLE: \"ㅇㅇㅇ\",\n        QUESTION:\n            \"Passive의 경우 무차별 모드를 이용하여 패킷 내의 정보를 조작 없이 단순히 도청하는 것이며, \\r\\n Active의 경우 ARP 스푸핑을 이용하여 공격 대상자들의 패킷 방향을 조작하여 내용을 훔쳐보거나 변조하는 방식\",\n        ITERATION: 2015,\n        NO: 38,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n    {\n        ANSWER: \"대응, 능동, 소프트웨어\",\n        TITLE: \"침입방지 시스템\",\n        QUESTION:\n            \"- 공격탐지 시 자동으로 ㅇㅇ작업을 수행하여 행위를 중지시키는 시스템 \\r\\n - 침입탐지 시스템과는 대비되어 (수동/능동)적으로 동작 \\r\\n- 호스트 기반 침입방지 시스템은 (소프트웨어/하드웨어) 제품이 일반적임.\",\n        ITERATION: 2015,\n        NO: 55,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"보안\",\n    },\n\n    //============================== 유비쿼터스\n    {\n        ANSWER: 4,\n        TITLE: \"유비쿼터스\",\n        QUESTION:\n            \"물리공간과 전자공간의 연계를 위한 관점에 포함되지 않는 것은? \\r\\n1) 사물-컴퓨터-사람의 네트워크 연결\\r\\n2) 사물의 인식\\r\\n3) 물리적 속성과 전자적 특성 간의 연계\\r\\n4) 인공지능 기반의 전자공간\",\n        ITERATION: \"연습문제\",\n        NO: 2,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"유비\",\n    },\n    {\n        ANSWER: \"사물, 컴퓨터, 사람\",\n        TITLE: \"유비쿼터스 환경\",\n        QUESTION:\n            \"전자공간과 물리공간의 연계는 물리공간의 (사람/사물/컴퓨터)와 전자공간의 (사람/사물/컴퓨터), \\r\\n  양쪽에 존재하는 (사람/사물/컴퓨터) 간의 제한 없는 통신 네트워크를 기반으로 하며 \\r\\n 물리공간에 존재하는 장소, 사물, 사람의 물리적 속성에 대한 인식이 가능하고, \\r\\n  러한 물리적 속성과 전자공간상의 전자적 속성이 양방향으로 상호작용할 수 있는 기능 중심의 환경\",\n        ITERATION: \"연습문제\",\n        NO: 3,\n        IS_CORRECT: false,\n        IS_ENTERED: false,\n        SUBJECT: \"유비\",\n    },\n];\n","import { render } from \"./App.vue?vue&type=template&id=feb50b7e\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=feb50b7e&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { createApp } from \"vue\";\nimport App from \"./App.vue\";\n\ncreateApp(App).mount(\"#app\");\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkjungcheogi\"] = self[\"webpackChunkjungcheogi\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], () => (__webpack_require__(9799)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["class","id","key","_createElementBlock","_Fragment","_createElementVNode","_hoisted_1","_renderList","_normalizeClass","on","$setup","selectedSubject","onClick","$event","selectSubject","_hoisted_2","subjects","_hoisted_3","currentQuestion","correct","IS_CORRECT","_hoisted_4","_createTextVNode","_toDisplayString","questionMark","_cache","shuffleQuestionList","apply","arguments","_hoisted_5","TITLE","QUESTION","_hoisted_6","ITERATION","NO","_hoisted_7","ref","onKeyup","_withKeys","checkAnswer","isAnswerEntered","passAnswer","_hoisted_8","_hoisted_9","_hoisted_10","ANSWER","_createCommentVNode","_hoisted_11","QUESTIONS","IS_ENTERED","SUBJECT","name","components","setup","value","changeQuestionList","onMounted","questionList","computed","find","question","total","length","_questionList$value$f","filter","index","concat","_ref","nextTick","initAnswer","sort","Math","random","answerRef","currentAnswer","enteredTime","focus","_ref2","timeStamp","validateAnswer","findIndex","_questionList$value$s","splice","_questionList$value$s2","_slicedToArray","push","String","toUpperCase","replace","__exports__","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","Object","keys","every","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}